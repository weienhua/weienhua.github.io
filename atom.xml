<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>欢迎来到后花园</title>
  
  
  <link href="https://weienhua.github.io/atom.xml" rel="self"/>
  
  <link href="https://weienhua.github.io/"/>
  <updated>2023-07-21T01:34:15.849Z</updated>
  <id>https://weienhua.github.io/</id>
  
  <author>
    <name>weienhua</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue-router安装配置和使用</title>
    <link href="https://weienhua.github.io/2023/07/20/vue-router%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>https://weienhua.github.io/2023/07/20/vue-router%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BD%BF%E7%94%A8/</id>
    <published>2023-07-20T09:55:19.000Z</published>
    <updated>2023-07-21T01:34:15.849Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vue-router安装配置和使用"><a href="#vue-router安装配置和使用" class="headerlink" title="vue-router安装配置和使用"></a>vue-router安装配置和使用</h3><p>学习vue的第六天，学到了用插件vue-router来实现vue单页面应用的开发，实现页面的路由跳转。</p><p>以下是个人理解，如有错误请指正。</p><span id="more"></span><p>vue-router是vue官方的一个路由管理插件，用于实现页面上的路由跳转，可以很方便的实现单页面应用的开发。</p><h4 id="vue-router安装和配置"><a href="#vue-router安装和配置" class="headerlink" title="vue-router安装和配置"></a>vue-router安装和配置</h4><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>直接使用npm命令安装就可以了，这里有一个点是如果使用的是vue2那么应该安装vue-router3版本，后面的vue-router4版本是为vue3准备的，如果强行安装的话会出现报错。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-router@<span class="number">3</span></span><br></pre></td></tr></table></figure><p>安装速度挺快的，那么既然说是vue的一个插件也就是说应该是跟vuex差不多，需要用vue.use将插件使用到vue上。</p><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>首先在src文件夹下面创建router文件夹，为了编写路由的配置，在router文件加下创建index.js文件，直接在index.js文件中编写即可。</p><p>首先将下载的vue-router引入，通过new方法创建一个VueRouter的对象，创建时传入的是一个对象参数，对象中是要用的配置信息，创建完毕之后将实例export暴露出即可。</p><ul><li>mode：这个参数配置是设置路由使用hash模式还是history模式。<ul><li>hash模式：在url路径中会出现一个&#x2F;#&#x2F;这样的符号，前端的路由跳转都写在了这个符号后面，像后端请求的时候不会将&#x2F;#&#x2F;后面的内容发出去。最直接的就是当看到页面的某个地方时点击了浏览器的刷新，hash模式会成功刷新并展示页面，而history模式会出现url请求错误。</li><li>history模式：url直接展示，当向后端发送请求时会将全部的url发送。解决方法，需要后端协助解决，判断请求的url是否属于前端。</li></ul></li><li>routes：这个就是最主要的配置，也就是配置页面上路由跳转的配置项。<ul><li>routes的value是一个数组，数组中是每一个路由规则的对象。</li><li>对象中可以配置的选项：<ul><li>path：写的是跳转的路由，也就是在url中拼接的部分</li><li>component：当跳转这个路由时会展示的组件，填写的是组件的name</li><li>name：这个是给路由命名，在router-link标签中的to属性中可以通过name来寻找到这个特定的路由。</li><li>children：子路由，该路由下的一些子路由，在url上的体现就是在该路由的path下再拼接一个path，这里要注意的是，只有一级路由的path要加<code>/</code>，子路由中的path项都不需要加<code>/</code>。</li></ul></li></ul></li></ul><p>router&#x2F;index.js文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 该文件专门用于创建整个应用的路由器</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&quot;../pages/About&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&quot;../pages/Home&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">News</span> <span class="keyword">from</span> <span class="string">&quot;../pages/News&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个路由器</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&quot;hash&quot;</span>,</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;about&#x27;</span>,</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line">            <span class="attr">children</span>:[</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">name</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>:<span class="title class_">News</span>,</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p>创建完router文件夹并编写完配置文件之后，需要在main.js中将router插件加载到vue上。这里有一个点是router在Vue创建时传入对象中时只能用router来命名，是官方固定的，如果写其他命名就会无效。</p><p>main.js文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="comment">// 引入router</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="comment">// 关闭生产提示</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    router,</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>配置完启动项目，在浏览器进去8080后url会自动加上一个&#x2F;#&#x2F;符号，就说明路由已经配置完成。</p><p><img src="https://s2.loli.net/2023/07/20/RZPsjB12XqDb5FJ.png" alt="image-20230720195604228"></p><h4 id="vue-router使用"><a href="#vue-router使用" class="headerlink" title="vue-router使用"></a>vue-router使用</h4><p>使用vue-router首先应该是将组件的路由转发规则配置好，也就是在router文件下的index.js文件中，在routes的配置数组中写的每一个对象就是每一条路由规则，如上面示例的index.js文件中，创建了两个一级路由，一个二级路由。</p><p>下方是App.vue中将配置的路由应用到组件中，使用的是<code>router-link</code>标签，标签中有一个to属性，填的就是路由文件中配置的path，也可以写成<code>:to</code>属性，然后传入对象，对象中可以传路由中的name值找到相应的路由。这里router-link应该和router-view一起用，前者是跳转路由，后者是路由指向的组件展示的地方，有点类似与插槽。</p><p>App.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;router-link to=&quot;/about&quot; &gt;About&lt;/router-link&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">    &lt;router-link to=&quot;/home&quot; &gt;Home&lt;/router-link&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import About from &#x27;./pages/About&#x27;;</span><br><span class="line">    import Home from &#x27;./pages/Home&#x27;;</span><br><span class="line"></span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;App&quot;,</span><br><span class="line">        components:&#123;</span><br><span class="line">          About,</span><br><span class="line">          Home</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><p>keep-alive标签</p><ul><li><p>组件间通过路由切换之后会自动销毁，考虑到有些组件可能会频繁的切换所以可以通过一个标签将标签包裹之后可以实现组件切换之后不被销毁，下次激活时仍然可以使用同时不需要再次挂载。</p></li><li><p>include属性：属性可以传递一个字符串，就是表明当跳转后该组件不会被销毁，也可以传递一个数组，表示数组中的组件都不会销毁，当然如果不传递参数，或者说不指定include那么就是所有的组件都不会销毁。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive include=<span class="string">&quot;News&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line">&lt;/keep-alive&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">:include</span>=<span class="string">&quot;[&#x27;News&#x27;, &#x27;Messages&#x27;]&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>router-view标签</p><ul><li>展示router-link路由链接的组件的位置，类似于插槽，提前占位。</li></ul></li><li><p>router-link标签：</p><ul><li><p>replace属性，布尔类型：</p><ul><li><p>默认为false，设置replace属性之后会默认调用router.replace()方法而不是router.push()，不会留下history历史记录。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:to=<span class="string">&quot;&#123;</span></span><br><span class="line"><span class="string">    path:&#x27;/home&#x27;,</span></span><br><span class="line"><span class="string">    replace,</span></span><br><span class="line"><span class="string">&#125;&quot;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>active-class属性，string类型：</p><ul><li><p>设置当链接激活时要添加到标签上的css类名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">:to=<span class="string">&quot;&#123;</span></span><br><span class="line"><span class="string">    path:&#x27;/home&#x27;,</span></span><br><span class="line"><span class="string">    replace,</span></span><br><span class="line"><span class="string">    active-class=&#x27;active&#x27;,</span></span><br><span class="line"><span class="string">&#125;&quot;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>to属性（string类型）指定点击之后要跳转的路由</p><ul><li><p>简单的路由跳转，不传参</p><ul><li><p>字符串写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">to=<span class="string">&quot;/home&quot;</span></span><br><span class="line">to=<span class="string">&quot;/home/news&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>对象写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传path</span></span><br><span class="line">:to=<span class="string">&quot;&#123;</span></span><br><span class="line"><span class="string">    path:&#x27;/home&#x27;,</span></span><br><span class="line"><span class="string">&#125;&quot;</span></span><br><span class="line"><span class="comment">// 传name</span></span><br><span class="line">:to=<span class="string">&quot;&#123;</span></span><br><span class="line"><span class="string">    name:&#x27;home&#x27;,</span></span><br><span class="line"><span class="string">&#125;&quot;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>传递query参数，在组件中可以通过<code>this.$route.query</code>拿到数据</p><ul><li><p>字符串写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:to=<span class="string">&quot;`/home/messages/detail?id=$&#123;m.id&#125;&amp;title=$&#123;m.title&#125;`&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>对象写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 也可以通过name来寻找路由替换path。</span></span><br><span class="line">:to=<span class="string">&quot;&#123;</span></span><br><span class="line"><span class="string">    path:&#x27;/home/messages/detail&#x27;,</span></span><br><span class="line"><span class="string">    query:&#123;</span></span><br><span class="line"><span class="string">        id: m.id,</span></span><br><span class="line"><span class="string">        title: m.title</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;&quot;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>传递params参数，在组件中可以通过<code>this.$route.params</code>拿到数据</p><ul><li><p>字符串写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:to=<span class="string">&quot;`/home/messages/detail/$&#123;m.id&#125;/$&#123;m.title&#125;`&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>对象写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传递params参数必须用name属性</span></span><br><span class="line">:to=<span class="string">&quot;&#123;</span></span><br><span class="line"><span class="string">    name:&#x27;detail&#x27;,</span></span><br><span class="line"><span class="string">    params:&#123;</span></span><br><span class="line"><span class="string">        id: m.id,</span></span><br><span class="line"><span class="string">        title: m.title</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;&quot;</span></span><br><span class="line"><span class="comment">// router中的配置需要将path修改，添加占位符</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;detail/:id/:title&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">Detail</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li><li><p>router&#x2F;index.js配置</p><ul><li><p>通过配置项将参数以props形式传递，在组件中只需要通过props方式接收传递的参数即可，与组件间props传参接收一样。</p><ul><li><p>第一种，props值为对象，该对象中的key-value最终都会以props形式传到Detail组件中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">Detail</span>,</span><br><span class="line">        </span><br><span class="line">    <span class="attr">props</span>:&#123;<span class="attr">id</span>:<span class="string">&#x27;666&#x27;</span>, <span class="attr">title</span>:<span class="string">&#x27;888&#x27;</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>第二种，props值为布尔值，如果为真，会将收到的params参数以props形式传到Detail组件中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">    <span class="comment">//params传参需要配置path占位</span></span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;detail/:id/:title&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">Detail</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">props</span>:<span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>第三种，props为函数，函数有一个接收参数就是<code>$route</code>，该函数返回值对象中每一组key-value都会以props形式传到Detail组件中，这里可以用query传参，也可以用params传参（注意params传参要修改path占位），最后props会将数据处理传递到组件的props属性中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">Detail</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">props</span>(<span class="params">$route</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="attr">id</span>:$route.<span class="property">query</span>.<span class="property">id</span>,<span class="attr">title</span>:$route.<span class="property">query</span>.<span class="property">title</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>编程式路由导航</p><ul><li><p>由于在程序编写中触发路由跳转的位置不一定每次都可以写<code>route-link</code>标签，可能也是个按钮点击之后跳转路由，下面的编程式路由导航就是方便自定义编写。</p></li><li><p>这里用到两个router上的函数触发跳转，以按钮点击跳转为例</p><ul><li><p>push，即保存浏览器history历史记录，点击触发回调函数，函数中可以通过this找到<code>$router</code>中有一个push方法，这个方法就是触发路由跳转，传入参数为一个对象，可以理解为与router-link中的to传入对象一致。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">pushShow</span>(<span class="params">m</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">      <span class="attr">name</span>:<span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">      <span class="attr">query</span>:&#123;</span><br><span class="line">        <span class="attr">id</span>: m.<span class="property">id</span>,</span><br><span class="line">        <span class="attr">title</span>: m.<span class="property">title</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>replace，即不保存浏览器history历史记录，点击出发回调函数，函数中可以通过this找到<code>$router</code>中有一个raplace方法，这个方法就是触发路由跳转，传入参数为一个对象，可以理解为与router-link中的to传入对象一致。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">replaceShow</span>(<span class="params">m</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(&#123;</span><br><span class="line">      <span class="attr">name</span>:<span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">      <span class="attr">query</span>:&#123;</span><br><span class="line">        <span class="attr">id</span>: m.<span class="property">id</span>,</span><br><span class="line">        <span class="attr">title</span>: m.<span class="property">title</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>两个生命周期钩子</p><ul><li>当组件通过路由跳转后，原先展示的组件就会自动销毁，所以上方提到了keep-alive标签，可以保证组件在路由跳转之后不被销毁，这样就可能会出现一些问题，当组件中创建了计时器，调用生命周期钩子<code>beforeDestroy</code>时将计时器销毁，可是当在keep-alive中组件不会销毁，这时销毁的生命周期构子就不会被调用，可是计时器应该在组件不展示时取消掉，否则在后台会一直占用资源，这里就引出了下面的两个生命周期钩子用来解决这个问题。<ul><li><code>activated()</code>这个会在组件激活时调用也就是组件从消失状态—&gt;用户眼前时。</li><li><code>deactivated()</code>这个会在组件失火时调用也就是组件从用户眼前—&gt;消失状态时。</li></ul></li></ul></li><li><p>路由守卫</p><ul><li><p>全局路由守卫</p><p>全局路由守卫有两个，当路由跳转时会自动触发。</p><ul><li><p>全局前置路由守卫：在路由跳转之前调用，如果回调函数中自己写的校验逻辑未通过则可以不调用next函数向下跳转，即不允许跳转。</p></li><li><p>接收为一个回调函数，回调函数中接收三个参数，to：要跳转向哪个路由，from：从哪个路由跳转来，next：一个函数，当调用next时路由会正常像下一步跳转，这里可以做一些路由检测工作，如果检测未通过就不调用next，不允许跳转。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;beforeEach&quot;</span>);</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>全局后置路由守卫：在路由跳转之后调用，也就是此时已经跳转完毕，组件也已经展示了，这时可以做一些跳转之后的逻辑，比如页签图标什么的。</p></li><li><p>接收为一个回调函数，回调函数中接收两个参数，to：要跳转向哪个路由，from：从哪个路由跳转来，没有next函数了，因为路由已经跳转完毕。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;afterEach&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>独享路由守卫</p><ul><li><p>只有一个，在routes配置中编写，独享路由守卫也是在路由跳转之前调用，不过是在全局前置路由守卫之后调用，作用可以和全局前置路由守卫一样，不过独享路由守卫只有配置过的路由在跳转的时候才会调用。</p></li><li><p>接收为一个回调函数，回调函数中接收三个参数，to：要跳转向哪个路由，from：从哪个路由跳转来，next：一个函数，当调用next时路由会正常像下一步跳转，这里可以做一些路由检测工作，如果检测未通过就不调用next，不允许跳转。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">beforeEnter</span>:<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;beforeEnter&quot;</span>);</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>组件内路由守卫：组件内路由守卫写在组件中。</p><ul><li><p>组件进入前守卫：当点击路由跳转时会调用该守卫，如果前面的守卫都有写的话，调用顺序是在独享路由守卫之后。</p></li><li><p>接收为一个回调函数，回调函数中接收三个参数，to：要跳转向哪个路由，from：从哪个路由跳转来，next：一个函数，当调用next时路由会正常像下一步跳转，这里可以做一些路由检测工作，如果检测未通过就不调用next，不允许跳转。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">beforeRouteEnter</span>(<span class="params">to, <span class="keyword">from</span>, next</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;beforeRouteEnter&quot;</span>);</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>组件离开前守卫：该守卫与其他守卫不太一样，该守卫的调用时机是：当前组件在展示，点击路由要跳转其他组件离开时会调用该组件，该组件也可以阻止跳转，因为接收了next参数。</p></li><li><p>接收为一个回调函数，回调函数中接收三个参数，to：要跳转向哪个路由，from：从哪个路由跳转来，next：一个函数，当调用next时路由会正常像下一步跳转。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">beforeRouteLeave</span>(<span class="params">to, <span class="keyword">from</span>, next</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;beforeRouteLeave&quot;</span>);</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>当五个路由守卫都写的时候调用顺序如下：</p><p><img src="https://s2.loli.net/2023/07/21/QtIVH91Ac3MCnwi.png" alt="image-20230721091557845"></p><p>两个全局守卫会在每次路由跳转时都会调用。</p></li></ul></li><li><p>路由元信息<code>$route.meta</code></p><ul><li><p>可以在定义路由时在对象中增加meta参数，参数传递为一个对象，对象中可以是一些认证信息等 ，当用户点击跳转路由时可以在守卫中取出meta中的信息与用户localstorage中的信息对比，如果认证通过则可以完成路由跳转。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">News</span>,</span><br><span class="line">    <span class="attr">meta</span>:&#123;<span class="attr">token</span>:<span class="string">&#x27;11111&#x27;</span>&#125;,</span><br><span class="line">    <span class="comment">// 独享路由守卫，在全局前置后，全局后置前调用</span></span><br><span class="line">    <span class="attr">beforeEnter</span>:<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;beforeEnter&quot;</span>);</span><br><span class="line">        <span class="title function_">next</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;vue-router安装配置和使用&quot;&gt;&lt;a href=&quot;#vue-router安装配置和使用&quot; class=&quot;headerlink&quot; title=&quot;vue-router安装配置和使用&quot;&gt;&lt;/a&gt;vue-router安装配置和使用&lt;/h3&gt;&lt;p&gt;学习vue的第六天，学到了用插件vue-router来实现vue单页面应用的开发，实现页面的路由跳转。&lt;/p&gt;
&lt;p&gt;以下是个人理解，如有错误请指正。&lt;/p&gt;</summary>
    
    
    
    <category term="工程" scheme="https://weienhua.github.io/categories/%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="前端" scheme="https://weienhua.github.io/categories/%E5%B7%A5%E7%A8%8B/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="vue" scheme="https://weienhua.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>使用vuex实现任意组件间通信</title>
    <link href="https://weienhua.github.io/2023/07/19/%E4%BD%BF%E7%94%A8vuex%E5%AE%9E%E7%8E%B0%E4%BB%BB%E6%84%8F%E7%BB%84%E4%BB%B6%E9%97%B4%E9%80%9A%E4%BF%A1/"/>
    <id>https://weienhua.github.io/2023/07/19/%E4%BD%BF%E7%94%A8vuex%E5%AE%9E%E7%8E%B0%E4%BB%BB%E6%84%8F%E7%BB%84%E4%BB%B6%E9%97%B4%E9%80%9A%E4%BF%A1/</id>
    <published>2023-07-19T07:51:54.000Z</published>
    <updated>2023-07-19T09:04:00.728Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用vuex实现任意组件间通信"><a href="#使用vuex实现任意组件间通信" class="headerlink" title="使用vuex实现任意组件间通信"></a>使用vuex实现任意组件间通信</h3><p>学习vue的第五天，学到了用插件vuex来实现vue任意组件之间的通信。</p><p>以下是个人理解，如有错误请指正。</p><span id="more"></span><h4 id="vuex描述"><a href="#vuex描述" class="headerlink" title="vuex描述"></a>vuex描述</h4><p>Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式 + 库</strong>。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p><p>vuex实现了共享数据的功能，当一个组件想要获取数据时直接向vuex发送请求即可，当一个组件想修改vuex中的数据时可以通过显式调用dispatch和commit来对vuex管理的状态进行修改。</p><p><img src="https://s2.loli.net/2023/07/19/Nj1wcCeq2VDKmT4.png" alt="image-20230719155810712"></p><p>这个图片vuex官网贴的一张vuex内部逻辑图片，左边绿色的是组件</p><ul><li>当一个组件想要修改vuex管理的数据（state）时，可以 通过调用dispatch方法，需要传递两个参数，第一个是string类型的传入的是Actions中的方法名，第二个是要向方法中传递的参数value。</li><li>当Actions接收到一个dispatch时，会向自身去寻找是否有第一个参数的方法名，如果没有就提示错误，找到之后就将第二个参数传入该方法。在Actions中的方法一般有两个参数，第一个是context也就是将vuex本身的一些方法包括（commit、state、dispatch······）这些传给方法，方便在逻辑处理之后进行下一步操作，第二个参数就是value，也就是用户传入的数据，如果是单数据就可以直接用，多数据的话可以传对象。</li><li>在Actions中处理逻辑之后一方面可以再次调用dispatch进行下一个阶段的逻辑处理，另一个是直接调用commit将操作发送到Mutations中。当然组件也可以直接通过commit方法向Mutations传。这里有两个参数，第一个是Mutations中的方法名（string），第二个是要操作的数据。</li><li>Mutations中的方法在检测到有调用时会收到两个参数，第一个是state，也就是vuex储存的数据，第二个是组件要传入的数据。这时就可以进行操作将state中的数据进行更新。</li><li>当state中的数据更新后，用到数据的组件也会进行重新的渲染。</li></ul><p>由于整个流程中只有Mutations中的方法在真正的操作state中的数据，所以vue开发者工具的监测只针对Mutations。在Actions中可以进行一些复杂的逻辑操作，也可以向其他的服务器发送信息等来验证自己的数据是否合理。</p><h4 id="vuex安装配置"><a href="#vuex安装配置" class="headerlink" title="vuex安装配置"></a>vuex安装配置</h4><p>上面整理完vuex的工作流程，这里是vuex的安装。</p><p>通过<code>npm install vuex@3</code>进行安装即可，这里有一个点是如果使用的是vue2.0的版本，那么vuex就应该下载3.0版本，因为vuex的4.0版本是为vue3.0服务的，所以在npm安装的时候要注意一下选择版本号。</p><p>安装完成之后就可以开始配置了。</p><p>因为vuex是一个全局的状态管理，有点类似全局事件总线，所以应该将vuex安装在vue实例对象身上，这样任意组件都可以访问到vuex。vuex在vue的配置中叫<code>store</code>，在创建vue实例的时候将其配置到对象中即可。</p><p><img src="https://s2.loli.net/2023/07/19/cG4rHRvmJ5uLzfg.png" alt="image-20230719162032157"></p><p>可以看到这里有一个store是通过外部引入的，这个就是vuex的配置文件，在src下创建一个<code>store</code>文件夹，文件夹里创建一个<code>index.js</code>文件用来写vuex的配置。</p><p>插件的安装需要用到Vue.use()，方法，所以在这个文件中也要引入vue。引入vuex之后，可以开始配置了。</p><p>上面图中看到vuex的store中有三个主要的内容也可以说是配置对象，就是actions、mutations、state，在文件中创建三个对象</p><ul><li>actions中要写的是用于响应组件中的动作回调函数，组件通过dispatch方法调用actions中的方法，回调函数接收到的参数有两个（context, value），可以完成一些逻辑，然后将操作传向mutations。</li><li>mutations中写的是操作state的函数，会被actions和组件通过commit调用，回调函数接收到的参数有两个（state, value）。</li><li>state中写的就是储存的数据。</li><li>下面代码也提到了getters配置项，它就像组件中的computed计算属性，将一些计算后的数据返回，组件可以通过getters点得到想要的内容。</li></ul><p>写完配置项之后就可以创建store也就vuex实例了，调用Vuex的Store方法，传入前面写好的四个配置项，然后将new出来的store默认暴露即可，之后在main.js中配置到Vue实例对象上，就可以发现实例对象身上出现了一个<code>$store</code>的值，打开之后就是vuex的方法和state数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store/index.js内容</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 引入vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">// 使用vuex插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 准备actions----用于响应组件中的动作</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="title function_">incrementOdd</span>(<span class="params">context, value</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(context.<span class="property">state</span>.<span class="property">sum</span> % <span class="number">2</span>) &#123;</span><br><span class="line">            context.<span class="title function_">commit</span>(<span class="string">&#x27;INCREMENT&#x27;</span>, value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">incrementWait</span>(<span class="params">context, value</span>)&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            context.<span class="title function_">commit</span>(<span class="string">&#x27;INCREMENT&#x27;</span>, value)</span><br><span class="line">        &#125;, <span class="number">500</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">addWangStudent</span>(<span class="params">context, value</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(value.<span class="property">name</span>[<span class="number">0</span>]!==<span class="string">&#x27;王&#x27;</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;请添加姓王的同学&#x27;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            context.<span class="title function_">commit</span>(<span class="string">&#x27;ADDSTUDENT&#x27;</span>, value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 准备mutations----用于操作数据（state）</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="title function_">INCREMENT</span>(<span class="params">state, value</span>)&#123;</span><br><span class="line">        state.<span class="property">sum</span> += value</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">DECREMENT</span>(<span class="params">state, value</span>)&#123;</span><br><span class="line">        state.<span class="property">sum</span> -= value</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">ADDSTUDENT</span>(<span class="params">state, value</span>) &#123;</span><br><span class="line">        state.<span class="property">students</span>.<span class="title function_">unshift</span>(value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 准备state----用于储存数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">    <span class="attr">sum</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="attr">students</span>:[</span><br><span class="line">        &#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>, <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>&#125;</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 准备getters----用于将state中的数据进行加工</span></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">    <span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    actions,</span><br><span class="line">    mutations,</span><br><span class="line">    state,</span><br><span class="line">    getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="vuex使用"><a href="#vuex使用" class="headerlink" title="vuex使用"></a>vuex使用</h4><h5 id="单模块"><a href="#单模块" class="headerlink" title="单模块"></a>单模块</h5><p>配置完之后就可以使用了，在组件中通过<code>$store</code>拿到vuex的数据。</p><ul><li><p>拿到state数据中的sum数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">sum</span></span><br></pre></td></tr></table></figure></li><li><p>拿到getters中的数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>.<span class="property">bigSum</span></span><br></pre></td></tr></table></figure></li><li><p>向actions发送</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;incrementOdd&#x27;</span>, <span class="variable language_">this</span>.<span class="property">n</span>)</span><br></pre></td></tr></table></figure></li><li><p>向mutations发送</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;DECREMENT&#x27;</span>,<span class="variable language_">this</span>.<span class="property">n</span>)</span><br></pre></td></tr></table></figure></li></ul><p>上面是最基本的拿到store中的数据。</p><p>下面是去拿这些数据的简写方法也就是vuex的一些封装好的方法</p><ul><li><p>导入方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mapState, mapGetters, mapMutations, mapActions&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>拿state和getters数据（将数据通过计算属性拿到之后就可以在模板中直接调用），这里mapState和mapGetters拿到的数据是函数对象，通过…将对象展开到计算属性中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">// 借助mapState生成计算属性，从state中读取数据。（对象写法）</span></span><br><span class="line">    <span class="comment">// ...mapState(&#123;sum:&#x27;sum&#x27;&#125;)</span></span><br><span class="line">    <span class="comment">// 借助mapState生成计算属性，从state中读取数据。（数组写法）</span></span><br><span class="line">    ...<span class="title function_">mapState</span>([<span class="string">&#x27;sum&#x27;</span>]),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 借助mapGetters生成计算属性，从getters中读取数据。（对象写法）</span></span><br><span class="line">    <span class="comment">// ...mapGetters(&#123;bigSum:&#x27;bigSum&#x27;&#125;)</span></span><br><span class="line">    <span class="comment">// 借助mapGetters生成计算属性，从getters中读取数据。（数组写法）</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>([<span class="string">&#x27;bigSum&#x27;</span>])</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>通过mapMutations和mapActions生成调用函数，这里生成的函数可以有传参，不过需要在标签调用时直接传入，否则会将事件event传入。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="comment">// 自己写的方法调用commit</span></span><br><span class="line">    <span class="comment">// increment()&#123;</span></span><br><span class="line">    <span class="comment">//     this.$store.commit(&#x27;INCREMENT&#x27;,this.n)</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="comment">// decrement()&#123;</span></span><br><span class="line">    <span class="comment">//     this.$store.commit(&#x27;DECREMENT&#x27;,this.n)</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 借助mapMutations生成对应的方法，方法会调用commit方法联系mutations（对象写法）</span></span><br><span class="line">    <span class="comment">// 需要调用时传参value，否则传参为event</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>(&#123;<span class="attr">increment</span>:<span class="string">&#x27;INCREMENT&#x27;</span>, <span class="attr">decrement</span>:<span class="string">&#x27;DECREMENT&#x27;</span>&#125;),</span><br><span class="line">    <span class="comment">// 借助mapMutations生成对应的方法，方法会调用commit方法联系mutations（数组写法）</span></span><br><span class="line">    <span class="comment">// ...mapMutations([&#x27;INCREMENT&#x27;,&#x27;DECREMENT&#x27;])</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自己写的方法调用dispatch</span></span><br><span class="line">    <span class="comment">// incrementOdd()&#123;</span></span><br><span class="line">    <span class="comment">//     this.$store.dispatch(&#x27;incrementOdd&#x27;, this.n)</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="comment">// incrementWait()&#123;</span></span><br><span class="line">    <span class="comment">//     this.$store.dispatch(&#x27;incrementWait&#x27;, this.n)</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="comment">// 借助mapActions生成对应的方法，方法会调用dispatch方法联系actions（对象写法）</span></span><br><span class="line">    <span class="comment">// 需要调用时传参value，否则传参为event</span></span><br><span class="line">    <span class="comment">// ...mapActions(&#123;incrementOdd:&#x27;incrementOdd&#x27;, incrementWait:&#x27;incrementWait&#x27;&#125;),</span></span><br><span class="line">    <span class="comment">// 借助mapActions生成对应的方法，方法会调用dispatch方法联系actions（数组写法）</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>([<span class="string">&#x27;incrementOdd&#x27;</span>,<span class="string">&#x27;incrementWait&#x27;</span>])</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ul><h5 id="多模块"><a href="#多模块" class="headerlink" title="多模块"></a>多模块</h5><p>上面的store配置是单模块的，如果多人开发，就会出现冲突问题，下面通过命名空间多模块，来解决。</p><p>index.js中</p><ul><li>将两个组件的数据分别配置在两个对象中，打开namespaced配置为true，在下面new store时传入模块。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 引入vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">// 使用vuex插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> countOptions = &#123;</span><br><span class="line">    <span class="attr">namespaced</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">actions</span>:&#123;</span><br><span class="line">        <span class="title function_">incrementOdd</span>(<span class="params">context, value</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(context.<span class="property">state</span>.<span class="property">sum</span> % <span class="number">2</span>) &#123;</span><br><span class="line">                context.<span class="title function_">commit</span>(<span class="string">&#x27;INCREMENT&#x27;</span>, value)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">incrementWait</span>(<span class="params">context, value</span>)&#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                context.<span class="title function_">commit</span>(<span class="string">&#x27;INCREMENT&#x27;</span>, value)</span><br><span class="line">            &#125;, <span class="number">500</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>:&#123;</span><br><span class="line">        <span class="title function_">INCREMENT</span>(<span class="params">state, value</span>)&#123;</span><br><span class="line">            state.<span class="property">sum</span> += value</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">DECREMENT</span>(<span class="params">state, value</span>)&#123;</span><br><span class="line">            state.<span class="property">sum</span> -= value</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">state</span>:&#123;</span><br><span class="line">        <span class="attr">sum</span>:<span class="number">0</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>:&#123;</span><br><span class="line">        <span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> studentOptions = &#123;</span><br><span class="line">    <span class="attr">namespaced</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">actions</span>:&#123;</span><br><span class="line">        <span class="title function_">addWangStudent</span>(<span class="params">context, value</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(value.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;王&#x27;</span>)===<span class="number">0</span>)&#123;</span><br><span class="line">                context.<span class="title function_">commit</span>(<span class="string">&#x27;ADDSTUDENT&#x27;</span>, value)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&#x27;请添加姓王的同学&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>:&#123;</span><br><span class="line">        <span class="title function_">ADDSTUDENT</span>(<span class="params">state, value</span>) &#123;</span><br><span class="line">            state.<span class="property">students</span>.<span class="title function_">unshift</span>(value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">state</span>:&#123;</span><br><span class="line">        <span class="attr">students</span>:[</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>, <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>&#125;</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>:&#123;</span><br><span class="line">        <span class="title function_">firstStudentName</span>(<span class="params">state</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> state.<span class="property">students</span>[<span class="number">0</span>].<span class="property">name</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    <span class="attr">modules</span>: &#123;</span><br><span class="line">        countOptions,</span><br><span class="line">        studentOptions</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>组件中调用时</p><ul><li><p>简写方式，在mapState函数中传入第一个参数，也就是模块的命名名称。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...<span class="title function_">mapState</span>(<span class="string">&#x27;countOptions&#x27;</span>,[<span class="string">&#x27;sum&#x27;</span>]),</span><br><span class="line">...<span class="title function_">mapGetters</span>(<span class="string">&#x27;countOptions&#x27;</span>,[<span class="string">&#x27;bigSum&#x27;</span>]),</span><br><span class="line">...<span class="title function_">mapMutations</span>(<span class="string">&#x27;countOptions&#x27;</span>,&#123;<span class="attr">increment</span>:<span class="string">&#x27;INCREMENT&#x27;</span>, <span class="attr">decrement</span>:<span class="string">&#x27;DECREMENT&#x27;</span>&#125;),</span><br><span class="line">...<span class="title function_">mapActions</span>(<span class="string">&#x27;countOptions&#x27;</span>,[<span class="string">&#x27;incrementOdd&#x27;</span>,<span class="string">&#x27;incrementWait&#x27;</span>]),</span><br></pre></td></tr></table></figure></li><li><p>未简写方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取state中的数据时需要先获取命名对象，再获取想要的数据</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">countOptions</span>.<span class="property">sum</span></span><br><span class="line"><span class="comment">// 获取getters时需要在getters的对象名称前加上命名名称/</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>[<span class="string">&#x27;studentOptions/firstStudentName&#x27;</span>]</span><br><span class="line"><span class="comment">// 向actions和mutations传时需要修改传入的第一个参数，在方法名前加上命名名称/</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;studentOptions/ADDSTUDENT&#x27;</span>, studentObj)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;studentOptions/addWangStudent&#x27;</span>, studentObj)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;使用vuex实现任意组件间通信&quot;&gt;&lt;a href=&quot;#使用vuex实现任意组件间通信&quot; class=&quot;headerlink&quot; title=&quot;使用vuex实现任意组件间通信&quot;&gt;&lt;/a&gt;使用vuex实现任意组件间通信&lt;/h3&gt;&lt;p&gt;学习vue的第五天，学到了用插件vuex来实现vue任意组件之间的通信。&lt;/p&gt;
&lt;p&gt;以下是个人理解，如有错误请指正。&lt;/p&gt;</summary>
    
    
    
    <category term="工程" scheme="https://weienhua.github.io/categories/%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="前端" scheme="https://weienhua.github.io/categories/%E5%B7%A5%E7%A8%8B/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="vue" scheme="https://weienhua.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue组件之间的数据传递</title>
    <link href="https://weienhua.github.io/2023/07/18/vue%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%92/"/>
    <id>https://weienhua.github.io/2023/07/18/vue%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%92/</id>
    <published>2023-07-18T11:17:32.000Z</published>
    <updated>2023-07-18T13:03:56.820Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vue组件之间的数据传递"><a href="#vue组件之间的数据传递" class="headerlink" title="vue组件之间的数据传递"></a>vue组件之间的数据传递</h3><p>学习vue的第四天学到了组件之间的数据传递，具体有一下几种需求：</p><ul><li>父组件-&gt;子组件</li><li>子组件-&gt;父组件</li><li>兄弟组件之间、任意组件之间</li></ul><span id="more"></span><p>实现的方法有如下几种：</p><ul><li>props传值</li><li>自定义事件</li><li>事件总线</li><li>消息订阅与发布（pubsub-js）</li></ul><p>以下是个人理解，如有错误请指正。</p><h4 id="props传值"><a href="#props传值" class="headerlink" title="props传值"></a>props传值</h4><p>props传值只能实现父组件向子组件传值或者子组件向父组件传值，无法实现兄弟组件之间直接传值，不过这个也是可以实现的，只不过实现起来有点麻烦，需要将数据的状态提升到共同的父组件，再通过层层传递。</p><p>所以用到props时一般都是实现的父组件向子组件传值。</p><h5 id="父组件-gt-子组件"><a href="#父组件-gt-子组件" class="headerlink" title="父组件-&gt;子组件"></a>父组件-&gt;子组件</h5><p>在vue中父组件向子组件传值非常的方便，父组件只需要将要传递的数据写在组件上，子组件在props属性中接收即可拿到传递的数据，接收之后就可以在this对象中访问到，也就是说可以像访问data中的数据一样进行访问。</p><p>示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 父组件传值</span><br><span class="line">&lt;MyList :todos=&quot;todos&quot; /&gt;</span><br><span class="line"></span><br><span class="line">// 子组件接收，在</span><br><span class="line">export default &#123;</span><br><span class="line">    props:[&#x27;todos&#x27;],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="子组件-gt-父组件"><a href="#子组件-gt-父组件" class="headerlink" title="子组件-&gt;父组件"></a>子组件-&gt;父组件</h5><p>利用props最基本的方式，也就是父组件定义一个函数，将函数通过props的方式传递给子组件，这时子组件通过props就可以接收该函数，当子组件想给父组件传递数据的时候直接调用这个函数就可以通过函数参数将数据传递给父组件的函数中，这是父组件拿到了数据，就可以进行下一步的数据处理了。</p><p>示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">//父组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">    &lt;MyHeader :handleEnterTodo=&quot;handleEnterTodo&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import MyHeader from &#x27;./components/MyHeader&#x27;</span><br><span class="line"></span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;App&#x27;,</span><br><span class="line">        components:&#123;MyHeader&#125;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return&#123;</span><br><span class="line">                todos:[</span><br><span class="line">                    &#123;id:&#x27;1&#x27;, title:&#x27;抽烟&#x27;, done:false&#125;,</span><br><span class="line">                    &#123;id:&#x27;2&#x27;, title:&#x27;喝酒&#x27;, done:false&#125;,</span><br><span class="line">                    &#123;id:&#x27;3&#x27;, title:&#x27;烫头&#x27;, done:true&#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            //添加todo</span><br><span class="line">            handleEnterTodo(title)&#123;</span><br><span class="line">                let id = (this.todos.length + 1).toString()</span><br><span class="line">                let todoObj = &#123;id:id,title:title,done:false&#125;</span><br><span class="line">                this.todos.unshift(todoObj)</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">// 子组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; placeholder=&quot;请输入你的任务名称，按回车键确认&quot; v-model=&quot;title&quot; @keyup.enter=&quot;handleEnter&quot; &gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;MyHeader&#x27;,</span><br><span class="line">        props:[&#x27;handleEnterTodo&#x27;],</span><br><span class="line">        data()&#123;</span><br><span class="line">          return&#123;</span><br><span class="line">            title:&#x27;&#x27;,</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">          handleEnter()&#123;</span><br><span class="line">            if(this.title.trim() === &#x27;&#x27;)&#123;</span><br><span class="line">              alert(&quot;请输入任务&quot;)</span><br><span class="line">              return</span><br><span class="line">            &#125;</span><br><span class="line">            this.handleEnterTodo(this.title)</span><br><span class="line">            this.title = &#x27;&#x27;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>上面父组件向子组件传递了一个函数，这个函数接收一个title参数，然后将title包装成一个对象储存到todos中，子组件通过props接收到函数，当要添加一条信息的时候，将title作为参数传入到的父组件函数中，这时父组件就接收到该值，下面就可以完成添加的需求。</p><h4 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h4><p>自定义事件可以实现子组件向父组件传值。</p><h5 id="子组件-gt-父组件-1"><a href="#子组件-gt-父组件-1" class="headerlink" title="子组件-&gt;父组件"></a>子组件-&gt;父组件</h5><p>父组件调用子组件时通过定义一个事件传入子组件，事件不需要子组件去接收什么的，只需要子组件在想调用的时候通过<code>$emit()</code>去出发事件即可。这里涉及到父组件定义事件回调函数、将事件与组件绑定和事件与组件的解绑。</p><ul><li><p>定义回调函数</p><p>自定义一个事件需要创建一个回调函数，当然也可以直接写在绑定事件与组件时的参数中，这里以自定义回调函数为例。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//在methods中定义一个回调函数</span><br><span class="line">handleCheckAllTodo(done)&#123;</span><br><span class="line">    this.todos.forEach((todo)=&gt;&#123;</span><br><span class="line">        todo.done = done</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>绑定事件</p><p>当事件创建完成之后需要与组件绑定才可以获取到子组件触发事件。绑定事件有两种方式，这里以第一种为例，也就是直接在组件标签中去写。通过<code>v-on:handleCheckAllTodo=&quot;handleCheckAllTodo&quot;</code>的方式来绑定一个自定义事件（<code>v-on:</code>可以简写为<code>@</code>符号），引号中的内容为上一步创建的回调函数的名，等号前为自定义事件的名称，也就是在子组件中触发事件时的事件名称。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;MyFooter</span><br><span class="line">:todos=&quot;todos&quot;</span><br><span class="line">    @handleCheckAllTodo=&quot;handleCheckAllTodo&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure></li><li><p>触发事件</p><p>事件绑定在那个组件中就应该去那个组件中触发，这里到子组件中去触发组件，调用<code>this.$emit(&#39;handleCheckAllTodo&#39;, data)</code>方法来触发自定义组件，传入的第一个参数时自定义事件的名称，后面跟的参数为事件触发传的参数，也就是传入了父组件的回调函数的参数中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">handleCheckAll(e)&#123;</span><br><span class="line">    this.$emit(&#x27;handleCheckAllTodo&#x27;, e.target.checked)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ul><p>上面事件绑定提到还有第二种方法，也就是通过<code>$on()</code>方法来绑定事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 首先给要绑定事件的组件添加ref属性，为了下面绑定事件时选择组件</span><br><span class="line">&lt;MyHeader ref=&quot;myheader&quot; /&gt;</span><br><span class="line">// 自定义事件绑定一般都在组件挂载完毕之后添加</span><br><span class="line">// 通过this.$refs.myheader选中组件，再用$on()绑定事件</span><br><span class="line">// $on()传第一个参数是自定义事件的名称，第二个参数是回调函数</span><br><span class="line">// 也就是在回调函数这里可以直接传一个箭头函数</span><br><span class="line">mounted() &#123;</span><br><span class="line">    this.$refs.myheader.$on(&quot;handleEnterTodo&quot;, this.handleEnterTodo)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是第二种自定义事件的绑定方法，如果想要事件只调用一次就失效可以使用<code>$once()</code>传参和<code>$on()</code>一样。</p><ul><li><p>事件的解绑</p><p>当不在用到这个事件时，可以将事件与组件解绑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 第一种方法，单事件解绑</span><br><span class="line">this.$refs.myheader.$off(&#x27;handleEnterTodo&#x27;)</span><br><span class="line">// 第二种方法，多事件解绑</span><br><span class="line">this.$refs.myheader.$off([&#x27;handleEnterTodo2&#x27;,&#x27;&#x27;handleEnterTodo2&#x27;&#x27;])</span><br><span class="line">// 也可以不穿off里的参数，那就是把所有myheader组件的事件都解绑</span><br></pre></td></tr></table></figure></li></ul><p>由于事件是绑定在组件上为了子组件与父组件传值，那么当父组件销毁后，这里的自定义组件也就都自动销毁了。</p><h4 id="事件总线"><a href="#事件总线" class="headerlink" title="事件总线"></a>事件总线</h4><p>前面提到的props和自定义事件两个都只适用于父子组件之间传值，那如果我需要在兄弟之间或者爷孙组件之间传值呢？这里就引出了事件总线，与自定义事件的方法差不多，只不过是在vm创建的时候也就是<code>beforeCreate()</code>中给vue实例对象上添加一个“傀儡的组件”，这个“傀儡组件”需要有<code>$on(),$once(),$off()</code>这三个方法，来创建和销毁自定义事件，同时这个“傀儡组件”也可以被所有的组件访问到，那就是说所有组件都可以操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">    el: &quot;#app&quot;,</span><br><span class="line">    render: h =&gt; h(App),</span><br><span class="line">    beforeCreate() &#123;</span><br><span class="line">        // 安装全局事件总线</span><br><span class="line">        Vue.prototype.$bus = this</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>安装完全局事件总线之后就可以实现任意组件之间传递数据了。</p><ul><li><p>创建事件绑定</p><p>事件一般都在组件挂载完之后加也就是在<code>mounted()</code>生命周期中，这里<code>$bus</code>是在vm中安装事件总线时定义的一个名字。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">    this.$bus.$on(&#x27;handleDeleteTodo&#x27;, this.handleDeleteTodo)</span><br><span class="line">// 这里可以把回调参数写成箭头函数</span><br><span class="line">this.$bus.$on(&#x27;handleDeleteTodo2&#x27;, ()=&gt;&#123;&#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>触发事件</p><p>当A组件在事件总线上创建一个事件后，B组件就可以触发事件将数据传递给A组件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$bus.$emit(&#x27;handleCheckTodo&#x27;, id)</span><br></pre></td></tr></table></figure></li><li><p>销毁事件</p><p>由于事件现在都在事件总线上绑定了，一方面需要注意事件的名称不能重复，另一方面考虑到如果绑定事件过多可能会影响效率。所以当一个在销毁之前，应该将自己创建的事件给取消绑定，这里在生命周期钩子<code>beforeDestory()</code>中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">beforeDestroy() &#123;</span><br><span class="line">    this.$bus.$off(&#x27;handleCheckTodo&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>这样事件总线就实现了任意组件之间的通信。</p><h4 id="消息订阅与发布（pubsub-js）"><a href="#消息订阅与发布（pubsub-js）" class="headerlink" title="消息订阅与发布（pubsub-js）"></a>消息订阅与发布（pubsub-js）</h4><p>消息订阅与发布与事件总线差不多都是实现任意组件之间的通信，这里是通过第三方js库来实现的，npm安装<code>pubsub-js</code>库，这个库实现了消息订阅与发布的完整功能，只需要导入调用即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 导入直接通过import就可，导入之后得到一个对象</span><br><span class="line">import pubsub from &#x27;pubsub-js&#x27;</span><br><span class="line"></span><br><span class="line">// 创建消息订阅，调用subscribe方法</span><br><span class="line">// 有两个参数，第一个是消息名称，第二个回调函数，返回值为该消息订阅的id</span><br><span class="line">// 消息名称用来发布消息是用的</span><br><span class="line">// 回调函数是消息发布之后的逻辑实现，会有两个参数传入</span><br><span class="line">// 第一个是消息名称（固定），第二个是后续传入的参数（也就是消息发布携带的数据）</span><br><span class="line">this.pubId = pubsub.subscribe(&#x27;handleDeleteTodo&#x27;, (msgName,obj)=&gt;&#123;</span><br><span class="line">    this.handleDeleteTodo(obj)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 消息发布，调用publish方法</span><br><span class="line">// 参数第一个是消息名称，第二个即携带的数据</span><br><span class="line">// 可以将携带的数据设定为对象，这样数据传递方便</span><br><span class="line">pubsub.publish(&#x27;handleDeleteTodo&#x27;,obj)</span><br><span class="line"></span><br><span class="line">// 消息的退订，调用unsubscribe方法</span><br><span class="line">// 方法需要传入消息订阅的id</span><br><span class="line">pubsub.unsubscribe(this.pubId)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;vue组件之间的数据传递&quot;&gt;&lt;a href=&quot;#vue组件之间的数据传递&quot; class=&quot;headerlink&quot; title=&quot;vue组件之间的数据传递&quot;&gt;&lt;/a&gt;vue组件之间的数据传递&lt;/h3&gt;&lt;p&gt;学习vue的第四天学到了组件之间的数据传递，具体有一下几种需求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;父组件-&amp;gt;子组件&lt;/li&gt;
&lt;li&gt;子组件-&amp;gt;父组件&lt;/li&gt;
&lt;li&gt;兄弟组件之间、任意组件之间&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="工程" scheme="https://weienhua.github.io/categories/%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="前端" scheme="https://weienhua.github.io/categories/%E5%B7%A5%E7%A8%8B/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="vue" scheme="https://weienhua.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>单链表快速排序</title>
    <link href="https://weienhua.github.io/2023/07/18/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    <id>https://weienhua.github.io/2023/07/18/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</id>
    <published>2023-07-18T01:06:37.000Z</published>
    <updated>2023-07-18T02:11:19.831Z</updated>
    
    <content type="html"><![CDATA[<h3 id="单链表快速排序"><a href="#单链表快速排序" class="headerlink" title="单链表快速排序"></a>单链表快速排序</h3><p>题目来自acwing</p><h4 id="题目（点击跳转）"><a href="#题目（点击跳转）" class="headerlink" title="题目（点击跳转）"></a><a href="https://www.acwing.com/problem/content/1453/">题目（点击跳转）</a></h4><p>给定一个单链表，请使用快速排序算法对其排序。</p><p>要求：期望平均时间复杂度为 O(nlogn)，期望额外空间复杂度为 O(logn)。</p><p><strong>思考题：</strong> 如果只能改变链表结构，不能修改每个节点的val值该如何做呢？</p><span id="more"></span><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>链表中的所有数大小均在 int范围内，链表长度在 [0,10000]。<br>本题数据完全随机生成。</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[5, 3, 2]</span><br></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2, 3, 5]</span><br></pre></td></tr></table></figure><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p>单链表的快排比数组的快排要好一点，边界问题不用处理。</p><ul><li>进入排序算法，先判断链表是否有值，如果没有值或者只有一个值，直接<code>return</code>即可</li><li>申请三个链表头节点分别是<code>left, mid, right</code>，用来将链表进行排序，申请三个尾结点<code>ltail, mtail, rtail</code>，初始化为每个节点本身，创建一个<code>val</code>，即每次排序选择的一个标杆。</li><li>遍历单链表（这里循环结束之后要把链表尾部置空，让链表知道结束的位置）<ul><li>如果当前节点的值小于<code>val</code>就将节点连入left链表，即<code>ltail-&gt;next = p; ltail = p;</code>，这里尾结点next赋值之后要向后移动一位，即指向链表的尾部。</li><li>如果当前节点的值等于<code>val</code>就将节点连入mid链表，即<code>mtail-&gt;next = p; mtail = p;</code></li><li>如果当前节点的值大于<code>val</code>就将节点连入right链表，即<code>rtail-&gt;next = p; rtail = p;</code></li></ul></li><li>处理完之后可以得到三个链表，这是如果left和right两个链表有序之后，将三个链表连接一下就是最后的结果。<ul><li>递归处理left链表，left-&gt;next即链表的值</li><li>递归处理right链表，right-&gt;next即链表的值</li></ul></li><li>这里实现一个<code>get_tail()</code>方法，获取传入链表的尾结点。</li><li>最后将三个链表连接到一起即可。<ul><li>这里有一个细节是，mid链表可能没有值，所以连接完mid之后接着去找到left的尾结点去连接right链表。</li></ul></li></ul><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">get_tail</span><span class="params">(ListNode* head)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(head-&gt;next) head = head-&gt;next;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ListNode* <span class="title">quickSortList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head || !head-&gt;next) <span class="keyword">return</span> head;</span><br><span class="line">        <span class="keyword">auto</span> left = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>), mid = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>), right = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">auto</span> ltail = left, mtail = mid, rtail = right;</span><br><span class="line">        <span class="type">int</span> val = head-&gt;val;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> p = head; p; p = p-&gt;next) &#123;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;val &lt; val) &#123;ltail-&gt;next = p; ltail = p;&#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p-&gt;val == val) &#123;mtail-&gt;next = p; mtail = p;&#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;rtail-&gt;next = p; rtail = p;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ltail-&gt;next = mtail-&gt;next = rtail-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        left-&gt;next = <span class="built_in">quickSortList</span>(left-&gt;next);</span><br><span class="line">        right-&gt;next = <span class="built_in">quickSortList</span>(right-&gt;next);</span><br><span class="line">        <span class="built_in">get_tail</span>(left)-&gt;next = mid-&gt;next;</span><br><span class="line">        <span class="built_in">get_tail</span>(left)-&gt;next = right-&gt;next;</span><br><span class="line">        <span class="keyword">return</span> left-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;单链表快速排序&quot;&gt;&lt;a href=&quot;#单链表快速排序&quot; class=&quot;headerlink&quot; title=&quot;单链表快速排序&quot;&gt;&lt;/a&gt;单链表快速排序&lt;/h3&gt;&lt;p&gt;题目来自acwing&lt;/p&gt;
&lt;h4 id=&quot;题目（点击跳转）&quot;&gt;&lt;a href=&quot;#题目（点击跳转）&quot; class=&quot;headerlink&quot; title=&quot;题目（点击跳转）&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.acwing.com/problem/content/1453/&quot;&gt;题目（点击跳转）&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;给定一个单链表，请使用快速排序算法对其排序。&lt;/p&gt;
&lt;p&gt;要求：期望平均时间复杂度为 O(nlogn)，期望额外空间复杂度为 O(logn)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;思考题：&lt;/strong&gt; 如果只能改变链表结构，不能修改每个节点的val值该如何做呢？&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="https://weienhua.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="笔试" scheme="https://weienhua.github.io/categories/%E7%AE%97%E6%B3%95/%E7%AC%94%E8%AF%95/"/>
    
    
    <category term="c/c++" scheme="https://weienhua.github.io/tags/c-c/"/>
    
  </entry>
  
  <entry>
    <title>蛇形矩阵</title>
    <link href="https://weienhua.github.io/2023/07/18/%E8%9B%87%E5%BD%A2%E7%9F%A9%E9%98%B5/"/>
    <id>https://weienhua.github.io/2023/07/18/%E8%9B%87%E5%BD%A2%E7%9F%A9%E9%98%B5/</id>
    <published>2023-07-18T00:41:17.000Z</published>
    <updated>2023-07-18T02:11:09.187Z</updated>
    
    <content type="html"><![CDATA[<h3 id="蛇形矩阵"><a href="#蛇形矩阵" class="headerlink" title="蛇形矩阵"></a>蛇形矩阵</h3><p>题目来之acwing</p><h4 id="题目（点击跳转）"><a href="#题目（点击跳转）" class="headerlink" title="题目（点击跳转）"></a><a href="https://www.acwing.com/problem/content/758/">题目（点击跳转）</a></h4><p>输入两个整数 n 和 m，输出一个 n 行 m 列的矩阵，将数字1到 n×m 按照回字蛇形填充至矩阵中。</p><p>具体矩阵形式可参考样例。</p><span id="more"></span><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入共一行，包含两个整数 n 和 m。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出满足要求的矩阵。</p><p>矩阵占 n 行，每行包含 m 个空格隔开的整数。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n,m≤100</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 3</span><br></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 2 3</span><br><span class="line">8 9 4</span><br><span class="line">7 6 5</span><br></pre></td></tr></table></figure><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p>这个题目是一个模拟填数的题目，将数字从1开始依次按照回字规则填入n*m的矩阵中，解题的思路是模拟数字的方向，当一个方向走不通时按照顺时针旋转一下方向，这样就可以接着走了，填完之后将数组打印即可。</p><p>这边使用一个偏移量来控制方向（x轴的正方向是向下，y轴的正方形是向右）</p><ul><li>最开始肯定是从（0，0）开始y轴正方向走的，这时偏移量为<code>(0,1)</code></li><li>当向右走出界或者碰到已经填过的位置时，这时需要顺时针旋转方向，也就是向下即x轴的正方向走，这时偏移量为<code>(1,0)</code></li><li>当向下走出界或者碰到已经填过的位置时，这时需要顺时针旋转方向，也就是向左即y轴的负方向走，这时偏移量为<code>(0,-1)</code></li><li>当向左走出界或者碰到已经填过的位置时，这时需要顺时针旋转方向，也就是向上即x轴的负方向走，这时偏移量为<code>(-1,0)</code></li><li>当向上走出界或者碰到已经填过的位置时，这时需要顺时针旋转方向，也就是向右即y轴的正方向走，这是偏移量为<code>(0,1)</code></li></ul><p>可以发现，当方向旋转四次后，就会有一次循环，这是可以定义两个数组维护这个偏移量，即<code>dx和dy</code>。</p><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> res[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="comment">// 定义四个方向的偏移量，向右即为(dx[0],dy[0])</span></span><br><span class="line">    <span class="type">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;, dy[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>, k = <span class="number">1</span>, d = <span class="number">0</span>; k &lt;= n*m; k ++) &#123;</span><br><span class="line">        res[x][y] = k;</span><br><span class="line">        <span class="comment">// 计算下一个位置的坐标</span></span><br><span class="line">        <span class="type">int</span> a = x + dx[d], b = y + dy[d];</span><br><span class="line">        <span class="comment">// 判断下一个位置是否出界或者是否已经填值</span></span><br><span class="line">        <span class="keyword">if</span>(a&lt;<span class="number">0</span> || a&gt;=n || b&lt;<span class="number">0</span> || b&gt;=m || res[a][b])&#123;</span><br><span class="line"><span class="comment">// 如果已经出界，就将方向旋转，这里d+1就是将方向旋转</span></span><br><span class="line">            <span class="comment">// 对4取模是当最后一个方向时，加一就会超出数组下标，同时也为了实现循环数组</span></span><br><span class="line">            d = (d + <span class="number">1</span>) % <span class="number">4</span>;</span><br><span class="line">            a = x + dx[d], b = y + dy[d];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 最后将下一个位置赋值给x, y</span></span><br><span class="line">        x = a, y = b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 打印结果</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j ++ )&#123;</span><br><span class="line">            cout &lt;&lt; res[i][j] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;蛇形矩阵&quot;&gt;&lt;a href=&quot;#蛇形矩阵&quot; class=&quot;headerlink&quot; title=&quot;蛇形矩阵&quot;&gt;&lt;/a&gt;蛇形矩阵&lt;/h3&gt;&lt;p&gt;题目来之acwing&lt;/p&gt;
&lt;h4 id=&quot;题目（点击跳转）&quot;&gt;&lt;a href=&quot;#题目（点击跳转）&quot; class=&quot;headerlink&quot; title=&quot;题目（点击跳转）&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.acwing.com/problem/content/758/&quot;&gt;题目（点击跳转）&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;输入两个整数 n 和 m，输出一个 n 行 m 列的矩阵，将数字1到 n×m 按照回字蛇形填充至矩阵中。&lt;/p&gt;
&lt;p&gt;具体矩阵形式可参考样例。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="https://weienhua.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="笔试" scheme="https://weienhua.github.io/categories/%E7%AE%97%E6%B3%95/%E7%AC%94%E8%AF%95/"/>
    
    
    <category term="c/c++" scheme="https://weienhua.github.io/tags/c-c/"/>
    
  </entry>
  
  <entry>
    <title>harbor搭建镜像仓库</title>
    <link href="https://weienhua.github.io/2023/06/22/harbor%E6%90%AD%E5%BB%BA%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/"/>
    <id>https://weienhua.github.io/2023/06/22/harbor%E6%90%AD%E5%BB%BA%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/</id>
    <published>2023-06-22T07:38:09.000Z</published>
    <updated>2023-07-18T00:33:19.189Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2023/06/22/P4t29RwuJ3ZgcaU.png" alt="wallhaven-6k3oox_1920x1080"></p><h3 id="harbor搭建镜像仓库（v2-7-2-docker-v19-03-0-docker-composr-v2-17-2）"><a href="#harbor搭建镜像仓库（v2-7-2-docker-v19-03-0-docker-composr-v2-17-2）" class="headerlink" title="harbor搭建镜像仓库（v2.7.2+docker v19.03.0+docker-composr v2.17.2）"></a>harbor搭建镜像仓库（v2.7.2+docker v19.03.0+docker-composr v2.17.2）</h3><p>考虑到镜像下载可能因为网络问题出现下载失败和之后需要部署的项目镜像下载，这边通过服务器搭建一个harbor镜像储存仓库，之后可以通过push和pull命令对镜像进行上传和下载。</p><span id="more"></span><p>首先是创建虚拟机，这里参考k8s搭建的<a href="https://weienhua.github.io/2023/06/21/kubernetes%E5%AE%89%E8%A3%85%E5%92%8C%E8%B0%83%E8%AF%95%EF%BC%881-20-9-docker19-03-0-weave%EF%BC%89/">文章</a>，虚拟机的ip设置为：172.31.0.66。</p><h4 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h4><p>这里选择docker的版本为19.03.0，与k8s集群中的docker版本一致，因为之后是和集群一起使用的，这里的版本一致可以避免一些问题。</p><p>移除系统自带的docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br><span class="line">                  </span><br></pre></td></tr></table></figure><p>配置yum源，镜像用的是阿里云</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils</span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">--add-repo \</span><br><span class="line">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>安装指定版本的docker并启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y docker-ce-19.03.0 docker-ce-cli-19.03.0  containerd.io-1.4.6</span><br><span class="line">systemctl enable docker --now</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置加速</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker       # 创建文件夹</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [</span><br><span class="line">        &quot;https://dockerproxy.com&quot;,</span><br><span class="line">        &quot;https://hub-mirror.c.163.com&quot;,</span><br><span class="line">        &quot;https://mirror.baidubce.com&quot;,</span><br><span class="line">        &quot;https://ccr.ccs.tencentyun.com&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;insecure-registries&quot;: [&quot;172.31.0.66:8088&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>至此docker就安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><p>查看docker版本。</p><h4 id="docker-compose安装"><a href="#docker-compose安装" class="headerlink" title="docker-compose安装"></a>docker-compose安装</h4><p>因为网络问题，这里选择手动下载安装。</p><p>到官网上下载，导入centos中&#x2F;usr&#x2F;local&#x2F;bin<br><a href="https://github.com/docker/compose/releases">https://github.com/docker/compose/releases</a></p><p>之后给文件加上可执行权限即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加可执行权限</span></span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看版本</span></span><br><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure><h4 id="harbor安装"><a href="#harbor安装" class="headerlink" title="harbor安装"></a>harbor安装</h4><p>到官方发布页面下载harbor离线安装包。</p><p><a href="https://github.com/goharbor/harbor/releases">https://github.com/goharbor/harbor/releases</a></p><p><img src="https://s2.loli.net/2023/06/22/aGsUkYKVmqi5SLC.png" alt="image-20230622155858278"></p><p>下载完成之后上传到服务器，我这边上传的是用户目录（~），用命令解压文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -zxf harbor-offline-installer-v2.7.2.tgz</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入harbor路径下</span></span><br><span class="line">cd harbor</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/06/22/gsf2EJiT4XjBw31.png" alt="image-20230622160227581"></p><p>可以看到一些文件，复制<code>harbor.yml.tmpl</code>文件为<code>harbor.yml</code>，即创建一份配置文件。<code>install.sh</code>是安装文件，设置好配置文件之后直接运行就可以了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制并重命名一份新的配置文件</span></span><br><span class="line">cp harbor.yml.tmpl harbor.yml</span><br><span class="line">vim harbor.yml</span><br></pre></td></tr></table></figure><p>下面是需要修改的一些配置的解释</p><p><img src="https://img2022.cnblogs.com/blog/1736726/202207/1736726-20220709225854984-959413141.png" alt="img"></p><p><code>harbor.yml</code>示例模板（直接复制替换即可，需要修改hostname和端口号）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Configuration file of Harbor</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">The IP address or hostname to access admin UI and registry service.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">DO NOT use localhost or 127.0.0.1, because Harbor needs to be accessed by external clients.</span></span><br><span class="line">hostname: 172.31.0.66</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">http related config</span></span><br><span class="line">http:</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">port <span class="keyword">for</span> http, default is 80. If https enabled, this port will redirect to https port</span></span><br><span class="line">  port: 8088</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">不使用HTTPS</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https related config</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https:</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">https port <span class="keyword">for</span> harbor, default is 443</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">port: 443</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">The path of cert and key files <span class="keyword">for</span> nginx</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">certificate: /your/certificate/path</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">private_key: /your/private/key/path</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="comment"># Uncomment following will enable tls communication between all harbor components</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">internal_tls:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  <span class="comment"># set enabled to true means internal tls is enabled</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  enabled: <span class="literal">true</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  <span class="comment"># put your cert and key files on dir</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  <span class="built_in">dir</span>: /etc/harbor/tls/internal</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Uncomment external_url <span class="keyword">if</span> you want to <span class="built_in">enable</span> external proxy</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">And when it enabled the hostname will no longer used</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">external_url: https://reg.mydomain.com:8433</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">The initial password of Harbor admin</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">It only works <span class="keyword">in</span> first time to install harbor</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Remember Change the admin password from UI after launching Harbor.</span></span><br><span class="line">harbor_admin_password: admin</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Harbor DB configuration</span></span><br><span class="line">database:</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">The password <span class="keyword">for</span> the root user of Harbor DB. Change this before any production use.</span></span><br><span class="line">  password: 123456</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">The maximum number of connections <span class="keyword">in</span> the idle connection pool. If it &lt;=0, no idle connections are retained.</span></span><br><span class="line">  max_idle_conns: 100</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">The maximum number of open connections to the database. If it &lt;= 0, <span class="keyword">then</span> there is no <span class="built_in">limit</span> on the number of open connections.</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">Note: the default number of connections is 1024 <span class="keyword">for</span> postgres of harbor.</span></span><br><span class="line">  max_open_conns: 900</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">The default data volume</span></span><br><span class="line">data_volume: /mnt/harbor/data</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Harbor Storage settings by default is using /data <span class="built_in">dir</span> on <span class="built_in">local</span> filesystem</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Uncomment storage_service setting If you want to using external storage</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">storage_service:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  <span class="comment"># ca_bundle is the path to the custom root ca certificate, which will be injected into the truststore</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  <span class="comment"># of registry&#x27;s and chart repository&#x27;s containers.  This is usually needed when the user hosts a internal storage with self signed certificate.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  ca_bundle:</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  <span class="comment"># storage backend, default is filesystem, options include filesystem, azure, gcs, s3, swift and oss</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  <span class="comment"># for more info about this configuration please refer https://docs.docker.com/registry/configuration/</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  filesystem:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    maxthreads: 100</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  <span class="comment"># set disable to true when you want to disable registry redirect</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  redirect:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    disabled: <span class="literal">false</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Trivy configuration</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Trivy DB contains vulnerability information from NVD, Red Hat, and many other upstream vulnerability databases.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">It is downloaded by Trivy from the GitHub release page https://github.com/aquasecurity/trivy-db/releases and cached</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">in</span> the <span class="built_in">local</span> file system. In addition, the database contains the update timestamp so Trivy can detect whether it</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">should download a newer version from the Internet or use the cached one. Currently, the database is updated every</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">12 hours and published as a new release to GitHub.</span></span><br><span class="line">trivy:</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">ignoreUnfixed The flag to display only fixed vulnerabilities</span></span><br><span class="line">  ignore_unfixed: false</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">skipUpdate The flag to <span class="built_in">enable</span> or <span class="built_in">disable</span> Trivy DB downloads from GitHub</span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">  <span class="comment"># You might want to enable this flag in test or CI/CD environments to avoid GitHub rate limiting issues.</span></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">If the flag is enabled you have to download the `trivy-offline.tar.gz` archive manually, extract `trivy.db` and</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">`metadata.json` files and mount them <span class="keyword">in</span> the `/home/scanner/.cache/trivy/db` path.</span></span><br><span class="line">  skip_update: false</span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">  <span class="comment"># The offline_scan option prevents Trivy from sending API requests to identify dependencies.</span></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">Scanning JAR files and pom.xml may require Internet access <span class="keyword">for</span> better detection, but this option tries to avoid it.</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">For example, the offline mode will not try to resolve transitive dependencies <span class="keyword">in</span> pom.xml when the dependency doesn<span class="string">&#x27;t</span></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash"><span class="string">exist in the local repositories. It means a number of detected vulnerabilities might be fewer in offline mode.</span></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash"><span class="string">It would work if all the dependencies are in local.</span></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash"><span class="string">This option doesn’t affect DB download. You need to specify &quot;skip-update&quot; as well as &quot;offline-scan&quot; in an air-gapped environment.</span></span></span><br><span class="line">  offline_scan: false</span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash">  # insecure The flag to skip verifying registry certificate</span></span></span><br><span class="line">  insecure: false</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash"><span class="string">github_token The GitHub access token to download Trivy DB</span></span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash">  # Anonymous downloads from GitHub are subject to the limit of 60 requests per hour. Normally such rate limit is enough</span></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash"><span class="string">for production operations. If, for any reason, it&#x27;</span>s not enough, you could increase the rate <span class="built_in">limit</span> to 5000</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">requests per hour by specifying the GitHub access token. For more details on GitHub rate limiting please consult</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">https://developer.github.com/v3/<span class="comment">#rate-limiting</span></span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">  <span class="comment"># You can create a GitHub token by following the instructions in</span></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line</span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">  <span class="comment"># github_token: xxx</span></span></span><br><span class="line"></span><br><span class="line">jobservice:</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">Maximum number of job workers <span class="keyword">in</span> job service</span></span><br><span class="line">  max_job_workers: 10</span><br><span class="line"></span><br><span class="line">notification:</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">Maximum retry count <span class="keyword">for</span> webhook job</span></span><br><span class="line">  webhook_job_max_retry: 10</span><br><span class="line"></span><br><span class="line">chart:</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">Change the value of absolute_url to enabled can <span class="built_in">enable</span> absolute url <span class="keyword">in</span> chart</span></span><br><span class="line">  absolute_url: disabled</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Log configurations</span></span><br><span class="line">log:</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">options are debug, info, warning, error, fatal</span></span><br><span class="line">  level: info</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">configs <span class="keyword">for</span> logs <span class="keyword">in</span> <span class="built_in">local</span> storage</span></span><br><span class="line">  local:</span><br><span class="line">    # Log files are rotated log_rotate_count times before being removed. If count is 0, old versions are removed rather than rotated.</span><br><span class="line">    rotate_count: 50</span><br><span class="line">    # Log files are rotated only if they grow bigger than log_rotate_size bytes. If size is followed by k, the size is assumed to be in kilobytes.</span><br><span class="line">    # If the M is used, the size is in megabytes, and if G is used, the size is in gigabytes. So size 100, size 100k, size 100M and size 100G</span><br><span class="line">    # are all valid.</span><br><span class="line">    rotate_size: 200M</span><br><span class="line">    # The directory on your host that store log</span><br><span class="line">    location: /var/log/harbor</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">Uncomment following lines to <span class="built_in">enable</span> external syslog endpoint.</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">external_endpoint:</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">  <span class="comment"># protocol used to transmit log to external endpoint, options is tcp or udp</span></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">  protocol: tcp</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">  <span class="comment"># The host of external endpoint</span></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">  host: localhost</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">  <span class="comment"># Port of external endpoint</span></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">  port: 5140</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">This attribute is <span class="keyword">for</span> migrator to detect the version of the .cfg file, DO NOT MODIFY!</span></span><br><span class="line">_version: 2.5.0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Uncomment external_database <span class="keyword">if</span> using external database.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">external_database:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  harbor:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    host: harbor_db_host</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    port: harbor_db_port</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    db_name: harbor_db_name</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    username: harbor_db_username</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    password: harbor_db_password</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    ssl_mode: <span class="built_in">disable</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    max_idle_conns: 2</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    max_open_conns: 0</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  notary_signer:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    host: notary_signer_db_host</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    port: notary_signer_db_port</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    db_name: notary_signer_db_name</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    username: notary_signer_db_username</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    password: notary_signer_db_password</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    ssl_mode: <span class="built_in">disable</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  notary_server:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    host: notary_server_db_host</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    port: notary_server_db_port</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    db_name: notary_server_db_name</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    username: notary_server_db_username</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    password: notary_server_db_password</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    ssl_mode: <span class="built_in">disable</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Uncomment external_redis <span class="keyword">if</span> using external Redis server</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">external_redis:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  <span class="comment"># support redis, redis+sentinel</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  <span class="comment"># host for redis: &lt;host_redis&gt;:&lt;port_redis&gt;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  <span class="comment"># host for redis+sentinel:</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  <span class="comment">#  &lt;host_sentinel1&gt;:&lt;port_sentinel1&gt;,&lt;host_sentinel2&gt;:&lt;port_sentinel2&gt;,&lt;host_sentinel3&gt;:&lt;port_sentinel3&gt;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  host: redis:6379</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  password:</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  <span class="comment"># sentinel_master_set must be set to support redis+sentinel</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  <span class="comment">#sentinel_master_set:</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  <span class="comment"># db_index 0 is for core, it&#x27;s unchangeable</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  registry_db_index: 1</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  jobservice_db_index: 2</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  chartmuseum_db_index: 3</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  trivy_db_index: 5</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  idle_timeout_seconds: 30</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Uncomment uaa <span class="keyword">for</span> trusting the certificate of uaa instance that is hosted via self-signed cert.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">uaa:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  ca_file: /path/to/ca</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Global proxy</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Config http proxy <span class="keyword">for</span> components, e.g. http://my.proxy.com:3128</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Components doesn<span class="string">&#x27;t need to connect to each others via http proxy.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Remove component from `components` array if want disable proxy</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">for it. If you want use proxy for replication, MUST enable proxy</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">for core and jobservice, and set `http_proxy` and `https_proxy`.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Add domain to the `no_proxy` field, when you want disable proxy</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">for some special registry.</span></span></span><br><span class="line">proxy:</span><br><span class="line">  http_proxy:</span><br><span class="line">  https_proxy:</span><br><span class="line">  no_proxy:</span><br><span class="line">  components:</span><br><span class="line">    - core</span><br><span class="line">    - jobservice</span><br><span class="line">    - trivy</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">metric:</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  enabled: false</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  port: 9090</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  path: /metrics</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Trace related config</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">only can enable one trace provider(jaeger or otel) at the same time,</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">and when using jaeger as provider, can only enable it with agent mode or collector mode.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">if using jaeger collector mode, uncomment endpoint and uncomment username, password if needed</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">if using jaeger agetn mode uncomment agent_host and agent_port</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">trace:</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  enabled: true</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  # set sample_rate to 1 if you wanna sampling 100% of trace data; set 0.5 if you wanna sampling 50% of trace data, and so forth</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  sample_rate: 1</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  # # namespace used to differenciate different harbor services</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  # namespace:</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  # # attributes is a key value dict contains user defined attributes used to initialize trace provider</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  # attributes:</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  #   application: harbor</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  # # jaeger should be 1.26 or newer.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  # jaeger:</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  #   endpoint: http://hostname:14268/api/traces</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  #   username:</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  #   password:</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  #   agent_host: hostname</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  #   # export trace data by jaeger.thrift in compact mode</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  #   agent_port: 6831</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  # otel:</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  #   endpoint: hostname:4318</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  #   url_path: /v1/traces</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  #   compression: false</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  #   insecure: true</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  #   timeout: 10s</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">enable purge _upload directories</span></span></span><br><span class="line">upload_purging:</span><br><span class="line">  enabled: true</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash"><span class="string">remove files in _upload directories which exist for a period of time, default is one week.</span></span></span><br><span class="line">  age: 168h</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash"><span class="string">the interval of the purge operations</span></span></span><br><span class="line">  interval: 24h</span><br><span class="line">  dryrun: false</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改完成之后运行安装文件即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装</span></span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure><p>当看见successfully时表示安装完成</p><p>之后就可以通过yml文件中的ip和端口号访问了</p><p><img src="https://s2.loli.net/2023/06/22/mgvtI3AWNx4dnbh.png" alt="image-20230622165945928"></p><h4 id="配置docker通过harbor下载"><a href="#配置docker通过harbor下载" class="headerlink" title="配置docker通过harbor下载"></a>配置docker通过harbor下载</h4><p>找到docker 的 <code>daemon.json</code> 配置文件，CentOS 7 的路径：<code>/etc/docker/daemon.json</code>，如果路径下没有这个文件自己<strong>创建</strong>即可。然后再配置文件里加上：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker       # 创建文件夹</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [</span><br><span class="line">        &quot;https://dockerproxy.com&quot;,</span><br><span class="line">        &quot;https://hub-mirror.c.163.com&quot;,</span><br><span class="line">        &quot;https://mirror.baidubce.com&quot;,</span><br><span class="line">        &quot;https://ccr.ccs.tencentyun.com&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;insecure-registries&quot;: [&quot;172.31.0.66:8088&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p>在命令行窗口用docker登录harbor</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">登录harbor</span><br><span class="line">docker login -u admin -p admin 172.3.0.66:8088</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>harbor的启动和停止</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//切换到harbor安装包目录</span><br><span class="line">docker-compose stop   //停止Harbor</span><br><span class="line">docker-compose start  //启动Harbor</span><br><span class="line">重启服务器后会启动失败，下面是启动harbor的命令</span><br><span class="line">1、进入harbor路径</span><br><span class="line">cd harbor</span><br><span class="line">2、启动</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><p><a href="https://www.cnblogs.com/young-q/p/16462210.html">第一篇</a></p><p><a href="https://blog.csdn.net/Liu__sir__/article/details/130360950">第二篇</a></p><h4 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h4><p><a href="https://www.aliyundrive.com/s/ikAqQb5KjbC">docker-compose</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2023/06/22/P4t29RwuJ3ZgcaU.png&quot; alt=&quot;wallhaven-6k3oox_1920x1080&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;harbor搭建镜像仓库（v2-7-2-docker-v19-03-0-docker-composr-v2-17-2）&quot;&gt;&lt;a href=&quot;#harbor搭建镜像仓库（v2-7-2-docker-v19-03-0-docker-composr-v2-17-2）&quot; class=&quot;headerlink&quot; title=&quot;harbor搭建镜像仓库（v2.7.2+docker v19.03.0+docker-composr v2.17.2）&quot;&gt;&lt;/a&gt;harbor搭建镜像仓库（v2.7.2+docker v19.03.0+docker-composr v2.17.2）&lt;/h3&gt;&lt;p&gt;考虑到镜像下载可能因为网络问题出现下载失败和之后需要部署的项目镜像下载，这边通过服务器搭建一个harbor镜像储存仓库，之后可以通过push和pull命令对镜像进行上传和下载。&lt;/p&gt;</summary>
    
    
    
    <category term="工程" scheme="https://weienhua.github.io/categories/%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="镜像仓库" scheme="https://weienhua.github.io/categories/%E5%B7%A5%E7%A8%8B/%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/"/>
    
    
    <category term="CentOS7" scheme="https://weienhua.github.io/tags/CentOS7/"/>
    
    <category term="harbor" scheme="https://weienhua.github.io/tags/harbor/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes安装和调试（1.20.9+docker19.03.0+weave）</title>
    <link href="https://weienhua.github.io/2023/06/21/kubernetes%E5%AE%89%E8%A3%85%E5%92%8C%E8%B0%83%E8%AF%95%EF%BC%881-20-9-docker19-03-0-weave%EF%BC%89/"/>
    <id>https://weienhua.github.io/2023/06/21/kubernetes%E5%AE%89%E8%A3%85%E5%92%8C%E8%B0%83%E8%AF%95%EF%BC%881-20-9-docker19-03-0-weave%EF%BC%89/</id>
    <published>2023-06-21T01:28:52.000Z</published>
    <updated>2023-06-27T10:49:16.762Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2023/06/21/9nOytEYu8XBaLd2.jpg" alt="好年 新年 孔明灯 女孩 4k动漫壁纸_彼岸图网"></p><h3 id="kubernetes安装和调试（1-20-9-docker19-03-0-weave）"><a href="#kubernetes安装和调试（1-20-9-docker19-03-0-weave）" class="headerlink" title="kubernetes安装和调试（1.20.9+docker19.03.0+weave）"></a>kubernetes安装和调试（1.20.9+docker19.03.0+weave）</h3><p>学习kubernetes来对项目进行容器化部署。这里使用了VMware创建虚拟机来搭建k8s集群。</p><p>VMware:16.1.2，CentOS7，docker:19.03.0，kubeadm:1.20.9，kubectl:1.20.9，kubelet:1.20.9，weave。</p><span id="more"></span><h4 id="CentOS安装"><a href="#CentOS安装" class="headerlink" title="CentOS安装"></a>CentOS安装</h4><h5 id="镜像下载"><a href="#镜像下载" class="headerlink" title="镜像下载"></a>镜像下载</h5><ul><li>CentOS7下载地址：<a href="http://mirrors.aliyun.com/centos/7.9.2009/isos/x86_64/">CentOS 7.9</a></li></ul><p><img src="https://s2.loli.net/2023/06/21/WE7gHS3LfoNZrz8.png" alt="image-20230621094637921"></p><h5 id="虚拟机创建"><a href="#虚拟机创建" class="headerlink" title="虚拟机创建"></a>虚拟机创建</h5><p>下载完成之后打开虚拟机进行安装即可。</p><p><img src="https://s2.loli.net/2023/06/21/pOLhH23vQmkFRTB.png" alt="image-20230621094846813"></p><p><img src="https://s2.loli.net/2023/06/21/7NMVygB3nvlsAQE.png" alt="image-20230621094921378"></p><p><img src="https://s2.loli.net/2023/06/21/yKounIj8Qg6MkNd.png" alt="image-20230621094946819"></p><p><img src="https://s2.loli.net/2023/06/21/RLKoa5qV9tlWGDx.png" alt="image-20230621095009505"></p><p><img src="https://s2.loli.net/2023/06/21/JfV75zDa2oIQ9NH.png" alt="image-20230621095031008"></p><p><img src="https://s2.loli.net/2023/06/21/e9CVHUtm4DWIYul.png" alt="image-20230621095128572"></p><p><img src="https://s2.loli.net/2023/06/21/X9mIaK6GbQnh1J2.png" alt="image-20230621095227845"></p><p><img src="https://s2.loli.net/2023/06/21/EUzC2n6gSifTD5A.png" alt="image-20230621095249962"></p><p><img src="https://s2.loli.net/2023/06/21/Mmzo763YrCcswpi.png" alt="image-20230621095315555"></p><p><img src="https://s2.loli.net/2023/06/21/mr4XVKzNhuAUJbl.png" alt="image-20230621095334696"></p><p><img src="https://s2.loli.net/2023/06/21/5ioftLAaVSlnjJZ.png" alt="image-20230621095350888"></p><p><img src="https://s2.loli.net/2023/06/21/zef32N1JLMWb9Ew.png" alt="image-20230621095407927"></p><p><img src="https://s2.loli.net/2023/06/21/zTSh96sGRDXmLlF.png" alt="image-20230621095420022"></p><p><img src="https://s2.loli.net/2023/06/21/uvwHO9Btce5iIqd.png" alt="image-20230621095432344"></p><p><img src="https://s2.loli.net/2023/06/21/WXSVL41aNIxAqn3.png" alt="image-20230621095446745"></p><p><img src="https://s2.loli.net/2023/06/21/dbVGxKg8mDR4Wn7.png" alt="image-20230621095530687"></p><p><img src="https://s2.loli.net/2023/06/21/eaHF9P6nSd7mUYI.png" alt="image-20230621095541376"></p><p>到这儿就已经把虚拟机创建完成了，但是还需要配置网络和进行安装。</p><h5 id="VMware网络配置"><a href="#VMware网络配置" class="headerlink" title="VMware网络配置"></a>VMware网络配置</h5><p>我的设置：</p><ul><li>master节点IP： 172.31.0.3</li><li>node01节点IP：172.31.0.4</li><li>node02节点IP：172.31.0.5</li><li>子网掩码：255.255.0.0</li><li>网关：172.31.0.2</li><li>DNS:114.114.114.114</li></ul><p>首先是在VMware中设置。</p><p>主页—&gt;编辑—&gt;虚拟网络编辑器</p><p><img src="https://s2.loli.net/2023/06/21/cgZTbx1aVWXYHit.png" alt="image-20230621100402357"></p><p><img src="https://s2.loli.net/2023/06/21/EMZ3G9iYXeV8jk2.png" alt="image-20230621100454415"></p><p>需要设置为静态的ip，所以在这儿取消勾选DHCP服务。</p><p><img src="https://s2.loli.net/2023/06/21/RcZEAKkOedtbr48.png" alt="image-20230621100701320"></p><p>至此就设置完VMware了。</p><h5 id="CentOS镜像安装"><a href="#CentOS镜像安装" class="headerlink" title="CentOS镜像安装"></a>CentOS镜像安装</h5><p><img src="https://s2.loli.net/2023/06/21/KuPgdr3lhwsnIFk.png" alt="image-20230621100846635"></p><p><img src="https://s2.loli.net/2023/06/21/QajkG7IuZMLY9eK.png" alt="image-20230621100923402"></p><p><img src="https://s2.loli.net/2023/06/21/AbeilJfWKaukFzm.png" alt="image-20230621101224940"></p><p><img src="https://s2.loli.net/2023/06/21/oiP851ZqwrU6nHM.png" alt="image-20230621101342608"></p><p><img src="https://s2.loli.net/2023/06/21/MYzHWIFio1qDg5s.png" alt="image-20230621101320589"></p><p><img src="https://s2.loli.net/2023/06/21/eKf2zMUbAcawCSu.png" alt="image-20230621101408307"></p><p><img src="https://s2.loli.net/2023/06/21/PHfXIcakSFuVT4w.png" alt="image-20230621101459131"></p><p><img src="https://s2.loli.net/2023/06/21/9XdDLvaujfW3bpr.png" alt="image-20230621101557774"></p><p><img src="https://s2.loli.net/2023/06/21/MA1dHDeViwxvjQ6.png" alt="image-20230621101706341"></p><p><img src="https://s2.loli.net/2023/06/21/xSBWPyeUnYoDjKN.png" alt="image-20230621101731384"></p><p><img src="https://s2.loli.net/2023/06/21/TrOXxcEPD2qg9kZ.png" alt="image-20230621101826851"></p><p><img src="https://s2.loli.net/2023/06/21/vdDhMBZpQekt2m8.png" alt="image-20230621101805221"></p><p>等待安装完成重启即可。</p><p>启动之后可以通过命令查看一下虚拟机的ip是否设置正确。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/06/21/Y5LQtxTWdHmPa9l.png" alt="image-20230621102211920"></p><p>测试一下网络通不通</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/06/21/m1h7Y68zrugFHcb.png" alt="image-20230621102320183"></p><p>可以看到已经ping通了，所以网络没问题，搭建k8s集群需要有master节点和node节点，这次创建了一个master节点，两个node节点。上述演示了创建master节点的过程，node节点的创建同上，记得把ip修改一下。</p><h4 id="kuberbetes安装"><a href="#kuberbetes安装" class="headerlink" title="kuberbetes安装"></a>kuberbetes安装</h4><h5 id="简单的设置"><a href="#简单的设置" class="headerlink" title="简单的设置"></a>简单的设置</h5><p>安装所需工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y install vim</span><br><span class="line">sudo yum -y install wget</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>安装并配置 ntpdate，同步时间</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y install ntpdate</span><br><span class="line">sudo ntpdate ntp1.aliyun.com</span><br><span class="line">sudo systemctl status ntpdate</span><br><span class="line">sudo systemctl start ntpdate</span><br><span class="line">sudo systemctl status ntpdate</span><br><span class="line">sudo systemctl enable ntpdate</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将主机名加入hosts文件中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/hosts</span><br></pre></td></tr></table></figure><p>在文件最后加入下面的配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">172.31.0.3  master</span><br><span class="line">172.31.0.4  node01</span><br><span class="line">172.31.0.5  node02</span><br></pre></td></tr></table></figure><p>设置安装的基础环境，比如需要关闭防火墙，关闭交换空间，关闭selinux等</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 SELinux 设置为 permissive 模式（相当于将其禁用）</span></span><br><span class="line">sudo setenforce 0</span><br><span class="line">sudo sed -i &#x27;s/^SELINUX=enforcing$/SELINUX=permissive/&#x27; /etc/selinux/config</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">关闭swap</span></span><br><span class="line">swapoff -a  </span><br><span class="line">sed -ri &#x27;s/.*swap.*/#&amp;/&#x27; /etc/fstab</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">允许 iptables 检查桥接流量</span></span><br><span class="line">cat &lt;&lt;EOF | sudo tee /etc/modules-load.d/k8s.conf</span><br><span class="line">br_netfilter</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF | sudo tee /etc/sysctl.d/k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br><span class="line">sudo sysctl --system</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>关闭防火墙，或者开通指定端口（这个可以参考这篇☞<a href="https://www.yuque.com/xuxiaowei-com-cn/gitlab-k8s/k8s-install">文章</a>）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop firewalld.service </span><br><span class="line">sudo systemctl disable firewalld.service</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>或者用下面命令打开指定端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">控制面板</span></span><br><span class="line">firewall-cmd --zone=public --add-port=6443/tcp --permanent # Kubernetes API server所有</span><br><span class="line">firewall-cmd --zone=public --add-port=2379/tcp --permanent # etcd server client APIkube-apiserver, etcd</span><br><span class="line">firewall-cmd --zone=public --add-port=2380/tcp --permanent # etcd server client APIkube-apiserver, etcd</span><br><span class="line">firewall-cmd --zone=public --add-port=10250/tcp --permanent # Kubelet API自身, 控制面</span><br><span class="line">firewall-cmd --zone=public --add-port=10259/tcp --permanent # kube-scheduler自身</span><br><span class="line">firewall-cmd --zone=public --add-port=10257/tcp --permanent # kube-controller-manager自身</span><br><span class="line">firewall-cmd --zone=trusted --add-source=172.31.0.3 --permanent # 信任集群中各个节点的IP</span><br><span class="line">firewall-cmd --zone=trusted --add-source=172.31.0.4 --permanent # 信任集群中各个节点的IP</span><br><span class="line">firewall-cmd --zone=trusted --add-source=172.31.0.5 --permanent # 信任集群中各个节点的IP</span><br><span class="line">firewall-cmd --add-masquerade --permanent # 端口转发</span><br><span class="line">firewall-cmd --reload</span><br><span class="line">firewall-cmd --list-all</span><br><span class="line">firewall-cmd --list-all --zone=trusted</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">工作节点</span></span><br><span class="line">firewall-cmd --zone=public --add-port=10250/tcp --permanent # Kubelet API自身, 控制面</span><br><span class="line">firewall-cmd --zone=public --add-port=30000-32767/tcp --permanent # NodePort Services†所有</span><br><span class="line">firewall-cmd --zone=trusted --add-source=172.31.0.3 --permanent # 信任集群中各个节点的IP</span><br><span class="line">firewall-cmd --zone=trusted --add-source=172.31.0.4 --permanent # 信任集群中各个节点的IP</span><br><span class="line">firewall-cmd --zone=trusted --add-source=172.31.0.5 --permanent # 信任集群中各个节点的IP</span><br><span class="line">firewall-cmd --add-masquerade --permanent # 端口转发</span><br><span class="line">firewall-cmd --reload</span><br><span class="line">firewall-cmd --list-all</span><br><span class="line">firewall-cmd --list-all --zone=trusted</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h5><p>移除系统自带的docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br><span class="line">                  </span><br></pre></td></tr></table></figure><p>配置yum源，镜像用的是阿里云</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils</span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">--add-repo \</span><br><span class="line">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>安装指定版本的docker并启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y docker-ce-19.03.0 docker-ce-cli-19.03.0  containerd.io-1.4.6</span><br><span class="line">systemctl enable docker --now</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置加速</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker       # 创建文件夹</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [</span><br><span class="line">        &quot;https://dockerproxy.com&quot;,</span><br><span class="line">        &quot;https://hub-mirror.c.163.com&quot;,</span><br><span class="line">        &quot;https://mirror.baidubce.com&quot;,</span><br><span class="line">        &quot;https://ccr.ccs.tencentyun.com&quot;,</span><br><span class="line">        &quot;https://zv1b39f5.mirror.aliyuncs.com&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;insecure-registries&quot;: [&quot;172.31.0.66:8088&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>至此docker就安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><p>查看docker版本。</p><h5 id="kubeadm安装"><a href="#kubeadm安装" class="headerlink" title="kubeadm安装"></a>kubeadm安装</h5><p>安装kubelet、kubeadm、kubectl</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置k8s 下载的地址</span></span><br><span class="line">cat &lt;&lt;EOF | sudo tee /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span><br><span class="line">   http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">exclude=kubelet kubeadm kubectl</span><br><span class="line">EOF</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装3大件</span></span><br><span class="line">sudo yum install -y kubelet-1.20.9 kubeadm-1.20.9 kubectl-1.20.9 --disableexcludes=kubernetes</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动kubelet</span></span><br><span class="line">sudo systemctl enable --now kubelet</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="构建集群"><a href="#构建集群" class="headerlink" title="构建集群"></a>构建集群</h5><p>下载镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将所需镜像加入txt文件中</span></span><br><span class="line">kubeadm config images list | grep &#x27;^k8s.gcr&#x27; &gt;imglist.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">由于镜像是国外网站，创建shell脚本将镜像下载并用tag命名为原名称</span></span><br><span class="line">vi pull.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">for image in $(cat imglist.txt)</span><br><span class="line">do</span><br><span class="line">imagename=$(echo $image | awk -F &#x27;/&#x27; &#x27;&#123;print$NF&#125;&#x27;)</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/$imagename</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/$imagename $image</span><br><span class="line">done</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行脚本下载镜像</span></span><br><span class="line">bash pull.sh</span><br></pre></td></tr></table></figure><p>主节点初始化，只需要在master节点运行即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init \</span><br><span class="line">--apiserver-advertise-address=172.31.0.3 \</span><br><span class="line">--control-plane-endpoint=master \</span><br><span class="line">--image-repository registry.cn-hangzhou.aliyuncs.com/lfy_k8s_images \</span><br><span class="line">--kubernetes-version v1.20.9 \</span><br><span class="line">--service-cidr=10.96.0.0/16 \</span><br><span class="line">--pod-network-cidr=192.168.0.0/16</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以下是各个命令的备注不需要执行</span></span><br><span class="line">kubeadm init \</span><br><span class="line">--apiserver-advertise-address=172.31.0.3 \   # master 节点ip</span><br><span class="line">--control-plane-endpoint=master \  # 域名值</span><br><span class="line">--image-repository registry.cn-hangzhou.aliyuncs.com/lfy_k8s_images \   # 镜像仓库</span><br><span class="line">--kubernetes-version v1.20.9 \  # k8s 版本 </span><br><span class="line">--service-cidr=10.96.0.0/16 \     # 网络范围  一般不用改   网络范围不重叠</span><br><span class="line">--pod-network-cidr=192.168.0.0/16   # k8s 给pod分配网络ip的范围   一般不用改</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">所有网络范围不重叠</span></span><br></pre></td></tr></table></figure><p>出现下面的结果即为成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">我自己的运行结果</span></span><br><span class="line"></span><br><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">组建集群 需要执行以下命令</span></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">  mkdir -p $HOME/.kube</span><br><span class="line">  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">  sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class="line"></span><br><span class="line">Alternatively, if you are the root user, you can run:</span><br><span class="line"></span><br><span class="line">  export KUBECONFIG=/etc/kubernetes/admin.conf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">部署pod网络插件    连接k8s所有网络</span></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"></span><br><span class="line">You can now join any number of control-plane nodes by copying certificate authorities</span><br><span class="line">and service account keys on each node and then running the following as root:</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">加入master节点</span></span><br><span class="line">  kubeadm join cluster-endpoint:6443 --token uu0mpy.fdsjy3wojwwpatyj \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:3d0c32c41667faf5424f6a3506e330bdaa57edda63c3d0f09bb4346c0b7c5b4f \</span><br><span class="line">    --control-plane </span><br><span class="line"></span><br><span class="line">Then you can join any number of worker nodes by running the following on each as root:</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">加入工作node节点</span></span><br><span class="line">kubeadm join cluster-endpoint:6443 --token uu0mpy.fdsjy3wojwwpatyj \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:3d0c32c41667faf5424f6a3506e330bdaa57edda63c3d0f09bb4346c0b7c5b4f</span><br></pre></td></tr></table></figure><h5 id="设置-kube-x2F-config"><a href="#设置-kube-x2F-config" class="headerlink" title="设置.kube&#x2F;config"></a>设置.kube&#x2F;config</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p $HOME/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用下面命令可以查看所有pod状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod --all-namespaces -o wide</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由于网络插件还没安装会有两个pod一直在pending</p><h5 id="安装网络插件（weave）"><a href="#安装网络插件（weave）" class="headerlink" title="安装网络插件（weave）"></a>安装网络插件（weave）</h5><p><a href="https://kubernetes.io/zh-cn/docs/tasks/administer-cluster/network-policy-provider/weave-network-policy/">kubernetes文档</a></p><p><a href="https://www.weave.works/docs/net/latest/kubernetes/kube-addon/">weave官网安装</a></p><p><a href="https://docs.daocloud.io/community/mirror/">公开镜像加速站</a></p><p>去官网下载weave的yaml文件，查看yaml文件中用到的镜像，由于是通过国外的仓库下载镜像总是因为网络出现下载失败的问题，这里通过用公开的国内镜像加速源来下载，再通过tag修改为国外镜像源下载的名称。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://github.com/weaveworks/weave/releases/download/v2.8.1/weave-daemonset-k8s.yaml</span><br><span class="line"> </span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker pull docker.m.daocloud.io/weaveworks/weave-kube</span><br><span class="line">docker pull docker.m.daocloud.io/weaveworks/weave-npc</span><br><span class="line">docker tag docker.m.daocloud.io/weaveworks/weave-kube weaveworks/weave-kube</span><br><span class="line">docker tag docker.m.daocloud.io/weaveworks/weave-npc weaveworks/weave-npc</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>镜像下载完成，通过下面命令查看所有的pod，可以看到有两个weave正在初始化，等初始化完成之后之前两个pending中的pod也会创建。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod --all-namespaces -o wide</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>至此，集群就构建完成。</p><h4 id="测试集群（创建nginx服务）"><a href="#测试集群（创建nginx服务）" class="headerlink" title="测试集群（创建nginx服务）"></a>测试集群（创建nginx服务）</h4><p>现在创建nginx服务来测试k8s集群搭建是否成功。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">带 命名空间、Service 的完整版参见：https://jihulab.com/xuxiaowei-cloud/xuxiaowei-cloud/-/blob/main/docs/deployment/nginx-deployment.yaml</span></span><br><span class="line">cat &gt; nginx.yaml &lt;&lt; EOF</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-deployment</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx</span><br><span class="line">spec:</span><br><span class="line">  replicas: 2</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx:1.23.2</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line"></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat nginx.yaml</span><br><span class="line"></span><br><span class="line">kubectl apply -f nginx.yaml</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl edit deployment nginx-deployment</span></span><br></pre></td></tr></table></figure><p>启动成功之后查看是否正常创建pod</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods --all-namespaces -o wide</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/06/25/wckuIPq7Y8pBy6Z.png" alt="image-20230625105531044"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">控制面板：查看pod,svc</span></span><br><span class="line">kubectl get pod,svc -o wide</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/06/25/d7ZPq6V43HUQjtA.png" alt="image-20230625105558811"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">控制面板：设置服务（将多个 nginx-deployment 的 pod 绑定在一起，通过一个 Service 端口统一对外提供）</span></span><br><span class="line">kubectl expose deployment nginx-deployment --type=NodePort --name=nginx-service</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">控制面板：查看pod,svc</span></span><br><span class="line">kubectl get pod,svc -o wide</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/06/25/mu2Ejo6L3MDwiaV.png" alt="image-20230625105728494"></p><p>可以看到节点服务已经启动，下面使用节点ip+端口号就可以访问到服务。</p><p><img src="https://s2.loli.net/2023/06/25/7IkopnUrJc9EQG2.png" alt="image-20230625105944175"></p><h4 id="集群重置"><a href="#集群重置" class="headerlink" title="集群重置"></a>集群重置</h4><p>使用命令将k8s的设置恢复初始化，恢复初始化之后得把<code>$HOME/.kube</code>这个路径删除，不然再次init时会报错。</p><p>因为上面在init之后会执行一段命令初始化<code>$HOME/.kube</code>这个文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kubeadm reset</span><br><span class="line"></span><br><span class="line">sysctl -w net.ipv4.ip_forward=1</span><br><span class="line"></span><br><span class="line">rm -rf $HOME/.kube</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>初始化之后就可以再次用init命令对集群进行初始化，参考上面初始化过程即可。</p><h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><p><a href="https://blog.csdn.net/qq_41860461/article/details/122418639">第一篇</a></p><p><a href="https://www.bilibili.com/video/BV1zY41167aa/?spm_id_from=333.337.search-card.all.click&vd_source=8ff64866475475a356d9c225910f163e">博主的视频</a>和<a href="https://www.yuque.com/xuxiaowei-com-cn/gitlab-k8s/k8s-install">文章</a></p><p><a href="https://blog.csdn.net/woay2008/article/details/93250137">k8s初始化参考</a></p><p><a href="https://blog.csdn.net/energylocked/article/details/127347007">报错参考1</a>，<a href="https://blog.csdn.net/qq_39346534/article/details/107629830">报错参考2</a></p><p><a href="https://docs.daocloud.io/community/mirror/">镜像加速站</a></p><h4 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h4><p>weave的yaml文件（阿里云盘）：<a href="https://www.aliyundrive.com/s/nHH4gT99eze">点击下载</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2023/06/21/9nOytEYu8XBaLd2.jpg&quot; alt=&quot;好年 新年 孔明灯 女孩 4k动漫壁纸_彼岸图网&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;kubernetes安装和调试（1-20-9-docker19-03-0-weave）&quot;&gt;&lt;a href=&quot;#kubernetes安装和调试（1-20-9-docker19-03-0-weave）&quot; class=&quot;headerlink&quot; title=&quot;kubernetes安装和调试（1.20.9+docker19.03.0+weave）&quot;&gt;&lt;/a&gt;kubernetes安装和调试（1.20.9+docker19.03.0+weave）&lt;/h3&gt;&lt;p&gt;学习kubernetes来对项目进行容器化部署。这里使用了VMware创建虚拟机来搭建k8s集群。&lt;/p&gt;
&lt;p&gt;VMware:16.1.2，CentOS7，docker:19.03.0，kubeadm:1.20.9，kubectl:1.20.9，kubelet:1.20.9，weave。&lt;/p&gt;</summary>
    
    
    
    <category term="工程" scheme="https://weienhua.github.io/categories/%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="容器部署" scheme="https://weienhua.github.io/categories/%E5%B7%A5%E7%A8%8B/%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2/"/>
    
    
    <category term="CentOS7" scheme="https://weienhua.github.io/tags/CentOS7/"/>
    
    <category term="docker" scheme="https://weienhua.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>重装系统之后的django项目配置（wsl）</title>
    <link href="https://weienhua.github.io/2023/04/03/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E4%B9%8B%E5%90%8E%E7%9A%84django%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%EF%BC%88wsl%EF%BC%89/"/>
    <id>https://weienhua.github.io/2023/04/03/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E4%B9%8B%E5%90%8E%E7%9A%84django%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%EF%BC%88wsl%EF%BC%89/</id>
    <published>2023-04-03T02:27:05.000Z</published>
    <updated>2023-04-19T06:34:35.042Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2023/04/03/lG7qsZLthxcnbYz.jpg" alt="宇航员"></p><h3 id="重装系统之后的Django项目配置（WSL）"><a href="#重装系统之后的Django项目配置（WSL）" class="headerlink" title="重装系统之后的Django项目配置（WSL）"></a>重装系统之后的<code>Django</code>项目配置（<code>WSL</code>）</h3><p>升级固态硬盘之后，只能重装系统，这样一来就得重新来配置项目的开发环境。</p><h4 id="Linux环境下"><a href="#Linux环境下" class="headerlink" title="Linux环境下"></a><code>Linux</code>环境下</h4><p><code>Django</code>项目需要用到<code>python</code>解释器，在开发过程中，不同的项目可能会用到不同版本的库，为了防止环境下包的版本冲突，选择在<code>windows的linux子环境</code>中来安装多版本的<code>python</code>，通过<code>virtualenv</code>来生成相互隔离的虚拟环境。</p><span id="more"></span><h5 id="开启WSL功能"><a href="#开启WSL功能" class="headerlink" title="开启WSL功能"></a>开启<code>WSL</code>功能</h5><p>在安装之前，由于<code>windows</code>默认是关闭<code>WSL</code>功能的，所以需要先开启该功能。</p><p>这边有两种方法，都可以开启，不过<strong>重点是开启之后需要重启电脑才可以生效</strong></p><ul><li>第一种是直观一点的方法</li></ul><p><a href="https://zhuanlan.zhihu.com/p/384026893">开启WSL功能</a></p><p>打开设置里的应用和功能</p><p><img src="https://s2.loli.net/2023/04/04/64o1wOFURs3c2xI.png" alt="image-20230403112835703"></p><p>点击右侧的相关设置提示的程序和功能</p><p>接着点左侧的启用或关闭<code>windows</code>功能</p><p><img src="https://s2.loli.net/2023/04/04/f7hEmgKFVDda32J.png" alt="image-20230403113044997"></p><p>在列表里找到并勾选适用于<code>Linux</code>的<code>windows</code>子系统选项，确定之后重启电脑。</p><ul><li>第二种是微软官方给出的命令方法</li></ul><p><a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-manual">WSL安装</a></p><p>管理员身份在<code>powershell</code>中运行这条命令即可打开。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</span><br></pre></td></tr></table></figure><h5 id="安装WSL"><a href="#安装WSL" class="headerlink" title="安装WSL"></a>安装<code>WSL</code></h5><p>开启上面功能之后就可以安装子环境了，直接在微软商店里搜索<code>ubuntu</code>就可以看到，这里选择18.05版本进行安装。</p><p><img src="https://s2.loli.net/2023/04/04/85AIJxQuOjMcWpF.png" alt="image-20230404165926953"></p><p>安装成功之后打开<code>ubuntu</code>的窗口，第一次打开需要等待一下，等待响应之后，需要设置<code>Linux</code>子系统的用户名和密码，设置完成之后即可完成安装，安装成功之后可以在桌面打开：按住Shift+单击鼠标右键，可以看到<code>在此处打开Linux shell窗口</code>，点击即可在桌面打开子环境的窗口。</p><p><img src="https://s2.loli.net/2023/04/04/ljTWZOkHMaJA4e1.png" alt="image-20230404170443478"></p><h5 id="安装mysql-server"><a href="#安装mysql-server" class="headerlink" title="安装mysql-server"></a>安装<code>mysql-server</code></h5><p><a href="https://zhuanlan.zhihu.com/p/166444726">安装<code>mysql</code></a></p><p>首先是更新一下软件源：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure><p>通过<code>apt</code>命令安装<code>mysql</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mysql-server mysql-client</span><br></pre></td></tr></table></figure><p>这边安装完之后可能会碰到一个进入数据库的错误（参考<a href="https://blog.csdn.net/a35100535/article/details/113250441">文章</a>）</p><p><img src="https://s2.loli.net/2023/04/04/fTEzulL4seVZ7YK.png" alt="image-20230404171835659"></p><p>博主用下面的命令给<code>mysql</code>加了权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /var/run/mysqld </span><br><span class="line"> </span><br><span class="line">sudo chown mysql /var/run/mysqld/ </span><br><span class="line"> </span><br><span class="line">sudo service mysql restart</span><br></pre></td></tr></table></figure><p>因为不清楚<code>root</code>账户的默认密码，这里找到了<code>mysql</code>生成的默认账号，用以下命令可以查看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cat /etc/mysql/debian.cnf</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/04/04/j5LfrOAS7MswXyi.png" alt="image-20230404172938034"></p><p>这边的<code>mysql_update</code>中的<code>user</code>和<code>password</code>就是生成的默认账号，用该账号进入之后修改<code>root</code>的密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line"> </span><br><span class="line">update mysql.user set authentication_string=password(&#x27;修改成你root账户的密码&#x27;) where user=&#x27;root&#x27; and Host =&#x27;localhost&#x27;;</span><br><span class="line"> </span><br><span class="line">update user set plugin=&quot;mysql_native_password&quot;;</span><br><span class="line"> </span><br><span class="line">flush privileges;</span><br><span class="line"> </span><br><span class="line">quit;</span><br></pre></td></tr></table></figure><p>退出重启之后用<code>root</code>用户登录进入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql restart</span><br><span class="line"> </span><br><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p>可以登陆之后，通过<code>-h + ip</code>来通过子环境去连接<code>windows</code>下的数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -h [x.x.x.x] -p</span><br></pre></td></tr></table></figure><p>如果可以连接成功即已经完成<code>Linux</code>环境下数据库的配置。</p><h5 id="安装virtualenv"><a href="#安装virtualenv" class="headerlink" title="安装virtualenv"></a>安装<code>virtualenv</code></h5><p><a href="https://www.cnblogs.com/freely/p/8022923.html">文章</a></p><p>子环境中默认安装了<code>python2.7和python3.6</code>但是应该是没有安装<code>pip</code>包管理工具，所以需要通过下面的命令来安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python3-pip</span><br></pre></td></tr></table></figure><p>安装完<code>pip</code>之后，通过<code>pip</code>安装<code>virtualenv</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip3 install virtualenv</span><br><span class="line">virtualenv --version</span><br></pre></td></tr></table></figure><p>安装成功后查询可以看到版本号，之后用<code>virtualenv</code>来创建一个虚拟环境</p><p><em>注：如果环境下有多个版本的<code>python</code>这时调用<code>virtualenv</code>就需要在命令前加上一个前缀：<code>python3 -m virtualenv --version</code>（比如3.6版本下装的<code>virtualenv</code>）</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//在当前目录下创建虚拟环境</span><br><span class="line">python3 -m virtualenv [progect_env]</span><br></pre></td></tr></table></figure><p>ps：如果有多个python解释器可以指定虚拟环境中的python版本，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m virtualenv -p [python解释器的路径:/usr/bin/python2.7] [project_env]</span><br></pre></td></tr></table></figure><p><code>source [project_env]/bin/activate</code> 进入虚拟环境</p><p><code>deactivate</code> 退出虚拟环境</p><h5 id="安装项目依赖（以labcoursedisplay为例）"><a href="#安装项目依赖（以labcoursedisplay为例）" class="headerlink" title="安装项目依赖（以labcoursedisplay为例）"></a>安装项目依赖（以<code>labcoursedisplay</code>为例）</h5><p>进入虚拟环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source labcoursedisplay/bin/activate</span><br></pre></td></tr></table></figure><p>进入项目目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /mnt/c/Project/Labcoursedisplay/</span><br></pre></td></tr></table></figure><p>安装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install -r requirements</span><br></pre></td></tr></table></figure><p>在安装<code>mysql-client1.4.0</code>时出现一个<code>OSError: mysql_config not found</code>报错（参考<a href="https://blog.csdn.net/qq_36191272/article/details/122933438">文章</a>）</p><p><img src="https://s2.loli.net/2023/04/04/3FHVGK5EC62TqeI.png" alt="img"></p><p>这里看到是<code>mysql_config</code>的问题，输入之后报错<code>not found</code>也给出了解决办法，输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libmysqlclient-dev</span><br></pre></td></tr></table></figure><p>安装完成之后就可以找到<code>mysql_config</code>了，再去安装<code>mysql-client</code>就可以成功了。</p><p>至此就已经完成了<code>Linux</code>环境下的所有配置。</p><h4 id="windows环境下"><a href="#windows环境下" class="headerlink" title="windows环境下"></a><code>windows</code>环境下</h4><p>项目开发是在<code>windows</code>下的集成开发环境下进行的。<code>Linux</code>环境只是提供<code>python</code>虚拟环境用来跑<code>Django</code>项目。</p><h5 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装<code>node.js</code></h5><p>因为项目是前后端分离的，前端用到了<code>React</code>，这里安装<code>node.js</code>之后就可以通过<code>npm</code>命令来对前端进行开发。</p><h5 id="安装Navicat"><a href="#安装Navicat" class="headerlink" title="安装Navicat"></a>安装<code>Navicat</code></h5><h5 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装<code>mysql</code></h5><p>这里用的版本是5.6版本，因为是用的绿色版，所以直接把压缩包解压之后即可用数据库，在重装系统之前通过<code>Navicat</code>把项目数据库结构和数据都备份了，同时也备份了<code>mysql</code>（这里是数据库中的一个叫<code>mysql</code>的数据库）数据库的表，也就是用户信息，因为默认是关闭远程连接的，需要去修改<code>mysql</code>数据库用户表中的数据才打开远程连接，具体可以参考<a href="https://weienhua.github.io/2022/08/08/mysql%E9%85%8D%E7%BD%AE/#more">这里</a>，而通过备份的<code>sql</code>文件在<code>Navicat</code>中直接运行覆盖导入，既可以省去修改的过程，<strong>不过这里有个重点：</strong>在覆盖导入之后也需要运行刷新权限的语句才可以使得修改生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLUSH PRIVILEGES # 这一条命令是刷新mysql的权限相关表</span><br></pre></td></tr></table></figure><p>之后就可以通过<code>ip</code>进行连接数据库了。</p><h5 id="克隆项目代码"><a href="#克隆项目代码" class="headerlink" title="克隆项目代码"></a>克隆项目代码</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone [仓库地址]</span><br></pre></td></tr></table></figure><h5 id="安装PyCharm"><a href="#安装PyCharm" class="headerlink" title="安装PyCharm"></a>安装<code>PyCharm</code></h5><h5 id="配置PyCharm"><a href="#配置PyCharm" class="headerlink" title="配置PyCharm"></a>配置<code>PyCharm</code></h5><p>安装完<code>PyCharm</code>之后，就可以配置开发环境了，用<code>PyCharm</code>打开项目，点击<code>File-&gt;Settings-&gt;Project:LabCourseDisplay-&gt;Python Interpreter</code>进入解释器配置</p><p><img src="https://s2.loli.net/2023/04/04/c5DCejFySvJianE.png" alt="image-20230404181146651"></p><p>点击<code>Add</code>添加新的解释器，选择<code>WSL</code>，在路径里选到虚拟环境的<code>bin</code>目录下，添加<code>python</code>解释器的版本，点击确定，即可添加成功</p><p><img src="https://s2.loli.net/2023/04/04/XoJDApEZjKRH4cS.png" alt="image-20230404181419528"></p><p>添加完虚拟环境解释器之后，配置项目的解释器，选择<code>Edit Configurations...</code></p><p><img src="https://s2.loli.net/2023/04/04/wTMFzk2mGoY3WpE.png" alt="image-20230404181524433"></p><p>之后在<code>python interpreter</code>处选择刚才配置的<code>WSL</code>虚拟环境的解释器</p><p>打开项目的<code>settings.py</code>文件，由于<code>Django</code>需要配置连接数据库的<code>ip</code>这里的<code>HOST</code>即为<code>Linux</code>虚拟子环境的<code>IP地址</code>，打开<code>Linux shell</code>通过命令即可查看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/04/04/JVFiIWyBnXE4o3s.png" alt="image-20230404181840650"></p><p>至此，项目环境配置完成，通过<code>PyCharm</code>就可以开始进行开发了。</p><h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><ul><li><a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-manual">WSL安装</a></li><li><a href="https://zhuanlan.zhihu.com/p/384026893">开启WSL功能</a></li><li><a href="https://zhuanlan.zhihu.com/p/166444726">安装<code>mysql</code></a></li><li><a href="https://blog.csdn.net/a35100535/article/details/113250441">文章1，数据库问题</a></li><li><a href="https://www.cnblogs.com/freely/p/8022923.html">文章2，<code>virtualenv</code>问题</a></li><li><a href="https://blog.csdn.net/qq_36191272/article/details/122933438">文章3，<code>mysql-client</code>安装问题</a></li><li><a href="https://weienhua.github.io/2022/08/08/mysql%E9%85%8D%E7%BD%AE/#more">这里，<code>mysql</code>远程连接问题</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2023/04/03/lG7qsZLthxcnbYz.jpg&quot; alt=&quot;宇航员&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;重装系统之后的Django项目配置（WSL）&quot;&gt;&lt;a href=&quot;#重装系统之后的Django项目配置（WSL）&quot; class=&quot;headerlink&quot; title=&quot;重装系统之后的Django项目配置（WSL）&quot;&gt;&lt;/a&gt;重装系统之后的&lt;code&gt;Django&lt;/code&gt;项目配置（&lt;code&gt;WSL&lt;/code&gt;）&lt;/h3&gt;&lt;p&gt;升级固态硬盘之后，只能重装系统，这样一来就得重新来配置项目的开发环境。&lt;/p&gt;
&lt;h4 id=&quot;Linux环境下&quot;&gt;&lt;a href=&quot;#Linux环境下&quot; class=&quot;headerlink&quot; title=&quot;Linux环境下&quot;&gt;&lt;/a&gt;&lt;code&gt;Linux&lt;/code&gt;环境下&lt;/h4&gt;&lt;p&gt;&lt;code&gt;Django&lt;/code&gt;项目需要用到&lt;code&gt;python&lt;/code&gt;解释器，在开发过程中，不同的项目可能会用到不同版本的库，为了防止环境下包的版本冲突，选择在&lt;code&gt;windows的linux子环境&lt;/code&gt;中来安装多版本的&lt;code&gt;python&lt;/code&gt;，通过&lt;code&gt;virtualenv&lt;/code&gt;来生成相互隔离的虚拟环境。&lt;/p&gt;</summary>
    
    
    
    <category term="工程" scheme="https://weienhua.github.io/categories/%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="环境配置" scheme="https://weienhua.github.io/categories/%E5%B7%A5%E7%A8%8B/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="python" scheme="https://weienhua.github.io/tags/python/"/>
    
    <category term="Linux" scheme="https://weienhua.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Typora+PicGo-Core+SM.MS搭建图床</title>
    <link href="https://weienhua.github.io/2023/01/08/Typora-PicGo-Core-SM-MS%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/"/>
    <id>https://weienhua.github.io/2023/01/08/Typora-PicGo-Core-SM-MS%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/</id>
    <published>2023-01-08T11:37:03.000Z</published>
    <updated>2023-01-08T15:28:27.075Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2023/01/08/OqFkYJ97LZN4GEy.jpg" alt="龙脊梯田"></p><h3 id="Typora-PicGo-Core-SM-MS搭建图床"><a href="#Typora-PicGo-Core-SM-MS搭建图床" class="headerlink" title="Typora+PicGo-Core+SM.MS搭建图床"></a>Typora+PicGo-Core+SM.MS搭建图床</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">版本信息：</span><br><span class="line">Typora：1.2.3</span><br><span class="line">PicGo-Core：1.5.0</span><br></pre></td></tr></table></figure><span id="more"></span><h4 id="1、PicGo-Core"><a href="#1、PicGo-Core" class="headerlink" title="1、PicGo-Core"></a>1、PicGo-Core</h4><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p><a href="https://picgo.github.io/PicGo-Core-Doc/zh/guide/">PicGo-Core</a> 是一个开源的命令行图片上传工具。虽然可以在 Typora 的设置中一键下载安装 PicGo-Core，但它是从 Typora 自己的 fork 库中安装的，并不是 PicGo-Core 的官方开源库；因此版本通常较为老旧，存在各种没有必要的 bug、也无法使用更新的 feature。</p><p>基于以上理由，强烈建议直接在本地自己安装 PicGo-Core。安装本身也很简单：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">需要 Node.js 版本 &gt;= 8</span></span><br><span class="line">npm install picgo -g</span><br></pre></td></tr></table></figure><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>安装成功后，可以使用交互式命令行方便地进行配置并自动生成配置文件，无需手动生成和复制粘贴。配置好图床后使用 <code>picgo use uploader</code> 选择当前要使用的 <code>Uploader</code> 。</p><p><img src="https://s2.loli.net/2023/01/08/Rn9MTSYjExZyFf6.png" alt="image-20230108225835752"></p><p>这边使用的是SM.MS图床，选择<code>smms</code>选项后要求输入<code>api token</code>。注册登录SM.MS后，可以在个人中心中生成查看<code>token</code>，输入即可完成配置。其他的图床也有对应的交互配置选项。</p><p>如果无法通过上面的方式完成配置，也可以手动生成配置文件。这里以默认的smms图床为例，更多图床的配置方法详见<a href="https://picgo.github.io/PicGo-Core-Doc/zh/guide/config.html#picbed">配置文档</a>。</p><blockquote><p>picgo 的默认配置文件为<code>~/.picgo/config.json</code>。其中<code>~</code>为用户目录。不同系统的用户目录不太一样。</p><p>linux 和 macOS 均为<code>~/.picgo/config.json</code>。</p><p>windows 则为<code>C:\Users\你的用户名\.picgo\config.json</code>。</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;picBed&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;uploader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;smms&quot;</span><span class="punctuation">,</span> <span class="comment">// 代表当前的默认上传图床为 SM.MS,</span></span><br><span class="line">    <span class="attr">&quot;smms&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span> <span class="comment">// 自己的 token</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;picgoPlugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span> <span class="comment">// 为插件预留</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="安装smms-v2-API插件"><a href="#安装smms-v2-API插件" class="headerlink" title="安装smms v2 API插件"></a>安装smms v2 API插件</h5><p>这边有坑，一是SMMS V1 API停用</p><p>正如博主Lzskyline所说这是个大坑，有多大呢。PicGo-Core目前使用的是SMMS v1 API，但是SMMS已经把V1 API给停了，只能使用V2。（PicGo-Core作者已经在Github上表示后面会增加v2 API）经过查询后发现有其他开发者通过第三方插件的方式解决了这个问题,，所以我们需要安装这个v2版本的smms-user插件。</p><p>用命令安装smms-user插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picgo install smms-user</span><br></pre></td></tr></table></figure><p>等待安装完成即可。</p><p>这边同时安装一个另外的命名插件，可以将上传的图片按照时间重新命名。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picgo install super-prefix</span><br></pre></td></tr></table></figure><p>配置信息如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;picBed&quot;: &#123;</span><br><span class="line">    &quot;current&quot;: &quot;smms-user&quot;,</span><br><span class="line">    &quot;uploader&quot;: &quot;smms-user&quot;,</span><br><span class="line">    &quot;smms-user&quot;: &#123;</span><br><span class="line">      &quot;Authorization&quot;: &quot;[token]&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;transformer&quot;: &quot;path&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;picgoPlugins&quot;: &#123;</span><br><span class="line">    &quot;picgo-plugin-smms-user&quot;: true,</span><br><span class="line">    &quot;picgo-plugin-super-prefix&quot;: true</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;picgo-plugin-super-prefix&quot;: &#123;</span><br><span class="line">    &quot;fileFormat&quot;: &quot;YYYYMMDDHHmmss&quot;</span><br><span class="line">  &#125;, //super-prefix插件配置</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><p>完成安装和配置后，就可以通过命令行上传图片到图床了。如果执行命令后返回了图床的URL，则说明配置成功。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">上传具体路径图片</span></span><br><span class="line">picgo upload /xxx/xxx.jpg</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">上传剪贴板里的第一张图片（上传时会将格式转成png）</span></span><br><span class="line">picgo upload</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/01/08/MfZO4qN6nCivIPo.png" alt="image-20230108230616425"></p><h4 id="2、Typora设置"><a href="#2、Typora设置" class="headerlink" title="2、Typora设置"></a>2、Typora设置</h4><p>配置好 PicGo-Core 后，在 Typora 的偏好设置-图像中进行设置。</p><h5 id="上传服务设定"><a href="#上传服务设定" class="headerlink" title="上传服务设定"></a>上传服务设定</h5><p>由于我们自己安装了 PicGo-Core，没有使用它自己集成的，所以上传服务选择 <code>Custom Command</code> （自定义命令），命令使用 <code>picgo u</code> 即可。</p><p><img src="https://s2.loli.net/2023/01/08/aiW5zGvhxVCYPJm.png" alt="image-20230108230807058"></p><p>设置后点击下方的“验证图片上传选项”，他会自动上传两张图片测试图片上传服务。如果出现如下结果，说明配置成功。</p><p><img src="https://s2.loli.net/2023/01/08/XIFE86wmOC1stDR.png" alt="image-20230108231009195"></p><h5 id="插入图片时设置"><a href="#插入图片时设置" class="headerlink" title="插入图片时设置"></a>插入图片时设置</h5><p><img src="https://s2.loli.net/2023/01/08/BhslVAbrFcI8Pit.png" alt="image-20230108231054042"></p><p>如果想在插入图片时直接上传，可以按照如上选项设置。然而这样设置存在一个问题，插入图片后需要等待上传完成返回URL才能在文档中看到图片的预览，感觉不够流畅。并且如果反复多次替换图片，图床中会出现很多冗余图片，造成空间浪费。</p><h5 id="批量上传图片"><a href="#批量上传图片" class="headerlink" title="批量上传图片"></a>批量上传图片</h5><p>由于上述原因，推荐在完成文章后统一批量上传文章中用到的所有本地图片。</p><p>在菜单中选择“格式-图像-上传所有本地图片即可完成批量上传。</p><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><ul><li><p><a href="https://www.cnblogs.com/skuld-yi/p/14533794.html"> Typora + PicGo-Core 自动上传图片到图床 </a></p></li><li><p><a href="https://blog.csdn.net/qq_37284607/article/details/107138217">Typora+PicGo-core+SMMS图床踩坑记</a></p></li><li><p><a href="https://www.lzskyline.com/index.php/archives/87/">Typora + PicGo-Core + SM.MS图床</a></p></li><li><p><a href="https://picgo.github.io/PicGo-Core-Doc/zh/guide/">PicGo-Core 官方文档</a></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2023/01/08/OqFkYJ97LZN4GEy.jpg&quot; alt=&quot;龙脊梯田&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Typora-PicGo-Core-SM-MS搭建图床&quot;&gt;&lt;a href=&quot;#Typora-PicGo-Core-SM-MS搭建图床&quot; class=&quot;headerlink&quot; title=&quot;Typora+PicGo-Core+SM.MS搭建图床&quot;&gt;&lt;/a&gt;Typora+PicGo-Core+SM.MS搭建图床&lt;/h3&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;版本信息：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Typora：1.2.3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PicGo-Core：1.5.0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="工具" scheme="https://weienhua.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="图床" scheme="https://weienhua.github.io/categories/%E5%B7%A5%E5%85%B7/%E5%9B%BE%E5%BA%8A/"/>
    
    
    <category term="图床搭建" scheme="https://weienhua.github.io/tags/%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA/"/>
    
    <category term="PicGo" scheme="https://weienhua.github.io/tags/PicGo/"/>
    
  </entry>
  
  <entry>
    <title>华为云部署Java web项目</title>
    <link href="https://weienhua.github.io/2023/01/01/%E5%8D%8E%E4%B8%BA%E4%BA%91%E9%83%A8%E7%BD%B2Java-web%E9%A1%B9%E7%9B%AE/"/>
    <id>https://weienhua.github.io/2023/01/01/%E5%8D%8E%E4%B8%BA%E4%BA%91%E9%83%A8%E7%BD%B2Java-web%E9%A1%B9%E7%9B%AE/</id>
    <published>2023-01-01T15:48:34.000Z</published>
    <updated>2023-01-01T15:56:32.266Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/08/02/clQoqBDumNjPSCy.png" alt="wallhaven-pkogdp_1920x1080"></p><h3 id="鲲鹏大作业：华为云部署"><a href="#鲲鹏大作业：华为云部署" class="headerlink" title="鲲鹏大作业：华为云部署"></a>鲲鹏大作业：华为云部署</h3><h5 id="租ecs"><a href="#租ecs" class="headerlink" title="租ecs"></a>租<code>ecs</code></h5><p><code>CentOs7.6</code></p><span id="more"></span><h5 id="租RDS"><a href="#租RDS" class="headerlink" title="租RDS"></a>租<code>RDS</code></h5><p>选择按需计费，<code>mysql</code>，版本5.6，性能<code>2vCPUs|4GB</code>，设置密码，其他默认。</p><h5 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装<code>mysql</code></h5><p>1、下载安装包<code>mysql-5.6.34-linux-glibc2.5-x86_64.tar.gz</code>（可前往官网自行下载：<a href="https://downloads.mysql.com/archives/community/%EF%BC%89">https://downloads.mysql.com/archives/community/）</a></p><p>2、卸载系统自带的<code>Mariadb</code></p><ul><li>查询已经安装的<code>mariadb</code></li></ul><p><code>rpm -qa|grep mariadb</code></p><ul><li>卸载<code>mariadb</code>，文件名为上述命令查询出来的文件</li></ul><p><code>rpm -e --nodeps [文件名]</code></p><p>3、删除etc目录下的<code>my.cnf</code></p><p><code>rm /etc/my.cnf</code></p><p>4、创建<code>mysql</code>用户组</p><p><code>groupadd mysql</code></p><p>5、创建一个用户名为<code>mysql</code>的用户并加入<code>mysql</code>用户组</p><p><code>useradd -g mysql mysql</code></p><p>6、将下载的压缩包上传到 <code>/usr/local/</code> 目录下</p><p>7、解压安装包</p><p>进入目录</p><p><code>cd /usr/local/</code></p><p><code>tar -zxvf mysql-5.6.34-linux-glibc2.5-x86_64.tar.gz</code></p><p>8、重命名</p><p><code>mv mysql-5.6.34-linux-glibc2.5-x86_64 mysql</code></p><p>9、在 etc 下新建配置文件<code>my.cnf</code>，并在该文件中添加一下代码：</p><p>进入目录</p><p><code>cd mysql/support-files/</code></p><p>复制一份放到etc中</p><p><code>cp my-default.cnf /etc/my.cnf</code></p><p>配置etc目录下的<code>my.cnf</code>文件</p><p><code>vim /etc/my.cnf</code></p><p>通过vim编辑器编辑<code>my.cnf</code>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[mysql]</span><br><span class="line"># 设置mysql客户端默认字符集</span><br><span class="line">default-character-set=utf8 </span><br><span class="line">socket=/var/lib/mysql/mysql.sock</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">skip-name-resolve</span><br><span class="line">#设置3306端口</span><br><span class="line">port = 3306 </span><br><span class="line">socket=/var/lib/mysql/mysql.sock</span><br><span class="line"># 设置mysql的安装目录</span><br><span class="line">basedir=/usr/local/mysql</span><br><span class="line"># 设置mysql数据库的数据的存放目录</span><br><span class="line">datadir=/usr/local/mysql/data</span><br><span class="line"># 允许最大连接数</span><br><span class="line">max_connections=200</span><br><span class="line"># 服务端使用的字符集默认为8比特编码的latin1字符集</span><br><span class="line">character-set-server=utf8</span><br><span class="line"># 创建新表时将使用的默认存储引擎</span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line">lower_case_table_name=1</span><br><span class="line">max_allowed_packet=16M</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>10、进入安装<code>mysql</code>软件的目录</p><p><code>cd /usr/local/mysql/</code></p><p>修改当前目录拥有者为<code>mysql</code>用户</p><p><code>chown -R mysql:mysql ./</code></p><p>安装数据库</p><p><code>./scripts/mysql_install_db --user=mysql --basedir=/usr/local/mysql/ --datadir=/usr/local/mysql/data/</code></p><p>这边可能会报这个错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FATAL ERROR: please install the following Perl modules before executing </span><br><span class="line">./scripts/mysql_install_db:Data::Dumper</span><br></pre></td></tr></table></figure><p>解决方法：安装<code>autoconf</code>库，这个包安装的同时会安装<code>Data:Dumper</code>模块</p><p><code>yum -y install autoconf</code></p><p>我做的时候还报了另外一个错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Installing MySQL system tables.../usr/local/mysql/bin/mysqld: error while loading shared</span><br></pre></td></tr></table></figure><p>原因是缺少<code>libaio</code>库文件</p><p>解决方法：</p><p><code>yum install libaio* -y</code></p><p>安装完之后再次执行【安装数据库】的命令</p><p>修改当前data目录的拥有者为<code>mysql</code>用户</p><p><code>chown -R mysql:mysql data</code></p><p>到此安装数据库完毕！</p><p>【下面是配置操作】</p><p>1、授予<code>my.cnf</code>最大权限</p><p><code>cd ~</code></p><p><code>chmod 777 /etc/my.cnf</code></p><p>2、设置开机自启动服务控制脚本：</p><ul><li>复制启动脚本到资源目录</li></ul><p><code>cd /usr/local/mysql/</code></p><p><code>cp ./support-files/mysql.server /etc/rc.d/init.d/mysqld</code></p><ul><li>增加<code>mysqld</code>服务控制脚本执行权限</li></ul><p><code>chmod +x /etc/rc.d/init.d/mysqld</code></p><ul><li>将<code>mysqld</code>服务加入到系统服务</li></ul><p><code>chkconfig --add mysqld</code></p><ul><li>检查<code>mysqld</code>服务是否已经生效</li></ul><p><code>chkconfig --list mysqld</code></p><p>正确输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld 0:off 1:off 2:on 3:on 4:on 5:on 6:off</span><br></pre></td></tr></table></figure><p>表明<code>mysqld</code>服务已经生效，在2、3、4、5运行级别随系统启动而自动启动，以后可以使用<code>service</code>命令控制<code>mysql</code>的启动和停止。</p><p>启动服务：<code>service mysqld start</code></p><p>停止服务：<code>service mysqld stop</code></p><ul><li>启动<code>mysqld</code></li></ul><p><code>service mysqld start</code></p><ul><li>将<code>mysql</code>的<code>bin</code>目录加入到<code>PATH</code>环境变量，编辑<code>~/bash_profile</code>文件</li></ul><p><code>vim ~/.bash_profile</code></p><p>在文件结尾添加一行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$PATH:/usr/local/mysql/bin</span><br></pre></td></tr></table></figure><p>执行下面命令使得修改内容立即生效</p><p><code>source ~/.bash_profile</code></p><ul><li>以<code>root</code>账户登录，默认是没有密码的</li></ul><p><code>mysql -u root -p</code></p><ul><li>设置<code>root</code>账户密码为<code>root</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">update user set password=password(&#x27;root&#x27;) where user=&#x27;root&#x27; and host=&#x27;localhost&#x27;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><ul><li><p>安装步骤参考：<code>https://blog.csdn.net/qq_17776287/article/details/53536761</code></p></li><li><p>报错处理<code>https://blog.csdn.net/songmao3145/article/details/77676402</code></p></li><li><p>通过命令行连接数据库<code>https://help.aliyun.com/document_detail/26138.html</code></p></li><li><p><code>mysql -h [ip地址] -P 3306 -u root -p</code>   注意这里的第一个P是大写的</p></li></ul><h5 id="安装jdk8"><a href="#安装jdk8" class="headerlink" title="安装jdk8"></a>安装<code>jdk8</code></h5><p>1、 安装方法</p><p><code>CentOs</code>上使用 <code>yum</code> 直接安装，环境变量自动配置好</p><p>2、查看是否已经安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@ecs ~]# java -version</span><br><span class="line">openjdk version &quot;1.8.0_352&quot;</span><br><span class="line">OpenJDK Runtime Environment (build 1.8.0_352-b08)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 25.352-b08, mixed mode)</span><br></pre></td></tr></table></figure><p>3、卸载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa |grep java</span><br><span class="line">rpm -qa |grep jdk</span><br><span class="line">rpm -qa |grep gcj</span><br></pre></td></tr></table></figure><p>如果有输出信息，批量卸载系统自带</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep java | xargs rpm -e --nodeps</span><br></pre></td></tr></table></figure><p>如果使用 <code>yum</code> 安装的 <code>jdk</code>，请使用下面命令卸载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y remove java-1.8.0-openjdk-headless.x86_64</span><br></pre></td></tr></table></figure><p>4、安装</p><ul><li>检查<code>yum</code>中有没有<code>java1.8</code>的包</li></ul><p><code>yum list java-1.8*</code></p><ul><li>开始安装</li></ul><p><code>yum install java-1.8.0-openjdk* -y</code></p><ul><li>验证是否安装成功</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@ecs ~]# java -version</span><br><span class="line">openjdk version &quot;1.8.0_352&quot;</span><br><span class="line">OpenJDK Runtime Environment (build 1.8.0_352-b08)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 25.352-b08, mixed mode)</span><br></pre></td></tr></table></figure><ul><li>安装参考：<code>https://cloud.tencent.com/developer/article/1965229</code></li></ul><h5 id="安装tomcat"><a href="#安装tomcat" class="headerlink" title="安装tomcat"></a>安装<code>tomcat</code></h5><ul><li>下载：<code>wget  https://archive.apache.org/dist/tomcat/tomcat-8/v8.5.51/bin/apache-tomcat-8.5.51.tar.gz</code></li><li>解压缩：<code>tar -zxf apache-tomcat-8.5.51.tar.gz</code></li><li>创建目录：<code>mkdir /usr/local/tomcat</code></li><li>移动<code>apache-tomcat-8.5.51</code>下的内容到<code>/usr/local/tomcat</code>：<code>mv apache-tomcat-8.5.51/* /usr/local/tomcat/</code></li></ul><h5 id="上传启动项目"><a href="#上传启动项目" class="headerlink" title="上传启动项目"></a>上传启动项目</h5><ul><li><p>上传<code>war</code>包到<code>/usr/local/tomcat/webapps</code></p></li><li><p>启动<code>tomcat</code>：<code>/usr/local/tomcat/bin/startup.sh</code></p></li><li><p>访问：<code>http://[ip地址]:8080/[项目名]</code></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/08/02/clQoqBDumNjPSCy.png&quot; alt=&quot;wallhaven-pkogdp_1920x1080&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;鲲鹏大作业：华为云部署&quot;&gt;&lt;a href=&quot;#鲲鹏大作业：华为云部署&quot; class=&quot;headerlink&quot; title=&quot;鲲鹏大作业：华为云部署&quot;&gt;&lt;/a&gt;鲲鹏大作业：华为云部署&lt;/h3&gt;&lt;h5 id=&quot;租ecs&quot;&gt;&lt;a href=&quot;#租ecs&quot; class=&quot;headerlink&quot; title=&quot;租ecs&quot;&gt;&lt;/a&gt;租&lt;code&gt;ecs&lt;/code&gt;&lt;/h5&gt;&lt;p&gt;&lt;code&gt;CentOs7.6&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="项目" scheme="https://weienhua.github.io/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="Java web" scheme="https://weienhua.github.io/categories/%E9%A1%B9%E7%9B%AE/Java-web/"/>
    
    
    <category term="Java" scheme="https://weienhua.github.io/tags/Java/"/>
    
    <category term="云部署" scheme="https://weienhua.github.io/tags/%E4%BA%91%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>mysql配置</title>
    <link href="https://weienhua.github.io/2022/08/08/mysql%E9%85%8D%E7%BD%AE/"/>
    <id>https://weienhua.github.io/2022/08/08/mysql%E9%85%8D%E7%BD%AE/</id>
    <published>2022-08-08T05:58:08.000Z</published>
    <updated>2023-04-03T03:10:00.135Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2023/01/08/VS9gPsX14uIf6xM.jpg" alt="铁路 火车轨道 你的名字动漫图片_彼岸图网"></p><h3 id="mysql配置"><a href="#mysql配置" class="headerlink" title="mysql配置"></a>mysql配置</h3><p>安装WSL中的Linux环境后，配置python的开发环境，虚拟环境和python版本都已经配置完成后，在项目运行调试的时候发现数据库未配置，下面是配置WSL ubuntu18.04时遇到的一下问题和解决方法。</p><span id="more"></span><h4 id="mysql问题"><a href="#mysql问题" class="headerlink" title="mysql问题"></a>mysql问题</h4><p>我电脑上的mysql是安装在windows上的，所以从WSL中连接访问的话属于远程连接，当时不太明白，跟老师也调试了好长时间，最后还是没有连接上，剩下的解决方案就是在WSL中安装mysql这样就可以省去配置mysql的远程连接，想着之前的一下其他东西都是用的windows下的mysql所以还是想直接用这个的，一些数据可以保留下来。</p><p>因为mysql默认是禁止远程连接访问的，所以需要打开这个开关，这也是前面一直连接失败的问题所在。下面是解决方法：</p><p>在Windows环境下进去mysql的cmd窗口输入下列代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">update user set host = &#x27;%&#x27; where user = &#x27;root&#x27;;</span><br><span class="line">FLUSH PRIVILEGES # 这一条命令是刷新mysql的权限相关表，所以必须执行，不然还是会出错</span><br></pre></td></tr></table></figure><p>执行完上面的代码后再回到WSL环境下就可以直接通过命令进入数据库了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h [ip地址] -u root -p</span><br></pre></td></tr></table></figure><h4 id="migrate问题"><a href="#migrate问题" class="headerlink" title="migrate问题"></a>migrate问题</h4><p>在配置完mysql的东西后运行python项目命令，直接在数据库中生成相关的表，但是在运行migrate命令时出现报错，依然说连接数据库出错，第一时间以为是mysql配置没配好，然后发现是django项目中的settings文件中配置的数据库连接中的host地址问题，在WSL中通过命令<code>cat /etc/resolv.conf</code>可以查看到ip地址，通过该地址即可连接到windows下的mysql，配置进pycharm后再用migrate就可以生成表了，可是每次电脑重启后这个ip地址都会随机改变，那么在pycharm的host又是写死的，这就引出了下一个问题。</p><h4 id="固定WSL的ip地址"><a href="#固定WSL的ip地址" class="headerlink" title="固定WSL的ip地址"></a>固定WSL的ip地址</h4><h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><ul><li><a href="https://www.cnblogs.com/zaynq/p/15620799.html">mysql远程连接1</a></li><li><a href="https://blog.csdn.net/bingjianit/article/details/54384299">mysql远程连接2</a></li><li><a href="https://zhuanlan.zhihu.com/p/357050093">WSL固定ip地址</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2023/01/08/VS9gPsX14uIf6xM.jpg&quot; alt=&quot;铁路 火车轨道 你的名字动漫图片_彼岸图网&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;mysql配置&quot;&gt;&lt;a href=&quot;#mysql配置&quot; class=&quot;headerlink&quot; title=&quot;mysql配置&quot;&gt;&lt;/a&gt;mysql配置&lt;/h3&gt;&lt;p&gt;安装WSL中的Linux环境后，配置python的开发环境，虚拟环境和python版本都已经配置完成后，在项目运行调试的时候发现数据库未配置，下面是配置WSL ubuntu18.04时遇到的一下问题和解决方法。&lt;/p&gt;</summary>
    
    
    
    <category term="工程" scheme="https://weienhua.github.io/categories/%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="环境配置" scheme="https://weienhua.github.io/categories/%E5%B7%A5%E7%A8%8B/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="linux" scheme="https://weienhua.github.io/tags/linux/"/>
    
    <category term="mysql" scheme="https://weienhua.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>WSL安装配置</title>
    <link href="https://weienhua.github.io/2022/08/02/WSL%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <id>https://weienhua.github.io/2022/08/02/WSL%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</id>
    <published>2022-08-02T02:47:20.000Z</published>
    <updated>2023-04-03T03:09:45.956Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/08/02/clQoqBDumNjPSCy.png" alt="wallhaven-pkogdp_1920x1080"></p><h1 id="WSL安装和配置"><a href="#WSL安装和配置" class="headerlink" title="WSL安装和配置"></a>WSL安装和配置</h1><p>在python开发中python版本和各种库的版本不同导致无法把不同版本的库装在全局配置中，所以得用到virtualenv虚拟环境管理，这里在windows系统下安装linux的子系统，可以方便的在linux中进行一些安装和环境配置。</p><span id="more"></span><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h4 id="启用WSL"><a href="#启用WSL" class="headerlink" title="启用WSL"></a>启用WSL</h4><p>windows系统默认是关闭WSL的选项的，所以在安装之前要先把WSL的功能打开。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</span><br></pre></td></tr></table></figure><p>管理员身份在powershell中运行这条命令即可打开。</p><h4 id="启用虚拟机功能"><a href="#启用虚拟机功能" class="headerlink" title="启用虚拟机功能"></a>启用虚拟机功能</h4><p>安装WSL 2之前，必须启用虚拟机平台可选功能，即启用虚拟化功能。</p><p>以管理员身份在powershell中运行下面命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure><p>启用上面两个功能之后重启电脑让系统完成设置</p><h4 id="下载Linux内核更新包"><a href="#下载Linux内核更新包" class="headerlink" title="下载Linux内核更新包"></a>下载Linux内核更新包</h4><p>这里是把WSL1更新为WSL的</p><ul><li><a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi">适用于x64的WSL2 Linux内核更新包</a></li><li>运行上一步中的更新包，此时需要权限，点击是即可。</li></ul><p>安装完成之后继续执行下面，将WSL2设置为默认版本。</p><h4 id="将WSL2设置为默认版本"><a href="#将WSL2设置为默认版本" class="headerlink" title="将WSL2设置为默认版本"></a>将WSL2设置为默认版本</h4><p>以管理员身份在powershell中运行下面的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --set-default-version 2</span><br></pre></td></tr></table></figure><h4 id="去Microsoft-Store中安装Linux"><a href="#去Microsoft-Store中安装Linux" class="headerlink" title="去Microsoft Store中安装Linux"></a>去Microsoft Store中安装Linux</h4><p>打开商店，搜索Ubuntu，这里 安装版本为18.04.5</p><p><img src="https://s2.loli.net/2022/08/02/2zHBtXAYfegQscw.png" alt="2"></p><p>下载安装完成之后点击打开即可，也可以在左面按住shift键点击右键，选择运行linuxshell，第一次运行需要配置解压文件，需要等待，之后配置用户名和密码即可。</p><h4 id="关于python"><a href="#关于python" class="headerlink" title="关于python"></a>关于python</h4><p>系统自带的python版本为3.6.9，如果需要安装其他版本直接通过Linux系统的方法安装即可。</p><h4 id="关于密码"><a href="#关于密码" class="headerlink" title="关于密码"></a>关于密码</h4><p>关于用户名和密码可以参看下图。</p><p><img src="https://s2.loli.net/2022/08/02/yCZ1Mq8WF4D2Vdi.png" alt="1"></p><h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><ul><li><a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-manual">WSL安装</a></li><li><a href="https://zhuanlan.zhihu.com/p/384026893">开启WSL功能</a></li><li><a href="https://docs.microsoft.com/zh-cn/windows/wsl/setup/environment#set-up-your-linux-username-and-password">用户名和密码</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/08/02/clQoqBDumNjPSCy.png&quot; alt=&quot;wallhaven-pkogdp_1920x1080&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;WSL安装和配置&quot;&gt;&lt;a href=&quot;#WSL安装和配置&quot; class=&quot;headerlink&quot; title=&quot;WSL安装和配置&quot;&gt;&lt;/a&gt;WSL安装和配置&lt;/h1&gt;&lt;p&gt;在python开发中python版本和各种库的版本不同导致无法把不同版本的库装在全局配置中，所以得用到virtualenv虚拟环境管理，这里在windows系统下安装linux的子系统，可以方便的在linux中进行一些安装和环境配置。&lt;/p&gt;</summary>
    
    
    
    <category term="工程" scheme="https://weienhua.github.io/categories/%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="环境配置" scheme="https://weienhua.github.io/categories/%E5%B7%A5%E7%A8%8B/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="python" scheme="https://weienhua.github.io/tags/python/"/>
    
    <category term="Linux" scheme="https://weienhua.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>记事本</title>
    <link href="https://weienhua.github.io/2022/07/27/%E8%AE%B0%E4%BA%8B%E6%9C%AC/"/>
    <id>https://weienhua.github.io/2022/07/27/%E8%AE%B0%E4%BA%8B%E6%9C%AC/</id>
    <published>2022-07-27T03:06:01.000Z</published>
    <updated>2023-04-04T09:45:34.771Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/07/27/aUhDP7sTqMVI8bH.jpg" alt="ss"></p><h3 id="hexo发布文章"><a href="#hexo发布文章" class="headerlink" title="hexo发布文章"></a>hexo发布文章</h3><p><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code> 本地调试</p><p><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code> 上传到博客</p><p><code>hexo new &quot;新页面&quot;</code> 创建一个新页面在<code>source/_posts/</code>文件夹里</p><span id="more"></span><p><code>hexo clean</code> 清楚本地</p><p><code>hexo g</code> 生成静态页面</p><p><code>hexo s</code> 本地调试</p><p><code>hexo d</code>上传到博客</p><h3 id="virtualenv虚拟环境生成工具"><a href="#virtualenv虚拟环境生成工具" class="headerlink" title="virtualenv虚拟环境生成工具"></a>virtualenv虚拟环境生成工具</h3><p>注：如果环境下有多个版本的<code>python</code>这时调用<code>virtualenv</code>就需要在命令前加上一个前缀：<code>python2 -m virtualenv --version</code>（比如2.7版本下装的<code>virtualenv</code>）</p><p><code>virtualenv --version</code> 查看版本号</p><p><code>virtualenv [progect_env]</code> 创建虚拟环境</p><p>ps：如果有多个python解释器可以指定虚拟环境中的python版本，命令如下：</p><p><code>virtualenv -p [python解释器的路径:/usr/bin/python2.7] [project_env]</code></p><p><code>source [project_env]/bin/activate</code> 进入虚拟环境</p><p><code>deactivate</code> 退出虚拟环境</p><p>有用的文章</p><ul><li><a href="https://www.cnblogs.com/anthony-wang0228/articles/11461321.html">图片设置</a></li><li><a href="https://www.cnblogs.com/freely/p/8022923.html">virtualenv使用</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/07/27/aUhDP7sTqMVI8bH.jpg&quot; alt=&quot;ss&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;hexo发布文章&quot;&gt;&lt;a href=&quot;#hexo发布文章&quot; class=&quot;headerlink&quot; title=&quot;hexo发布文章&quot;&gt;&lt;/a&gt;hexo发布文章&lt;/h3&gt;&lt;p&gt;&lt;code&gt;hexo clean &amp;amp;&amp;amp; hexo g &amp;amp;&amp;amp; hexo s&lt;/code&gt; 本地调试&lt;/p&gt;
&lt;p&gt;&lt;code&gt;hexo clean &amp;amp;&amp;amp; hexo g &amp;amp;&amp;amp; hexo d&lt;/code&gt; 上传到博客&lt;/p&gt;
&lt;p&gt;&lt;code&gt;hexo new &amp;quot;新页面&amp;quot;&lt;/code&gt; 创建一个新页面在&lt;code&gt;source/_posts/&lt;/code&gt;文件夹里&lt;/p&gt;</summary>
    
    
    
    <category term="日常" scheme="https://weienhua.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    <category term="笔记" scheme="https://weienhua.github.io/categories/%E6%97%A5%E5%B8%B8/%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>邮箱问题</title>
    <link href="https://weienhua.github.io/2022/07/27/%E9%82%AE%E7%AE%B1%E9%97%AE%E9%A2%98/"/>
    <id>https://weienhua.github.io/2022/07/27/%E9%82%AE%E7%AE%B1%E9%97%AE%E9%A2%98/</id>
    <published>2022-07-27T02:34:59.000Z</published>
    <updated>2023-01-08T11:43:27.462Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/07/27/NuGEq1j68YUiCol.png" alt="wallhaven-57yr13_1920x1080"></p><h3 id="django1-9-8-python2-7学习记录"><a href="#django1-9-8-python2-7学习记录" class="headerlink" title="django1.9.8+python2.7学习记录"></a>django1.9.8+python2.7学习记录</h3><p>在学习<code>django</code>的过程中出现的一些问题，配置个人中心页面的邮箱修改时，在点击发送验证码之后进入调试逻辑，刚开始在对象保存的时候出错，后来发现是前面的<code>send_type</code>字段定义的长度是10，<span id="more"></span>增加<code>update_email</code>后超出了最大长度，所以<code>save</code>就一直不成功，修改<code>models</code>中字段的<code>max_length</code>后，更新数据库的字段信息，就可以保存成功了。</p><p><img src="https://s2.loli.net/2022/07/27/ArMpDEvGok1zqbI.png" alt="1"></p><p><img src="https://s2.loli.net/2022/07/27/E2qvgkjdicCK7YX.png" alt="2"></p><hr><p>修改字段后可以保存成功了，但是在发送的时候出问题了，怎么也发不出去邮件，在网上查找之后，修改了<code>setting</code>配置中的<code>EMAIL_BACKEND</code>和<code>EMAIL_USE_TLS</code>两个字段，依然不行，试着把授权码重新生成了一下<code>EMAIL_HOST_PASSWORD</code>，设置之后发现可以发送成功了，后面把前面两个字段注释掉依然可以发送成功，所以猜测问题是出在授权码上，也许是时间有点久了，qq邮箱自动关闭了<code>smtp</code>的授权。</p><p><img src="https://s2.loli.net/2022/07/27/glCwbDW2jSK5X43.png" alt="3"></p><p>网上说<code>EMAIL_BACKEND</code>这个字段是为了检测邮箱账号和密码的格式是否正确</p><p><code>EMAIL_USE_TLS</code>这个字段说是信息的加密。</p><p>参考文章</p><ul><li><p><a href="https://blog.csdn.net/yx1179109710/article/details/81367617">https://blog.csdn.net/yx1179109710/article/details/81367617</a></p></li><li><p><a href="https://blog.csdn.net/z390332412/article/details/78055296?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~BlogCommendFromBaidu~default-1-78055296-blog-81367617.pc_relevant_multi_platform_whitelistv1_exp2&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~BlogCommendFromBaidu~default-1-78055296-blog-81367617.pc_relevant_multi_platform_whitelistv1_exp2&amp;utm_relevant_index=1">https://blog.csdn.net/z390332412/article/details/78055296?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-1-78055296-blog-81367617.pc_relevant_multi_platform_whitelistv1_exp2&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-1-78055296-blog-81367617.pc_relevant_multi_platform_whitelistv1_exp2&amp;utm_relevant_index=1</a></p></li><li><p><a href="https://blog.csdn.net/xinxinNoGiveUp/article/details/78900811">https://blog.csdn.net/xinxinNoGiveUp/article/details/78900811</a></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/07/27/NuGEq1j68YUiCol.png&quot; alt=&quot;wallhaven-57yr13_1920x1080&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;django1-9-8-python2-7学习记录&quot;&gt;&lt;a href=&quot;#django1-9-8-python2-7学习记录&quot; class=&quot;headerlink&quot; title=&quot;django1.9.8+python2.7学习记录&quot;&gt;&lt;/a&gt;django1.9.8+python2.7学习记录&lt;/h3&gt;&lt;p&gt;在学习&lt;code&gt;django&lt;/code&gt;的过程中出现的一些问题，配置个人中心页面的邮箱修改时，在点击发送验证码之后进入调试逻辑，刚开始在对象保存的时候出错，后来发现是前面的&lt;code&gt;send_type&lt;/code&gt;字段定义的长度是10，</summary>
    
    
    
    <category term="工程" scheme="https://weienhua.github.io/categories/%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="后端" scheme="https://weienhua.github.io/categories/%E5%B7%A5%E7%A8%8B/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="django" scheme="https://weienhua.github.io/tags/django/"/>
    
    <category term="python" scheme="https://weienhua.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>media图片404加载失败设置</title>
    <link href="https://weienhua.github.io/2022/06/08/media%E5%9B%BE%E7%89%87404%E5%8A%A0%E8%BD%BD%E5%A4%B1%E8%B4%A5%E8%AE%BE%E7%BD%AE/"/>
    <id>https://weienhua.github.io/2022/06/08/media%E5%9B%BE%E7%89%87404%E5%8A%A0%E8%BD%BD%E5%A4%B1%E8%B4%A5%E8%AE%BE%E7%BD%AE/</id>
    <published>2022-06-08T01:49:03.000Z</published>
    <updated>2023-01-08T11:43:37.353Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/06/08/ziDNk7ZJIY6A3XB.png" alt="wallhaven-w8gyex_1920x1080"></p><h3 id="django1-9-8-python2-7学习记录"><a href="#django1-9-8-python2-7学习记录" class="headerlink" title="django1.9.8+python2.7学习记录"></a>django1.9.8+python2.7学习记录</h3><p>在学习慕课网6-1时出现了问题，跟着课程视频设置的图片加载失败了，在评论区和浏览器F12中发现是media中的图片加载404错误，而课程视频中的设置只设置了static中的图片路径，所以就上网查找media中的图片设置前端显示，找了有些时间吧，现在已经可以正常显示了。</p><span id="more"></span><p><strong>下面是解决问题的方法：</strong></p><ul><li>第一步</li></ul><p>在settings中设置media的查找路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MEDIA_URL = <span class="string">&#x27;/media/&#x27;</span></span><br><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR, <span class="string">&#x27;media&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/08/qzg7CsDSkLoYmHN.png" alt="settings"></p><ul><li>第二步</li></ul><p>在urls中配置上传文件的访问函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.static <span class="keyword">import</span> serve</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^xadmin/&#x27;</span>, xadmin.site.urls),</span><br><span class="line"></span><br><span class="line">    url(<span class="string">&#x27;^$&#x27;</span>, TemplateView.as_view(template_name=<span class="string">&quot;index.html&quot;</span>), name=<span class="string">&quot;index&quot;</span>),</span><br><span class="line"></span><br><span class="line">    url(<span class="string">r&#x27;^media/(?P&lt;path&gt;.*)&#x27;</span>, serve, &#123;<span class="string">&quot;document_root&quot;</span>:settings.MEDIA_ROOT&#125;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/08/TAEP6cHk1ZUSbnu.png" alt="&lt;!--urls--&gt;"></p><p>至此应该就可以在本地端口8000页面正常加载media中的图片了。</p><p><img src="https://s2.loli.net/2022/06/08/sJ6nKSo27A5pGhW.png" alt="微信截图_20220608100546"></p><p><em>参考文章</em></p><p><em><a href="https://www.jianshu.com/p/e9aaa7418792">https://www.jianshu.com/p/e9aaa7418792</a></em></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/06/08/ziDNk7ZJIY6A3XB.png&quot; alt=&quot;wallhaven-w8gyex_1920x1080&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;django1-9-8-python2-7学习记录&quot;&gt;&lt;a href=&quot;#django1-9-8-python2-7学习记录&quot; class=&quot;headerlink&quot; title=&quot;django1.9.8+python2.7学习记录&quot;&gt;&lt;/a&gt;django1.9.8+python2.7学习记录&lt;/h3&gt;&lt;p&gt;在学习慕课网6-1时出现了问题，跟着课程视频设置的图片加载失败了，在评论区和浏览器F12中发现是media中的图片加载404错误，而课程视频中的设置只设置了static中的图片路径，所以就上网查找media中的图片设置前端显示，找了有些时间吧，现在已经可以正常显示了。&lt;/p&gt;</summary>
    
    
    
    <category term="工程" scheme="https://weienhua.github.io/categories/%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="后端" scheme="https://weienhua.github.io/categories/%E5%B7%A5%E7%A8%8B/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="django" scheme="https://weienhua.github.io/tags/django/"/>
    
    <category term="python" scheme="https://weienhua.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>天梯赛备战的一些杂题</title>
    <link href="https://weienhua.github.io/2022/05/26/%E5%A4%A9%E6%A2%AF%E8%B5%9B%E5%A4%87%E6%88%98%E7%9A%84%E4%B8%80%E4%BA%9B%E6%9D%82%E9%A2%98/"/>
    <id>https://weienhua.github.io/2022/05/26/%E5%A4%A9%E6%A2%AF%E8%B5%9B%E5%A4%87%E6%88%98%E7%9A%84%E4%B8%80%E4%BA%9B%E6%9D%82%E9%A2%98/</id>
    <published>2022-05-26T05:53:39.000Z</published>
    <updated>2022-05-30T10:14:14.522Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/05/30/opUG1JREWdI8296.jpg" alt="武士女孩 帽子 剑 雨天 Ůսʿ guweiz 4k高清壁纸_彼岸图网"></p><h1 id="杂题选做"><a href="#杂题选做" class="headerlink" title="杂题选做"></a>杂题选做</h1><h3 id="7-2-出栈序列的合法性"><a href="#7-2-出栈序列的合法性" class="headerlink" title="7-2 出栈序列的合法性"></a>7-2 出栈序列的合法性</h3><p>给定一个最大容量为 <em>M</em> 的堆栈，将 <em>N</em> 个数字按 1, 2, 3, …, <em>N</em> 的顺序入栈，允许按任何顺序出栈，则哪些数字序列是不可能得到的？例如给定 <em>M</em>&#x3D;5、<em>N</em>&#x3D;7，则我们有可能得到{ 1, 2, 3, 4, 5, 6, 7 }，但不可能得到{ 3, 2, 1, 7, 5, 6, 4 }。</p><span id="more"></span><h4 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h4><p>输入第一行给出 3 个不超过 1000 的正整数：<em>M</em>（堆栈最大容量）、<em>N</em>（入栈元素个数）、<em>K</em>（待检查的出栈序列个数）。最后 <em>K</em> 行，每行给出 <em>N</em> 个数字的出栈序列。所有同行数字以空格间隔。</p><h4 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h4><p>对每一行出栈序列，如果其的确是有可能得到的合法序列，就在一行中输出<code>YES</code>，否则输出<code>NO</code>。</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5 7 5</span><br><span class="line">1 2 3 4 5 6 7</span><br><span class="line">3 2 1 7 5 6 4</span><br><span class="line">7 6 5 4 3 2 1</span><br><span class="line">5 6 4 3 7 2 1</span><br><span class="line">1 7 6 5 4 3 2</span><br></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">YES</span><br><span class="line">NO</span><br><span class="line">NO</span><br><span class="line">YES</span><br><span class="line">NO</span><br></pre></td></tr></table></figure><h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k;</span><br><span class="line"><span class="type">int</span> in[N], out[N], stk[N];</span><br><span class="line"><span class="type">int</span> tt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>); cin.<span class="built_in">tie</span>(<span class="number">0</span>); cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;m, &amp;n, &amp;k);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">in[i] = i + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(k -- ) &#123;</span><br><span class="line"><span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;out[i]);</span><br><span class="line">tt = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; n;) &#123;</span><br><span class="line"><span class="keyword">if</span>(in[i] != out[j]) &#123;</span><br><span class="line"><span class="comment">// 鍏ユ爤</span></span><br><span class="line"><span class="keyword">if</span>(tt == m - <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">stk[++ tt] = in[i];</span><br><span class="line">i ++ ;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(tt == m - <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">i ++ ; j ++ ;</span><br><span class="line"><span class="keyword">while</span>(tt &gt; <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(stk[tt] == out[j])</span><br><span class="line">j ++, tt --;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tt == <span class="number">-1</span>) <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-16-根据后序和中序遍历输出先序遍历"><a href="#7-16-根据后序和中序遍历输出先序遍历" class="headerlink" title="7-16 根据后序和中序遍历输出先序遍历"></a>7-16 根据后序和中序遍历输出先序遍历</h3><p>本题要求根据给定的一棵二叉树的后序遍历和中序遍历结果，输出该树的先序遍历结果。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h4><p>第一行给出正整数<em>N</em>(≤30)，是树中结点的个数。随后两行，每行给出<em>N</em>个整数，分别对应后序遍历和中序遍历结果，数字间以空格分隔。题目保证输入正确对应一棵二叉树。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h4><p>在一行中输出<code>Preorder: </code>以及该树的先序遍历结果。数字间有1个空格，行末不得有多余空格。</p><h4 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">7</span><br><span class="line">2 3 1 5 7 6 4</span><br><span class="line">1 2 3 4 5 6 7</span><br></pre></td></tr></table></figure><h4 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Preorder: 4 1 3 2 6 5 7</span><br></pre></td></tr></table></figure><h4 id="AC代码：-1"><a href="#AC代码：-1" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c"><figcaption><span>++</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">35</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> last[N], in[N];</span><br><span class="line"><span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PrePrintf</span><span class="params">(<span class="type">int</span> root, <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(l &gt; r) <span class="keyword">return</span> ;</span><br><span class="line"><span class="type">int</span> i = l;</span><br><span class="line"><span class="keyword">while</span>(i &lt; r &amp;&amp; last[root] != in[i]) i ++ ;</span><br><span class="line">    <span class="keyword">if</span>(flag) <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,in[i]);</span><br><span class="line">    <span class="comment">// 根节点减右子树的长度（r - i + 1)</span></span><br><span class="line">PrePrintf(root - r - <span class="number">1</span> + i, l, i - <span class="number">1</span>);</span><br><span class="line">PrePrintf(root - <span class="number">1</span>, i + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;last[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;in[i]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Preorder: &quot;</span>);</span><br><span class="line">PrePrintf(n, <span class="number">1</span>, n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-5-树的遍历"><a href="#7-5-树的遍历" class="headerlink" title="7-5 树的遍历"></a>7-5 树的遍历</h3><p>给定一棵二叉树的后序遍历和中序遍历，请你输出其层序遍历的序列。这里假设键值都是互不相等的正整数。</p><h4 id="输入格式：-1"><a href="#输入格式：-1" class="headerlink" title="输入格式："></a>输入格式：</h4><p>输入第一行给出一个正整数<em>N</em>（≤30），是二叉树中结点的个数。第二行给出其后序遍历序列。第三行给出其中序遍历序列。数字间以空格分隔。</p><h4 id="输出格式：-1"><a href="#输出格式：-1" class="headerlink" title="输出格式："></a>输出格式：</h4><p>在一行中输出该树的层序遍历的序列。数字间以1个空格分隔，行首尾不得有多余空格。</p><h4 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">7</span><br><span class="line">2 3 1 5 7 6 4</span><br><span class="line">1 2 3 4 5 6 7</span><br></pre></td></tr></table></figure><h4 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4 1 6 3 5 7 2</span><br></pre></td></tr></table></figure><h4 id="AC代码：-2"><a href="#AC代码：-2" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">35</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Tree</span> &#123;</span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Tree</span> *left, *right;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> last[N], in[N];</span><br><span class="line"><span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">queue&lt;Tree*&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function">Tree* <span class="title">PrePrintf</span><span class="params">(<span class="type">int</span> root, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">Tree *T = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span>(l &gt; r) <span class="keyword">return</span> T;</span><br><span class="line"><span class="type">int</span> i = l;</span><br><span class="line"><span class="keyword">while</span>(i &lt; r &amp;&amp; last[root] != in[i]) i ++ ;</span><br><span class="line">T = (Tree *) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(Tree));</span><br><span class="line">T-&gt;data = in[i];</span><br><span class="line">T-&gt;left = <span class="built_in">PrePrintf</span>(root - r - <span class="number">1</span> + i, l, i - <span class="number">1</span>);</span><br><span class="line">T-&gt;right = <span class="built_in">PrePrintf</span>(root - <span class="number">1</span>, i + <span class="number">1</span>, r);</span><br><span class="line"><span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>); cin.<span class="built_in">tie</span>(<span class="number">0</span>); cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;last[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;in[i]);</span><br><span class="line"></span><br><span class="line">Tree *root;</span><br><span class="line">root = <span class="built_in">PrePrintf</span>(n, <span class="number">1</span>, n);</span><br><span class="line">q.<span class="built_in">push</span>(root);</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line"><span class="keyword">auto</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span>(flag) <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, t-&gt;data);</span><br><span class="line"><span class="keyword">if</span>(t-&gt;left != <span class="literal">NULL</span>) q.<span class="built_in">push</span>(t-&gt;left);</span><br><span class="line"><span class="keyword">if</span>(t-&gt;right != <span class="literal">NULL</span>) q.<span class="built_in">push</span>(t-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="7-7-N个数求和-20-分"><a href="#7-7-N个数求和-20-分" class="headerlink" title="7-7 N个数求和 (20 分)"></a>7-7 N个数求和 (20 分)</h3><p>本题的要求很简单，就是求<code>N</code>个数字的和。麻烦的是，这些数字是以有理数<code>分子/分母</code>的形式给出的，你输出的和也必须是有理数的形式。</p><h4 id="输入格式：-2"><a href="#输入格式：-2" class="headerlink" title="输入格式："></a>输入格式：</h4><p>输入第一行给出一个正整数<code>N</code>（≤100）。随后一行按格式<code>a1/b1 a2/b2 ...</code>给出<code>N</code>个有理数。题目保证所有分子和分母都在长整型范围内。另外，负数的符号一定出现在分子前面。</p><h4 id="输出格式：-2"><a href="#输出格式：-2" class="headerlink" title="输出格式："></a>输出格式：</h4><p>输出上述数字和的最简形式 —— 即将结果写成<code>整数部分 分数部分</code>，其中分数部分写成<code>分子/分母</code>，要求分子小于分母，且它们没有公因子。如果结果的整数部分为0，则只输出分数部分。</p><h4 id="输入样例1："><a href="#输入样例1：" class="headerlink" title="输入样例1："></a>输入样例1：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">2/5 4/15 1/30 -2/60 8/3</span><br></pre></td></tr></table></figure><h4 id="输出样例1："><a href="#输出样例1：" class="headerlink" title="输出样例1："></a>输出样例1：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 1/3</span><br></pre></td></tr></table></figure><h4 id="输入样例2："><a href="#输入样例2：" class="headerlink" title="输入样例2："></a>输入样例2：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">4/3 2/3</span><br></pre></td></tr></table></figure><h4 id="输出样例2："><a href="#输出样例2：" class="headerlink" title="输出样例2："></a>输出样例2：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><h4 id="输入样例3："><a href="#输入样例3：" class="headerlink" title="输入样例3："></a>输入样例3：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1/3 -1/6 1/8</span><br></pre></td></tr></table></figure><h4 id="输出样例3："><a href="#输出样例3：" class="headerlink" title="输出样例3："></a>输出样例3：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7/24</span><br></pre></td></tr></table></figure><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><ul><li>读入分子分母，储存在数组中，声明三个变量来储存答案。</li><li>分数的加减通常分三步：<ul><li>通分，找到分母的最小公倍数。</li><li>计算，分子按照分母扩大的倍数扩大相应倍数，然后计算加减。</li><li>约分，如果分子大于分母则计算出整数部分，当分子小于分母时说明已经到了最小，找到分子和分母的最大公约数，同除即可。</li></ul></li><li>注意：输出格式，答案为0的时候的输出，有负数的输出，注意符号。</li></ul><h4 id="AC代码：-3"><a href="#AC代码：-3" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// resz 是答案分子，resm是答案分母，resk是答案整数 </span></span><br><span class="line">LL n, resm, resz, resk;</span><br><span class="line">LL a[N], b[N]; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 最大公约数 </span></span><br><span class="line"><span class="function">LL <span class="title">maxYab</span><span class="params">(LL a, LL b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> b ? <span class="built_in">maxYab</span>(b, a % b) : a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 最小公倍数 </span></span><br><span class="line"><span class="function">LL <span class="title">minMab</span><span class="params">(LL a, LL b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a*b/<span class="built_in">maxYab</span>(a,b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld/%lld&quot;</span>,&amp;a[i], &amp;b[i]);</span><br><span class="line">&#125;</span><br><span class="line">LL k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= n; j ++ ) &#123;</span><br><span class="line">k = <span class="built_in">max</span>(k, <span class="built_in">minMab</span>(b[i], b[j]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">LL sumz = <span class="number">0</span>;</span><br><span class="line">resm = k;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) &#123;</span><br><span class="line">sumz += a[i] * (k / b[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> sign = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(sumz &lt; <span class="number">0</span>) &#123;</span><br><span class="line">sign = <span class="number">-1</span>;</span><br><span class="line">sumz *= sign;</span><br><span class="line">&#125;</span><br><span class="line">resz = sumz;</span><br><span class="line"><span class="keyword">if</span>(sumz &gt;= k) &#123;</span><br><span class="line">resk = sumz / resm;</span><br><span class="line">resz = sumz - resk * resm;</span><br><span class="line">&#125;</span><br><span class="line">LL t = <span class="built_in">maxYab</span>(resz, resm);</span><br><span class="line">resz /= t;</span><br><span class="line">resm /= t;</span><br><span class="line"><span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(resz == <span class="number">0</span> &amp;&amp; sign == <span class="number">-1</span>) resk *= sign;</span><br><span class="line"><span class="keyword">if</span>(resk != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, resk);</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(resz != <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(flag) <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld/%lld&quot;</span>, resz * sign, resm);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(resz == <span class="number">0</span> &amp;&amp; resk == <span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-8-A-B-20-分"><a href="#7-8-A-B-20-分" class="headerlink" title="7-8 A-B (20 分)"></a>7-8 A-B (20 分)</h3><p>本题要求你计算<em>A</em>−<em>B</em>。不过麻烦的是，<em>A</em>和<em>B</em>都是字符串 —— 即从字符串<em>A</em>中把字符串<em>B</em>所包含的字符全删掉，剩下的字符组成的就是字符串<em>A</em>−<em>B</em>。</p><h4 id="输入格式：-3"><a href="#输入格式：-3" class="headerlink" title="输入格式："></a>输入格式：</h4><p>输入在2行中先后给出字符串<em>A</em>和<em>B</em>。两字符串的长度都不超过104，并且保证每个字符串都是由可见的ASCII码和空白字符组成，最后以换行符结束。</p><h4 id="输出格式：-3"><a href="#输出格式：-3" class="headerlink" title="输出格式："></a>输出格式：</h4><p>在一行中打印出<em>A</em>−<em>B</em>的结果字符串。</p><h4 id="输入样例：-2"><a href="#输入样例：-2" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I love GPLT!  It&#x27;s a fun game!</span><br><span class="line">aeiou</span><br></pre></td></tr></table></figure><h4 id="输出样例：-2"><a href="#输出样例：-2" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I lv GPLT!  It&#x27;s  fn gm!</span><br></pre></td></tr></table></figure><h4 id="AC代码：-4"><a href="#AC代码：-4" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10010</span>;</span><br><span class="line"></span><br><span class="line">string str, t;</span><br><span class="line"><span class="type">int</span> cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">getline</span>(cin, str);</span><br><span class="line"><span class="built_in">getline</span>(cin, t);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; str.<span class="built_in">size</span>(); i ++ ) &#123;</span><br><span class="line"><span class="keyword">if</span>(t.<span class="built_in">find</span>(str.<span class="built_in">at</span>(i)) != t.npos)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, str.<span class="built_in">at</span>(i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-10-多项式A除以B-25-分"><a href="#7-10-多项式A除以B-25-分" class="headerlink" title="7-10 多项式A除以B (25 分)"></a>7-10 多项式A除以B (25 分)</h3><p>这仍然是一道关于A&#x2F;B的题，只不过A和B都换成了多项式。你需要计算两个多项式相除的商Q和余R，其中R的阶数必须小于B的阶数。</p><h4 id="输入格式：-4"><a href="#输入格式：-4" class="headerlink" title="输入格式："></a>输入格式：</h4><p>输入分两行，每行给出一个非零多项式，先给出A，再给出B。每行的格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">N e[1] c[1] ... e[N] c[N]</span><br></pre></td></tr></table></figure><p>其中<code>N</code>是该多项式非零项的个数，<code>e[i]</code>是第<code>i</code>个非零项的指数，<code>c[i]</code>是第<code>i</code>个非零项的系数。各项按照指数递减的顺序给出，保证所有指数是各不相同的非负整数，所有系数是非零整数，所有整数在整型范围内。</p><h4 id="输出格式：-4"><a href="#输出格式：-4" class="headerlink" title="输出格式："></a>输出格式：</h4><p>分两行先后输出商和余，输出格式与输入格式相同，输出的系数保留小数点后1位。同行数字间以1个空格分隔，行首尾不得有多余空格。注意：零多项式是一个特殊多项式，对应输出为<code>0 0 0.0</code>。但非零多项式不能输出零系数（包括舍入后为0.0）的项。在样例中，余多项式其实有常数项<code>-1/27</code>，但因其舍入后为0.0，故不输出。</p><h4 id="输入样例：-3"><a href="#输入样例：-3" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4 4 1 2 -3 1 -1 0 -1</span><br><span class="line">3 2 3 1 -2 0 1</span><br></pre></td></tr></table></figure><h4 id="输出样例：-3"><a href="#输出样例：-3" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3 2 0.3 1 0.2 0 -1.0</span><br><span class="line">1 1 -3.1</span><br></pre></td></tr></table></figure><h4 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h4><ul><li>多项式除法：<a href="https://baike.baidu.com/item/%E5%A4%9A%E9%A1%B9%E5%BC%8F%E9%99%A4%E6%B3%95/2703247">https://baike.baidu.com/item/%E5%A4%9A%E9%A1%B9%E5%BC%8F%E9%99%A4%E6%B3%95/2703247</a></li><li>用map储存每个多项式以指数为索引，用到temp来作为运算过程中的减数，每次用A去减temp最后A中储存的多项式即为余数。</li><li>答案由每次取出A的最高次与B的差和比值作为指数和系数，即ope是A和B的最高指数之差，opc是凑出A减temp为零的系数项，每次把ope和opc储存在res中，运算结束后res储存的即为商。</li><li>有可能会出现0多项式，按照题目要求输出就可以了。</li><li>分数到小数可能会有误差，所以用相减的值去和0.0000001比较，如果大于即认定该项为0。</li><li>注：系数保留1位小数，所以如果是&lt;0.05的系数四舍五入后为0即不输出，所以要判断一下是否有要输出的多项式，如果没有直接输出题目要求的零多项式即可。</li></ul><h4 id="AC代码：-5"><a href="#AC代码：-5" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">double</span>&gt; a, b, t, res;</span><br><span class="line"><span class="type">int</span> maxa = <span class="number">-1</span>, maxb = <span class="number">-1</span>, maxres = <span class="number">-1</span>, maxt = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> e, c;</span><br><span class="line"><span class="comment">// 读入 A </span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ ) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;e, &amp;c);</span><br><span class="line">a[e] = c;</span><br><span class="line">maxa = <span class="built_in">max</span>(maxa, e); </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 读入 B </span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ ) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;e, &amp;c);</span><br><span class="line">b[e] = c;</span><br><span class="line">maxb = <span class="built_in">max</span>(maxb, e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ope;</span><br><span class="line"><span class="type">double</span> opc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(maxa &gt;= maxb) &#123;</span><br><span class="line">maxt = <span class="number">-1</span>;</span><br><span class="line">ope = maxa - maxb;</span><br><span class="line">opc = <span class="number">1.0</span> * a[maxa] / b[maxb];</span><br><span class="line">res[ope] = opc;</span><br><span class="line">maxres = <span class="built_in">max</span>(maxres, ope);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求减数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = maxb; i &gt;= <span class="number">0</span>; i -- ) &#123;</span><br><span class="line">t[i + ope] = b[i] * opc;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 运算减法</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = maxa; i &gt;= <span class="number">0</span>; i -- ) &#123;</span><br><span class="line">a[i] = a[i] - t[i];</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">fabs</span>(a[i]) &gt;= <span class="number">0.00000001</span>) &#123;</span><br><span class="line">maxt = <span class="built_in">max</span>(maxt, i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">maxa = maxt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出 </span></span><br><span class="line"><span class="comment">// 商输出</span></span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = maxres; i &gt;= <span class="number">0</span>; i -- ) &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">fabs</span>(res[i]) &gt;= <span class="number">0.05</span>) cnt ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cnt == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;0 0 0.0\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, cnt);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = maxres; i &gt;= <span class="number">0</span>; i -- ) &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">fabs</span>(res[i]) &gt;= <span class="number">0.05</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; %d %0.1lf&quot;</span>, i, res[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 余数输出</span></span><br><span class="line">cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = maxa; i &gt;= <span class="number">0</span>; i -- ) &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">fabs</span>(a[i]) &gt;= <span class="number">0.05</span>) cnt ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cnt == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;0 0 0.0&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, cnt);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = maxa; i &gt;= <span class="number">0</span>; i -- ) &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">fabs</span>(a[i]) &gt;= <span class="number">0.05</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; %d %0.1lf&quot;</span>, i, a[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-8-圆形体体积计算器-20-分"><a href="#7-8-圆形体体积计算器-20-分" class="headerlink" title="7-8 圆形体体积计算器 (20 分)"></a>7-8 圆形体体积计算器 (20 分)</h3><p>本题要求实现一个常用圆形体体积的计算器。计算公式如下：</p><ul><li>球体体积 V&#x3D;34πr3，其中r是球体半径。</li><li>圆柱体体积 V&#x3D;πr2h，其中r是底圆半径，h是高。</li><li>圆锥体体积 V&#x3D;31πr2h，其中r是底圆半径，h是高。</li></ul><h4 id="输入格式：-5"><a href="#输入格式：-5" class="headerlink" title="输入格式："></a>输入格式：</h4><p>在每次计算之前，要求输出如下界面：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1-Ball</span><br><span class="line">2-Cylinder</span><br><span class="line">3-Cone</span><br><span class="line">other-Exit</span><br><span class="line">Please enter your command:</span><br></pre></td></tr></table></figure><p>然后从标准输入读进一个整数指令。</p><h4 id="输出格式：-5"><a href="#输出格式：-5" class="headerlink" title="输出格式："></a>输出格式：</h4><p>如果读入的指令是1或2或3，则执行相应的体积计算；如果是其他整数，则程序结束运行。</p><ul><li>当输入为1时，在计算球体体积之前，打印<code>Please enter the radius:</code>，然后读入球体半径，完成计算；</li><li>当输入为2时，在计算圆柱体体积之前，打印<code>Please enter the radius and the height:</code>，然后读入底圆半径和高，完成计算；</li><li>当输入为3时，在计算圆锥体体积之前，打印<code>Please enter the radius and the height:</code>，然后读入底圆半径和高，完成计算。</li></ul><p>计算结果在一行内输出，保留小数点后两位。</p><h4 id="输入样例：-4"><a href="#输入样例：-4" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">2.4 3</span><br><span class="line">0</span><br></pre></td></tr></table></figure><h4 id="输出样例：-4"><a href="#输出样例：-4" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">1-Ball</span><br><span class="line">2-Cylinder</span><br><span class="line">3-Cone</span><br><span class="line">other-Exit</span><br><span class="line">Please enter your command:</span><br><span class="line">Please enter the radius:</span><br><span class="line">33.51</span><br><span class="line">1-Ball</span><br><span class="line">2-Cylinder</span><br><span class="line">3-Cone</span><br><span class="line">other-Exit</span><br><span class="line">Please enter your command:</span><br><span class="line">Please enter the radius and the height:</span><br><span class="line">18.10</span><br><span class="line">1-Ball</span><br><span class="line">2-Cylinder</span><br><span class="line">3-Cone</span><br><span class="line">other-Exit</span><br><span class="line">Please enter your command:</span><br></pre></td></tr></table></figure><h4 id="思路：-2"><a href="#思路：-2" class="headerlink" title="思路："></a>思路：</h4><ul><li>把每个要求的面积单独做出来，按题给方式输入，分类去求各个面积。</li><li>圆周率要精确到小数点后10位，不然有5分拿不到。</li></ul><h4 id="AC代码：-6"><a href="#AC代码：-6" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">f1</span><span class="params">(<span class="type">double</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">4.0</span> / <span class="number">3.0</span> * <span class="number">3.14159265357</span> * r * r * r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">f2</span><span class="params">(<span class="type">double</span> r, <span class="type">double</span> h)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">3.14159265357</span> * r * r * h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">f3</span><span class="params">(<span class="type">double</span> r, <span class="type">double</span> h)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1.0</span> / <span class="number">3.0</span> *<span class="number">3.14159265357</span> * r * r * h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;1-Ball&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;2-Cylinder&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;3-Cone&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;other-Exit&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Please enter your command:&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">double</span> r, h;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">print</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line"><span class="keyword">if</span>(x != <span class="number">1</span> &amp;&amp; x != <span class="number">2</span> &amp;&amp; x != <span class="number">3</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span>(x == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Please enter the radius:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;r);</span><br><span class="line"><span class="type">double</span> t = <span class="built_in">f1</span>(r);</span><br><span class="line"><span class="keyword">if</span>(t == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;0\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2lf\n&quot;</span>, <span class="built_in">f1</span>(r));</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (x == <span class="number">2</span>) &#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Please enter the radius and the height:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf&quot;</span>, &amp;r, &amp;h);</span><br><span class="line"><span class="type">double</span> t = <span class="built_in">f2</span>(r, h);</span><br><span class="line"><span class="keyword">if</span>(t == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;0\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2lf\n&quot;</span>, <span class="built_in">f2</span>(r, h));</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (x == <span class="number">3</span>) &#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Please enter the radius and the height:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf&quot;</span>, &amp;r, &amp;h);</span><br><span class="line"><span class="type">double</span> t = <span class="built_in">f3</span>(r, h);</span><br><span class="line"><span class="keyword">if</span>(t == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;0\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2lf\n&quot;</span>, <span class="built_in">f3</span>(r, h));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-9-出栈序列的合法性-25-分"><a href="#7-9-出栈序列的合法性-25-分" class="headerlink" title="7-9 出栈序列的合法性 (25 分)"></a>7-9 出栈序列的合法性 (25 分)</h3><p>给定一个最大容量为 M 的堆栈，将 N 个数字按 1, 2, 3, …, N 的顺序入栈，允许按任何顺序出栈，则哪些数字序列是不可能得到的？例如给定 M&#x3D;5、N&#x3D;7，则我们有可能得到{ 1, 2, 3, 4, 5, 6, 7 }，但不可能得到{ 3, 2, 1, 7, 5, 6, 4 }。</p><h4 id="输入格式：-6"><a href="#输入格式：-6" class="headerlink" title="输入格式："></a>输入格式：</h4><p>输入第一行给出 3 个不超过 1000 的正整数：M（堆栈最大容量）、N（入栈元素个数）、K（待检查的出栈序列个数）。最后 K 行，每行给出 N 个数字的出栈序列。所有同行数字以空格间隔。</p><h4 id="输出格式：-6"><a href="#输出格式：-6" class="headerlink" title="输出格式："></a>输出格式：</h4><p>对每一行出栈序列，如果其的确是有可能得到的合法序列，就在一行中输出<code>YES</code>，否则输出<code>NO</code>。</p><h4 id="输入样例：-5"><a href="#输入样例：-5" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5 7 5</span><br><span class="line">1 2 3 4 5 6 7</span><br><span class="line">3 2 1 7 5 6 4</span><br><span class="line">7 6 5 4 3 2 1</span><br><span class="line">5 6 4 3 7 2 1</span><br><span class="line">1 7 6 5 4 3 2</span><br></pre></td></tr></table></figure><h4 id="输出样例：-5"><a href="#输出样例：-5" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">YES</span><br><span class="line">NO</span><br><span class="line">NO</span><br><span class="line">YES</span><br><span class="line">NO</span><br></pre></td></tr></table></figure><h4 id="思路：-3"><a href="#思路：-3" class="headerlink" title="思路："></a>思路：</h4><ul><li>模拟入栈和出栈。</li><li>如果两个指针指向的元素不相等，则先判断栈的长度有没有超出，再把入栈序列入栈。</li><li>如果两个指针指向的元素相等，则两个指针同时向后移动一位，然后再检查栈顶的元素与出栈序列的元素是否相同，若相同则弹出同时出栈指针后移，出栈时先判断栈的长度有没有超出。</li><li>最后用栈是否为空判断序列是否合法。</li></ul><h4 id="AC代码：-7"><a href="#AC代码：-7" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m ,k;</span><br><span class="line"><span class="type">int</span> a[N], b[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;m, &amp;n, &amp;k);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) &#123;</span><br><span class="line">a[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(k -- ) &#123;</span><br><span class="line">stack&lt;<span class="type">int</span>&gt; stk;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i &lt;= n) &#123;</span><br><span class="line"><span class="keyword">if</span>(a[i] != b[j]) &#123;</span><br><span class="line"><span class="keyword">if</span>(stk.<span class="built_in">size</span>() == m) <span class="keyword">break</span>;</span><br><span class="line">stk.<span class="built_in">push</span>(a[i]);</span><br><span class="line">i ++;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(stk.<span class="built_in">size</span>() == m) <span class="keyword">break</span>;</span><br><span class="line">i ++; j ++;</span><br><span class="line"><span class="keyword">while</span>(!stk.<span class="built_in">empty</span>()) &#123;</span><br><span class="line"><span class="keyword">if</span>(stk.<span class="built_in">top</span>() == b[j])</span><br><span class="line">    j ++, stk.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!stk.<span class="built_in">empty</span>()) <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-10-前序序列创建二叉树-25-分"><a href="#7-10-前序序列创建二叉树-25-分" class="headerlink" title="7-10 前序序列创建二叉树 (25 分)"></a>7-10 前序序列创建二叉树 (25 分)</h3><p>编一个程序，读入用户输入的一串先序遍历字符串，根据此字符串建立一个二叉树（以二叉链表存储）。 例如如下的先序遍历字符串： ABC##DE#G##F### 其中“#”表示的是空格，代表一棵空树。然后再对二叉树进行中序遍历，输出遍历结果。</p><h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式:"></a>输入格式:</h4><p>多组测试数据，每组测试数据一行，该行只有一个字符串，长度不超过100。</p><h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式:"></a>输出格式:</h4><p>对于每组数据，</p><p>输出二叉树的中序遍历的序列，每个字符后面都有一个空格。</p><p>每组输出一行，对应输入的一行字符串。</p><h4 id="输入样例-（及其对应的二叉树）"><a href="#输入样例-（及其对应的二叉树）" class="headerlink" title="输入样例:（及其对应的二叉树）"></a>输入样例:（及其对应的二叉树）</h4><p><img src="https://images.ptausercontent.com/7b13776e-1c4d-45aa-8142-d8eeb9fe5b65.jpg" alt="snap858.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abc##de#g##f###</span><br></pre></td></tr></table></figure><h4 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例:"></a>输出样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c b e g d f a </span><br></pre></td></tr></table></figure><h4 id="思路：-4"><a href="#思路：-4" class="headerlink" title="思路："></a>思路：</h4><ul><li>创建结构体储存二叉树，用一个独立指针去遍历输入字符串的每一个值，每次询问结束后把指针归零。</li><li>创建二叉树，中序遍历调用递归即可。</li></ul><h4 id="AC代码：-8"><a href="#AC代码：-8" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line"><span class="type">char</span> x;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> *l;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> *r;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> str[N];</span><br><span class="line"><span class="type">int</span> k;</span><br><span class="line"></span><br><span class="line"><span class="function">node* <span class="title">creatTree</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(str[k] == <span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">k ++; </span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">node* root = (node*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(node));</span><br><span class="line">root-&gt;x = str[k];</span><br><span class="line">k ++;</span><br><span class="line">root-&gt;l = <span class="built_in">creatTree</span>();</span><br><span class="line">root-&gt;r = <span class="built_in">creatTree</span>();</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">inPrint</span><span class="params">(node* root)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(root-&gt;l != <span class="literal">NULL</span>)</span><br><span class="line"><span class="built_in">inPrint</span>(root-&gt;l);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, root-&gt;x);</span><br><span class="line"><span class="keyword">if</span>(root-&gt;r != <span class="literal">NULL</span>)</span><br><span class="line">    <span class="built_in">inPrint</span>(root-&gt;r); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str) != EOF) &#123;</span><br><span class="line">node* head = <span class="built_in">creatTree</span>();</span><br><span class="line"><span class="built_in">inPrint</span>(head);</span><br><span class="line">k = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="L1-8-均是素数-20-分"><a href="#L1-8-均是素数-20-分" class="headerlink" title="L1-8 均是素数 (20 分)"></a>L1-8 均是素数 (20 分)</h3><p>在给定的区间 [<em>m</em>,<em>n</em>] 内，是否存在素数 <em>p</em>、<em>q</em>、<em>r</em>（<em>p</em>&lt;<em>q</em>&lt;<em>r</em>），使得 <em>pq</em>+<em>r</em>、<em>q**r</em>+<em>p</em>、<em>r**p</em>+<em>q</em> 均是素数？</p><h4 id="输入格式：-7"><a href="#输入格式：-7" class="headerlink" title="输入格式："></a>输入格式：</h4><p>输入给出区间的两个端点 0&lt;<em>m</em>&lt;<em>n</em>≤1000，其间以空格分隔。</p><h4 id="输出格式：-7"><a href="#输出格式：-7" class="headerlink" title="输出格式："></a>输出格式：</h4><p>在一行中输出满足条件的素数三元组的个数。</p><h4 id="输入样例：-6"><a href="#输入样例：-6" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 35</span><br></pre></td></tr></table></figure><h4 id="输出样例：-6"><a href="#输出样例：-6" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure><p><strong>样例解读</strong></p><p>满足条件的 10 组解为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">2, 3, 5</span><br><span class="line">2, 3, 7</span><br><span class="line">2, 3, 13</span><br><span class="line">2, 3, 17</span><br><span class="line">2, 5, 7</span><br><span class="line">2, 5, 13</span><br><span class="line">2, 5, 19</span><br><span class="line">2, 5, 31</span><br><span class="line">2, 7, 23</span><br><span class="line">2, 13, 17</span><br></pre></td></tr></table></figure><h4 id="思路：-5"><a href="#思路：-5" class="headerlink" title="思路："></a>思路：</h4><ul><li>筛出范围内的素数，然后三重循环求答案。</li><li>注：判断是否为素数的函数，如果循环中发现不是素数，直接return即可，否则会很慢，然后超时。</li></ul><h4 id="AC代码：-9"><a href="#AC代码：-9" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> primes[N], cnt;</span><br><span class="line"><span class="type">int</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">isprime</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i * i &lt;= x; i ++ ) &#123;</span><br><span class="line"><span class="keyword">if</span>(x % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getprimes</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i ++ ) &#123;</span><br><span class="line"><span class="keyword">if</span>(!st[i]) primes[cnt ++ ] = i;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; primes[j] * i &lt;= n; j ++ ) &#123;</span><br><span class="line">st[primes[j] * i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(i % primes[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">isprime</span>(x)) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;m, &amp;n);</span><br><span class="line"><span class="built_in">getprimes</span>(n);</span><br><span class="line"><span class="type">int</span> l, r;</span><br><span class="line">l = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; cnt; i ++ ) &#123;</span><br><span class="line"><span class="keyword">if</span>(primes[i] &gt;= m) &#123;</span><br><span class="line">l = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">r = cnt; </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; cnt; i ++ ) &#123;</span><br><span class="line"><span class="keyword">if</span>(primes[i] &gt;= n) &#123;</span><br><span class="line">r = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> p = l; p &lt;= r; p ++ ) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> q = p + <span class="number">1</span>; q &lt;= r; q ++ ) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = q + <span class="number">1</span>; j &lt;= r; j ++ ) &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">find</span>(primes[p]*primes[q] + primes[j])</span><br><span class="line">&amp;&amp; <span class="built_in">find</span>(primes[q]*primes[j] + primes[p])</span><br><span class="line">&amp;&amp; <span class="built_in">find</span>(primes[j]*primes[p] + primes[q])) &#123;</span><br><span class="line">res ++; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, res);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/05/30/opUG1JREWdI8296.jpg&quot; alt=&quot;武士女孩 帽子 剑 雨天 Ůսʿ guweiz 4k高清壁纸_彼岸图网&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;杂题选做&quot;&gt;&lt;a href=&quot;#杂题选做&quot; class=&quot;headerlink&quot; title=&quot;杂题选做&quot;&gt;&lt;/a&gt;杂题选做&lt;/h1&gt;&lt;h3 id=&quot;7-2-出栈序列的合法性&quot;&gt;&lt;a href=&quot;#7-2-出栈序列的合法性&quot; class=&quot;headerlink&quot; title=&quot;7-2 出栈序列的合法性&quot;&gt;&lt;/a&gt;7-2 出栈序列的合法性&lt;/h3&gt;&lt;p&gt;给定一个最大容量为 &lt;em&gt;M&lt;/em&gt; 的堆栈，将 &lt;em&gt;N&lt;/em&gt; 个数字按 1, 2, 3, …, &lt;em&gt;N&lt;/em&gt; 的顺序入栈，允许按任何顺序出栈，则哪些数字序列是不可能得到的？例如给定 &lt;em&gt;M&lt;/em&gt;&amp;#x3D;5、&lt;em&gt;N&lt;/em&gt;&amp;#x3D;7，则我们有可能得到{ 1, 2, 3, 4, 5, 6, 7 }，但不可能得到{ 3, 2, 1, 7, 5, 6, 4 }。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="https://weienhua.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="竞赛" scheme="https://weienhua.github.io/categories/%E7%AE%97%E6%B3%95/%E7%AB%9E%E8%B5%9B/"/>
    
    
    <category term="C/C++" scheme="https://weienhua.github.io/tags/C-C/"/>
    
    <category term="天梯赛" scheme="https://weienhua.github.io/tags/%E5%A4%A9%E6%A2%AF%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>PTA练习题</title>
    <link href="https://weienhua.github.io/2022/05/26/PTA%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
    <id>https://weienhua.github.io/2022/05/26/PTA%E7%BB%83%E4%B9%A0%E9%A2%98/</id>
    <published>2022-05-26T05:49:58.000Z</published>
    <updated>2022-05-30T10:13:31.338Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/05/30/ble3wXi1r8MsfCL.png" alt="wallhaven-z8p9rj_1920x1080"></p><h1 id="L2难度"><a href="#L2难度" class="headerlink" title="L2难度"></a>L2难度</h1><h3 id="7-14-集合相似度"><a href="#7-14-集合相似度" class="headerlink" title="7-14 集合相似度"></a>7-14 集合相似度</h3><p>给定两个整数集合，它们的相似度定义为：<em>N**c</em>&#x2F;<em>N**t</em>×100%。其中<em>N**c</em>是两个集合都有的不相等整数的个数，<em>N**t</em>是两个集合一共有的不相等整数的个数。你的任务就是计算任意一对给定集合的相似度。</p><span id="more"></span><h4 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h4><p>输入第一行给出一个正整数<em>N</em>（≤50），是集合的个数。随后<em>N</em>行，每行对应一个集合。每个集合首先给出一个正整数<em>M</em>（≤104），是集合中元素的个数；然后跟<em>M</em>个[0,109]区间内的整数。</p><p>之后一行给出一个正整数<em>K</em>（≤2000），随后<em>K</em>行，每行对应一对需要计算相似度的集合的编号（集合从1到<em>N</em>编号）。数字间以空格分隔。</p><h4 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h4><p>对每一对需要计算的集合，在一行中输出它们的相似度，为保留小数点后2位的百分比数字。</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">3 99 87 101</span><br><span class="line">4 87 101 5 87</span><br><span class="line">7 99 101 18 5 135 18 99</span><br><span class="line">2</span><br><span class="line">1 2</span><br><span class="line">1 3</span><br></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">50.00%</span><br><span class="line">33.33%</span><br></pre></td></tr></table></figure><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><ul><li>用STL的容器set来储存集合元素，set自动去重，可以省去判断去重的操作。</li><li>调用find函数直接查找集合中某个值是否存在，如果存在两集合相同元素就ans加1，即为Nc，那么两集合元素相加减去一个ans即为Nt，最后算答案是记得转换浮点数。</li></ul><h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">55</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k;</span><br><span class="line">set&lt;<span class="type">int</span>&gt; a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line"><span class="keyword">while</span>(m -- )</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">a[i].<span class="built_in">insert</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;k);</span><br><span class="line"><span class="keyword">while</span>(k -- )</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> x, y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">        <span class="comment">// 遍历STL容器的一种方法</span></span><br><span class="line"><span class="comment">// for(auto it = a[x].begin(); it != a[x].end(); it ++ )</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it : a[x])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[y].<span class="built_in">find</span>(it) != a[y].<span class="built_in">end</span>())</span><br><span class="line">ans ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">double</span> res = <span class="number">100.0</span> * ans / (a[x].<span class="built_in">size</span>() + a[y].<span class="built_in">size</span>() - ans);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2lf%\n&quot;</span>, res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-20悄悄关注"><a href="#7-20悄悄关注" class="headerlink" title="7-20悄悄关注"></a>7-20悄悄关注</h3><p>新浪微博上有个“悄悄关注”，一个用户悄悄关注的人，不出现在这个用户的关注列表上，但系统会推送其悄悄关注的人发表的微博给该用户。现在我们来做一回网络侦探，根据某人的关注列表和其对其他用户的点赞情况，扒出有可能被其悄悄关注的人。</p><h4 id="输入格式：-1"><a href="#输入格式：-1" class="headerlink" title="输入格式："></a>输入格式：</h4><p>输入首先在第一行给出某用户的关注列表，格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">人数N 用户1 用户2 …… 用户N</span><br></pre></td></tr></table></figure><p>其中<code>N</code>是不超过5000的正整数，每个<code>用户i</code>（<code>i</code>&#x3D;1, …, <code>N</code>）是被其关注的用户的ID，是长度为4位的由数字和英文字母组成的字符串，各项间以空格分隔。</p><p>之后给出该用户点赞的信息：首先给出一个不超过10000的正整数<code>M</code>，随后<code>M</code>行，每行给出一个被其点赞的用户ID和对该用户的点赞次数（不超过1000），以空格分隔。注意：用户ID是一个用户的唯一身份标识。题目保证在关注列表中没有重复用户，在点赞信息中也没有重复用户。</p><h4 id="输出格式：-1"><a href="#输出格式：-1" class="headerlink" title="输出格式："></a>输出格式：</h4><p>我们认为被该用户点赞次数大于其点赞平均数、且不在其关注列表上的人，很可能是其悄悄关注的人。根据这个假设，请你按用户ID字母序的升序输出可能是其悄悄关注的人，每行1个ID。如果其实并没有这样的人，则输出“Bing Mei You”。</p><h4 id="输入样例1："><a href="#输入样例1：" class="headerlink" title="输入样例1："></a>输入样例1：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">10 GAO3 Magi Zha1 Sen1 Quan FaMK LSum Eins FatM LLao</span><br><span class="line">8</span><br><span class="line">Magi 50</span><br><span class="line">Pota 30</span><br><span class="line">LLao 3</span><br><span class="line">Ammy 48</span><br><span class="line">Dave 15</span><br><span class="line">GAO3 31</span><br><span class="line">Zoro 1</span><br><span class="line">Cath 60</span><br></pre></td></tr></table></figure><h4 id="输出样例1："><a href="#输出样例1：" class="headerlink" title="输出样例1："></a>输出样例1：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Ammy</span><br><span class="line">Cath</span><br><span class="line">Pota</span><br></pre></td></tr></table></figure><h4 id="输入样例2："><a href="#输入样例2：" class="headerlink" title="输入样例2："></a>输入样例2：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">11 GAO3 Magi Zha1 Sen1 Quan FaMK LSum Eins FatM LLao Pota</span><br><span class="line">7</span><br><span class="line">Magi 50</span><br><span class="line">Pota 30</span><br><span class="line">LLao 48</span><br><span class="line">Ammy 3</span><br><span class="line">Dave 15</span><br><span class="line">GAO3 31</span><br><span class="line">Zoro 29</span><br></pre></td></tr></table></figure><h4 id="输出样例2："><a href="#输出样例2：" class="headerlink" title="输出样例2："></a>输出样例2：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Bing Mei You</span><br></pre></td></tr></table></figure><h4 id="AC代码：-1"><a href="#AC代码：-1" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5010</span>, M = <span class="number">10010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">set&lt;string&gt; gz;</span><br><span class="line">map&lt;string, <span class="type">int</span>&gt; dz;</span><br><span class="line">vector&lt;string&gt; res;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        string s;</span><br><span class="line">        cin &gt;&gt; s;</span><br><span class="line">        gz.<span class="built_in">insert</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        string s;</span><br><span class="line">        <span class="type">int</span> t;</span><br><span class="line">        cin &gt;&gt; s &gt;&gt; t;</span><br><span class="line">        sum += t;</span><br><span class="line">        dz.<span class="built_in">insert</span>(&#123;s, t&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">float</span> avg = <span class="number">1.0</span> * sum / m;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> k : dz)</span><br><span class="line">    &#123;</span><br><span class="line">        string s = k.first;</span><br><span class="line">        <span class="type">int</span> t = k.second;</span><br><span class="line">        <span class="keyword">if</span>(t &gt; avg)</span><br><span class="line">            <span class="keyword">if</span>(gz.<span class="built_in">find</span>(s) == gz.<span class="built_in">end</span>())</span><br><span class="line">                res.<span class="built_in">push_back</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(res.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Bing Mei You&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> flag = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">sort</span>(res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; res.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(flag)</span><br><span class="line">                cout &lt;&lt; res[i], flag = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                cout &lt;&lt; endl &lt;&lt; res[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-21"><a href="#7-21" class="headerlink" title="7-21"></a>7-21</h3><h3 id="7-22-重排链表"><a href="#7-22-重排链表" class="headerlink" title="7-22 重排链表"></a>7-22 重排链表</h3><p>给定一个单链表 <em>L</em>1→<em>L</em>2→⋯→<em>L**n</em>−1→<em>L**n</em>，请编写程序将链表重新排列为 <em>L**n</em>→<em>L</em>1→<em>L**n</em>−1→<em>L</em>2→⋯。例如：给定<em>L</em>为1→2→3→4→5→6，则输出应该为6→1→5→2→4→3。</p><h4 id="输入格式：-2"><a href="#输入格式：-2" class="headerlink" title="输入格式："></a>输入格式：</h4><p>每个输入包含1个测试用例。每个测试用例第1行给出第1个结点的地址和结点总个数，即正整数<em>N</em> (≤105)。结点的地址是5位非负整数，NULL地址用−1表示。</p><p>接下来有<em>N</em>行，每行格式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Address Data Next</span><br></pre></td></tr></table></figure><p>其中<code>Address</code>是结点地址；<code>Data</code>是该结点保存的数据，为不超过105的正整数；<code>Next</code>是下一结点的地址。题目保证给出的链表上至少有两个结点。</p><h4 id="输出格式：-2"><a href="#输出格式：-2" class="headerlink" title="输出格式："></a>输出格式：</h4><p>对每个测试用例，顺序输出重排后的结果链表，其上每个结点占一行，格式与输入相同。</p><h4 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">00100 6</span><br><span class="line">00000 4 99999</span><br><span class="line">00100 1 12309</span><br><span class="line">68237 6 -1</span><br><span class="line">33218 3 00000</span><br><span class="line">99999 5 68237</span><br><span class="line">12309 2 33218</span><br></pre></td></tr></table></figure><h4 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">68237 6 00100</span><br><span class="line">00100 1 99999</span><br><span class="line">99999 5 12309</span><br><span class="line">12309 2 00000</span><br><span class="line">00000 4 33218</span><br><span class="line">33218 3 -1</span><br></pre></td></tr></table></figure><h4 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h4><ul><li>用结构体储存链表的值和下一个的地址，用数组下标来表示地址。</li><li>先把原顺序链表找出按地址值储存在数组中。</li><li>再按题目要求将重排后的链表地址的值储存在数组中。</li><li>按题目要求输出答案即可，记得处理最后一个结点的next值为-1。</li></ul><h4 id="AC代码：-2"><a href="#AC代码：-2" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line"><span class="type">int</span> next;</span><br><span class="line">&#125;p[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> head, n;</span><br><span class="line"><span class="type">int</span> add1[N], add2[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;head, &amp;n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a, b, c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">p[a].data = b;</span><br><span class="line">p[a].next = c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 处理顺序链表</span></span><br><span class="line"><span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(head != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">add1[k ++] = head;</span><br><span class="line">head = p[head].next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 有效地址的个数 t </span></span><br><span class="line"><span class="type">int</span> t = k;</span><br><span class="line">k = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 重排链表地址</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, j = t - <span class="number">1</span>; i &lt;= j; i ++, j -- )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i != j)</span><br><span class="line">&#123;</span><br><span class="line">add2[k ++] = add1[j];</span><br><span class="line">add2[k ++] = add1[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">add2[k ++] = add1[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 处理输出</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; k - <span class="number">1</span>; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!i)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%05d %d %05d&quot;</span>, add2[i], p[add2[i]].data, add2[i + <span class="number">1</span>]);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n%05d %d %05d&quot;</span>, add2[i], p[add2[i]].data, add2[i + <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n%05d %d -1&quot;</span>, add2[k - <span class="number">1</span>], p[add2[k - <span class="number">1</span>]].data);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-23图着色问题"><a href="#7-23图着色问题" class="headerlink" title="7-23图着色问题"></a>7-23图着色问题</h3><p>图着色问题是一个著名的NP完全问题。给定无向图<em>G</em>&#x3D;(<em>V</em>,<em>E</em>)，问可否用<em>K</em>种颜色为<em>V</em>中的每一个顶点分配一种颜色，使得不会有两个相邻顶点具有同一种颜色？</p><p>但本题并不是要你解决这个着色问题，而是对给定的一种颜色分配，请你判断这是否是图着色问题的一个解。</p><h4 id="输入格式：-3"><a href="#输入格式：-3" class="headerlink" title="输入格式："></a>输入格式：</h4><p>输入在第一行给出3个整数<em>V</em>（0&lt;<em>V</em>≤500）、<em>E</em>（≥0）和<em>K</em>（0&lt;<em>K</em>≤<em>V</em>），分别是无向图的顶点数、边数、以及颜色数。顶点和颜色都从1到<em>V</em>编号。随后<em>E</em>行，每行给出一条边的两个端点的编号。在图的信息给出之后，给出了一个正整数<em>N</em>（≤20），是待检查的颜色分配方案的个数。随后<em>N</em>行，每行顺次给出<em>V</em>个顶点的颜色（第<em>i</em>个数字表示第<em>i</em>个顶点的颜色），数字间以空格分隔。题目保证给定的无向图是合法的（即不存在自回路和重边）。</p><h4 id="输出格式：-3"><a href="#输出格式：-3" class="headerlink" title="输出格式："></a>输出格式：</h4><p>对每种颜色分配方案，如果是图着色问题的一个解则输出<code>Yes</code>，否则输出<code>No</code>，每句占一行。</p><h4 id="输入样例：-2"><a href="#输入样例：-2" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">6 8 3</span><br><span class="line">2 1</span><br><span class="line">1 3</span><br><span class="line">4 6</span><br><span class="line">2 5</span><br><span class="line">2 4</span><br><span class="line">5 4</span><br><span class="line">5 6</span><br><span class="line">3 6</span><br><span class="line">4</span><br><span class="line">1 2 3 3 1 2</span><br><span class="line">4 5 6 6 4 5</span><br><span class="line">1 2 3 4 5 6</span><br><span class="line">2 3 4 2 3 4</span><br></pre></td></tr></table></figure><h4 id="输出样例：-2"><a href="#输出样例：-2" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Yes</span><br><span class="line">Yes</span><br><span class="line">No</span><br><span class="line">No</span><br></pre></td></tr></table></figure><h4 id="思路：-2"><a href="#思路：-2" class="headerlink" title="思路："></a>思路：</h4><ul><li><p>邻接矩阵储存边，用BFS遍历每个结点相连的点，如果相连则比较一下起点和终点的颜色是否相同，如果相同则不是合法答案。</p></li><li><p>有一个点就是会去卡颜色个数，我用set去储存所有颜色的值，再用size()函数得到颜色个数，如果不等于k则不合法。</p></li></ul><h4 id="AC代码：-3"><a href="#AC代码：-3" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k, T;</span><br><span class="line"><span class="type">int</span> g[N][N];</span><br><span class="line"><span class="type">int</span> h[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;k);</span><br><span class="line"><span class="keyword">while</span>(m -- )</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a, b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">g[a][b] = <span class="number">1</span>;</span><br><span class="line">g[b][a] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line"><span class="keyword">while</span>(T -- )</span><br><span class="line">&#123;</span><br><span class="line">set&lt;<span class="type">int</span>&gt; se;</span><br><span class="line"><span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">h[i] = x;</span><br><span class="line">se.<span class="built_in">insert</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(se.<span class="built_in">size</span>() == k) res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(g[i][j])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(h[i] == h[j])</span><br><span class="line">res = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(res) <span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-24月饼"><a href="#7-24月饼" class="headerlink" title="7-24月饼"></a>7-24月饼</h3><p>月饼是中国人在中秋佳节时吃的一种传统食品，不同地区有许多不同风味的月饼。现给定所有种类月饼的库存量、总售价、以及市场的最大需求量，请你计算可以获得的最大收益是多少。</p><p>注意：销售时允许取出一部分库存。样例给出的情形是这样的：假如我们有 3 种月饼，其库存量分别为 18、15、10 万吨，总售价分别为 75、72、45 亿元。如果市场的最大需求量只有 20 万吨，那么我们最大收益策略应该是卖出全部 15 万吨第 2 种月饼、以及 5 万吨第 3 种月饼，获得 72 + 45&#x2F;2 &#x3D; 94.5（亿元）。</p><h4 id="输入格式：-4"><a href="#输入格式：-4" class="headerlink" title="输入格式："></a>输入格式：</h4><p>每个输入包含一个测试用例。每个测试用例先给出一个不超过 1000 的正整数 <em>N</em> 表示月饼的种类数、以及不超过 500（以万吨为单位）的正整数 <em>D</em> 表示市场最大需求量。随后一行给出 <em>N</em> 个正数表示每种月饼的库存量（以万吨为单位）；最后一行给出 <em>N</em> 个正数表示每种月饼的总售价（以亿元为单位）。数字间以空格分隔。</p><h4 id="输出格式：-4"><a href="#输出格式：-4" class="headerlink" title="输出格式："></a>输出格式：</h4><p>对每组测试用例，在一行中输出最大收益，以亿元为单位并精确到小数点后 2 位。</p><h4 id="输入样例：-3"><a href="#输入样例：-3" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3 20</span><br><span class="line">18 15 10</span><br><span class="line">75 72 45</span><br></pre></td></tr></table></figure><h4 id="输出样例：-3"><a href="#输出样例：-3" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">94.50</span><br></pre></td></tr></table></figure><h4 id="思路：-3"><a href="#思路：-3" class="headerlink" title="思路："></a>思路：</h4><ul><li>有点类似背包问题。</li><li>贪心，维护一个月饼单价的数组，然后按照月饼单价去排序，再贪心的去按照市场需求去选择贵的。</li><li>如果当前市场需求大于最贵的库存，直接加入答案，再减去v[i]。</li><li>如果当前市场需求小于最贵的库存，用除法去取出剩余量的月饼，并把答案加上这些月饼的收益。</li></ul><h4 id="AC代码：-4"><a href="#AC代码：-4" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">double</span> v[N], w[N], a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quick_sort</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> i = l - <span class="number">1</span>, j = r + <span class="number">1</span>;</span><br><span class="line"><span class="type">double</span> x = a[(l + r) / <span class="number">2</span>];</span><br><span class="line"><span class="keyword">while</span>(i &lt; j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">do</span> i ++; <span class="keyword">while</span>(a[i] &gt; x);</span><br><span class="line"><span class="keyword">do</span> j --; <span class="keyword">while</span>(a[j] &lt; x);</span><br><span class="line"><span class="keyword">if</span>(i &lt; j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">swap</span>(a[i], a[j]);</span><br><span class="line"><span class="built_in">swap</span>(v[i], v[j]);</span><br><span class="line"><span class="built_in">swap</span>(w[i], w[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">quick_sort</span>(l, j);</span><br><span class="line"><span class="built_in">quick_sort</span>(j + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;v[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;w[i]);</span><br><span class="line">a[i] = w[i] / v[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">quick_sort</span>(<span class="number">1</span>, n);</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= v[i])</span><br><span class="line">&#123;</span><br><span class="line">res += w[i];</span><br><span class="line">m -= v[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">res += (w[i] * m / v[i]);</span><br><span class="line">m -= v[i];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2lf\n&quot;</span>, res);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-25小字辈"><a href="#7-25小字辈" class="headerlink" title="7-25小字辈"></a>7-25小字辈</h3><p>本题给定一个庞大家族的家谱，要请你给出最小一辈的名单。</p><h4 id="输入格式：-5"><a href="#输入格式：-5" class="headerlink" title="输入格式："></a>输入格式：</h4><p>输入在第一行给出家族人口总数 N（不超过 100 000 的正整数） —— 简单起见，我们把家族成员从 1 到 N 编号。随后第二行给出 N 个编号，其中第 i 个编号对应第 i 位成员的父&#x2F;母。家谱中辈分最高的老祖宗对应的父&#x2F;母编号为 -1。一行中的数字间以空格分隔。</p><h4 id="输出格式：-5"><a href="#输出格式：-5" class="headerlink" title="输出格式："></a>输出格式：</h4><p>首先输出最小的辈分（老祖宗的辈分为 1，以下逐级递增）。然后在第二行按递增顺序输出辈分最小的成员的编号。编号间以一个空格分隔，行首尾不得有多余空格。</p><h4 id="输入样例：-4"><a href="#输入样例：-4" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">9</span><br><span class="line">2 6 5 5 -1 5 6 4 7</span><br></pre></td></tr></table></figure><h4 id="输出样例：-4"><a href="#输出样例：-4" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">1 9</span><br></pre></td></tr></table></figure><h4 id="思路：-4"><a href="#思路：-4" class="headerlink" title="思路："></a>思路：</h4><ul><li>有点像并查集，去查找祖宗结点顺便把辈分储存。</li><li>遍历每个点一遍，去看他的辈分，维护一个最小辈分。</li><li>遍历第二遍，把每一个辈分和最小辈分相同的点输出。</li></ul><h4 id="AC代码：-5"><a href="#AC代码：-5" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="comment">// p储存每个点的父结点，b储存每个点的辈分。</span></span><br><span class="line"><span class="type">int</span> p[N], b[N];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 找到辈分，并返回。</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p[x] == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">b[x] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> b[x];</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 如果辈分不存在，返回它父亲结点的辈分并加一，如果存在直接返回。</span></span><br><span class="line"><span class="keyword">if</span>(b[x] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">b[x] = <span class="built_in">f</span>(p[x]) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> b[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> b[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="keyword">sizeof</span> b);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n; i ++ )</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;p[i]);</span><br><span class="line"><span class="type">int</span> mb = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> m = <span class="built_in">f</span>(i);</span><br><span class="line">mb = <span class="built_in">max</span>(mb, m);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, mb);</span><br><span class="line"><span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(b[i] == mb)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(flag) <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-26名人堂与代金券"><a href="#7-26名人堂与代金券" class="headerlink" title="7-26名人堂与代金券"></a>7-26名人堂与代金券</h3><p>对于在中国大学MOOC（<a href="http://www.icourse163.org/">http://www.icourse163.org/</a> ）学习“数据结构”课程的学生，想要获得一张合格证书，总评成绩必须达到 60 分及以上，并且有另加福利：总评分在 [G, 100] 区间内者，可以得到 50 元 PAT 代金券；在 [60, G) 区间内者，可以得到 20 元PAT代金券。全国考点通用，一年有效。同时任课老师还会把总评成绩前 K 名的学生列入课程“名人堂”。本题就请你编写程序，帮助老师列出名人堂的学生，并统计一共发出了面值多少元的 PAT 代金券。</p><h4 id="输入格式：-6"><a href="#输入格式：-6" class="headerlink" title="输入格式："></a>输入格式：</h4><p>输入在第一行给出 3 个整数，分别是 N（不超过 10 000 的正整数，为学生总数）、G（在 (60,100) 区间内的整数，为题面中描述的代金券等级分界线）、K（不超过 100 且不超过 N 的正整数，为进入名人堂的最低名次）。接下来 N 行，每行给出一位学生的账号（长度不超过15位、不带空格的字符串）和总评成绩（区间 [0, 100] 内的整数），其间以空格分隔。题目保证没有重复的账号。</p><h4 id="输出格式：-6"><a href="#输出格式：-6" class="headerlink" title="输出格式："></a>输出格式：</h4><p>首先在一行中输出发出的 PAT 代金券的总面值。然后按总评成绩非升序输出进入名人堂的学生的名次、账号和成绩，其间以 1 个空格分隔。需要注意的是：成绩相同的学生享有并列的排名，排名并列时，按账号的字母序升序输出。</p><h4 id="输入样例：-5"><a href="#输入样例：-5" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">10 80 5</span><br><span class="line">cy@zju.edu.cn 78</span><br><span class="line">cy@pat-edu.com 87</span><br><span class="line">1001@qq.com 65</span><br><span class="line">uh-oh@163.com 96</span><br><span class="line">test@126.com 39</span><br><span class="line">anyone@qq.com 87</span><br><span class="line">zoe@mit.edu 80</span><br><span class="line">jack@ucla.edu 88</span><br><span class="line">bob@cmu.edu 80</span><br><span class="line">ken@163.com 70</span><br></pre></td></tr></table></figure><h4 id="输出样例：-5"><a href="#输出样例：-5" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">360</span><br><span class="line">1 uh-oh@163.com 96</span><br><span class="line">2 jack@ucla.edu 88</span><br><span class="line">3 anyone@qq.com 87</span><br><span class="line">3 cy@pat-edu.com 87</span><br><span class="line">5 bob@cmu.edu 80</span><br><span class="line">5 zoe@mit.edu 80</span><br></pre></td></tr></table></figure><h4 id="思路：-5"><a href="#思路：-5" class="headerlink" title="思路："></a>思路：</h4><ul><li>排序。</li><li>代金券的支出可以在读入数据时判断，如果在区间内直接加上相应的就好。</li><li>注意的是账号和成绩是同步排序的，如果成绩相同按照账号升序排列。</li><li>输出时注意的是名次的处理。</li></ul><h4 id="AC代码：-6"><a href="#AC代码：-6" class="headerlink" title="AC代码："></a>AC代码：</h4><p>O（n^2）这个提交超时了一个测试点。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k;</span><br><span class="line"><span class="type">int</span> grade[N];</span><br><span class="line"><span class="type">char</span> id[N][<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mysort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n - i; j ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(grade[j] &lt; grade[j + <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">swap</span>(grade[j], grade[j + <span class="number">1</span>]);</span><br><span class="line"><span class="built_in">swap</span>(id[j], id[j + <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(grade[j] == grade[j + <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(id[j], id[j + <span class="number">1</span>]) &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">swap</span>(grade[j], grade[j + <span class="number">1</span>]);</span><br><span class="line"><span class="built_in">swap</span>(id[j], id[j + <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;k);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s%d&quot;</span>, id[i], &amp;grade[i]);</span><br><span class="line">        <span class="keyword">if</span>(grade[i] &gt;= m)</span><br><span class="line">res += <span class="number">50</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(grade[i] &gt;= <span class="number">60</span>)</span><br><span class="line">res += <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">mysort</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理名次 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = k; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(grade[i] == grade[i + <span class="number">1</span>])</span><br><span class="line">k ++;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 答案输出 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, res);</span><br><span class="line"><span class="keyword">if</span>(k &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> t = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %s %d\n&quot;</span>, t, id[t], grade[t]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= k; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(grade[i] == grade[t])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %s %d\n&quot;</span>, t, id[i], grade[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">t = i;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %s %d\n&quot;</span>, t, id[i], grade[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用结构体和sort排序优化时间，不过结构体排序需要重载小于号或者手写cmp函数。</p><p>参考文章：<a href="https://www.cnblogs.com/junbaobei/p/10776066.html">https://www.cnblogs.com/junbaobei/p/10776066.html</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">grade</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> id[<span class="number">20</span>];</span><br><span class="line"><span class="type">int</span> g;</span><br><span class="line">&#125;p[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k;</span><br><span class="line"><span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(grade a, grade b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a.g == b.g)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">strcmp</span>(a.id, b.id) &lt; <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> a.g &gt; b.g;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a.g &gt; b.g;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;k);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s%d&quot;</span>, &amp;p[i].id, &amp;p[i].g);</span><br><span class="line"><span class="keyword">if</span>(p[i].g &gt;= m) res += <span class="number">50</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(p[i].g &gt;= <span class="number">60</span>)</span><br><span class="line">res += <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(p + <span class="number">1</span>, p + <span class="number">1</span> + n, cmp);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理名次</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = k; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(p[i].g == p[i + <span class="number">1</span>].g)</span><br><span class="line">k ++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 答案输出 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, res);</span><br><span class="line"><span class="keyword">if</span>(k &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> t = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %s %d\n&quot;</span>, t, p[t].id, p[t].g);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= k; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(p[i].g == p[t].g)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %s %d\n&quot;</span>, t, p[i].id, p[i].g);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">t = i;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %s %d\n&quot;</span>, t, p[i].id, p[i].g);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-27-用扑克牌计算24点"><a href="#7-27-用扑克牌计算24点" class="headerlink" title="7-27 用扑克牌计算24点"></a>7-27 用扑克牌计算24点</h3><p>一副扑克牌的每张牌表示一个数（J、Q、K 分别表示 11、12、13，两个司令都表示 6）。任取4 张牌，即得到 4 个 1~13 的数，请添加运算符（规定为加+ 减- 乘* 除&#x2F; 四种）使之成为一个运算式。每个数只能参与一次运算，4 个数顺序可以任意组合，4 个运算符任意取 3 个且可以重复取。运算遵从一定优先级别，可加括号控制，最终使运算结果为 24。请输出一种解决方案的表达式，用括号表示运算优先。如果没有一种解决方案，则输出 -1 表示无解。</p><h4 id="输入格式：-7"><a href="#输入格式：-7" class="headerlink" title="输入格式："></a>输入格式：</h4><p>输入在一行中给出 4 个整数，每个整数取值在 [1, 13]。</p><h4 id="输出格式：-7"><a href="#输出格式：-7" class="headerlink" title="输出格式："></a>输出格式：</h4><p>输出任一种解决方案的表达式，用括号表示运算优先。如果没有解决方案，请输出 -1。</p><h4 id="输入样例：-6"><a href="#输入样例：-6" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 3 12 12</span><br></pre></td></tr></table></figure><h4 id="输出样例：-6"><a href="#输出样例：-6" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((3-2)*12)+12</span><br></pre></td></tr></table></figure><h4 id="思路：-6"><a href="#思路：-6" class="headerlink" title="思路："></a>思路：</h4><ul><li>由题目可知数字有4个，符号4选3，括号有两对。</li><li>可以看出括号组合只有5种情况，可以列出来，然后暴力枚举数字和符号的组合，判断运算值是否为24</li><li><ul><li>((a op b) op c) op d;<br>    - (a op (b op c)) op d;<br>    - a op ((b op c) op d);<br>    - a op (b op (c op d));<br>    - (a op b) op (c op d);</li></ul></li></ul><h4 id="AC代码：-7"><a href="#AC代码：-7" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> p[N];</span><br><span class="line"><span class="type">char</span> op[] = &#123;<span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;/&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">fun</span><span class="params">(<span class="type">float</span> a, <span class="type">float</span> b, <span class="type">char</span> op)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(op == <span class="string">&#x27;+&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> a - b;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> a * b;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> a / b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">f1</span><span class="params">(<span class="type">float</span> a, <span class="type">float</span> b, <span class="type">float</span> c, <span class="type">float</span> d, <span class="type">char</span> op1, <span class="type">char</span> op2, <span class="type">char</span> op3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// ((a + b) + c) + d</span></span><br><span class="line"><span class="type">float</span> x, y, z;</span><br><span class="line">x = <span class="built_in">fun</span>(a, b, op1);</span><br><span class="line">y = <span class="built_in">fun</span>(x, c, op2);</span><br><span class="line">z = <span class="built_in">fun</span>(y, d ,op3);</span><br><span class="line"><span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">f2</span><span class="params">(<span class="type">float</span> a, <span class="type">float</span> b, <span class="type">float</span> c, <span class="type">float</span> d, <span class="type">char</span> op1, <span class="type">char</span> op2, <span class="type">char</span> op3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// (a + (b + c)) + d</span></span><br><span class="line"><span class="type">float</span> x, y, z;</span><br><span class="line">x = <span class="built_in">fun</span>(b, c, op2);</span><br><span class="line">y = <span class="built_in">fun</span>(a, x, op1);</span><br><span class="line">z = <span class="built_in">fun</span>(y, d ,op3);</span><br><span class="line"><span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">f3</span><span class="params">(<span class="type">float</span> a, <span class="type">float</span> b, <span class="type">float</span> c, <span class="type">float</span> d, <span class="type">char</span> op1, <span class="type">char</span> op2, <span class="type">char</span> op3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// a + ((b + c) + d)</span></span><br><span class="line"><span class="type">float</span> x, y, z;</span><br><span class="line">x = <span class="built_in">fun</span>(b, c, op2);</span><br><span class="line">y = <span class="built_in">fun</span>(x, d, op3);</span><br><span class="line">z = <span class="built_in">fun</span>(a, y, op1);</span><br><span class="line"><span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">f4</span><span class="params">(<span class="type">float</span> a, <span class="type">float</span> b, <span class="type">float</span> c, <span class="type">float</span> d, <span class="type">char</span> op1, <span class="type">char</span> op2, <span class="type">char</span> op3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// a + (b + (c + d))</span></span><br><span class="line"><span class="type">float</span> x, y, z;</span><br><span class="line">x = <span class="built_in">fun</span>(c, d, op3);</span><br><span class="line">y = <span class="built_in">fun</span>(b, x, op2);</span><br><span class="line">z = <span class="built_in">fun</span>(a, y, op1);</span><br><span class="line"><span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">f5</span><span class="params">(<span class="type">float</span> a, <span class="type">float</span> b, <span class="type">float</span> c, <span class="type">float</span> d, <span class="type">char</span> op1, <span class="type">char</span> op2, <span class="type">char</span> op3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// (a + b) + (c + d)</span></span><br><span class="line"><span class="type">float</span> x, y, z;</span><br><span class="line">x = <span class="built_in">fun</span>(a, b, op1);</span><br><span class="line">y = <span class="built_in">fun</span>(c, d, op3);</span><br><span class="line">z = <span class="built_in">fun</span>(x, y, op2);</span><br><span class="line"><span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 遍历符号组合</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cal</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c, <span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">f1</span>(a, b, c, d, op[i], op[j], op[k]) == <span class="number">24</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;((%d%c%d)%c%d)%c%d\n&quot;</span>, a, op[i], b, op[j], c, op[k], d);</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">f2</span>(a, b, c, d, op[i], op[j], op[k]) == <span class="number">24</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;(%d%c(%d%c%d))%c%d\n&quot;</span>, a, op[i], b, op[j], c, op[k], d);</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">f3</span>(a, b, c, d, op[i], op[j], op[k]) == <span class="number">24</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d%c((%d%c%d)%c%d)\n&quot;</span>, a, op[i], b, op[j], c, op[k], d);</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">f4</span>(a, b, c, d, op[i], op[j], op[k]) == <span class="number">24</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d%c(%d%c(%d%c%d))\n&quot;</span>, a, op[i], b, op[j], c, op[k], d);</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">f5</span>(a, b, c, d, op[i], op[j], op[k]) == <span class="number">24</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;(%d%c%d)%c(%d%c%d)\n&quot;</span>, a, op[i], b, op[j], c, op[k], d);</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;p[<span class="number">0</span>], &amp;p[<span class="number">1</span>], &amp;p[<span class="number">2</span>], &amp;p[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历数字组合</span></span><br><span class="line"><span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i == j) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i == k || j == k) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> t = <span class="number">0</span>; t &lt; <span class="number">4</span>; t ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i == t || j == t || k == t) <span class="keyword">continue</span>;</span><br><span class="line"><span class="type">int</span> a, b, c, d;</span><br><span class="line">a = p[i], b = p[j], c = p[k], d = p[t];</span><br><span class="line">flag = <span class="built_in">cal</span>(a, b, c, d);</span><br><span class="line"><span class="keyword">if</span>(flag) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!flag) <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-28-单身狗"><a href="#7-28-单身狗" class="headerlink" title="7-28 单身狗"></a>7-28 单身狗</h3><p>“单身狗”是中文对于单身人士的一种爱称。本题请你从上万人的大型派对中找出落单的客人，以便给予特殊关爱。</p><h4 id="输入格式：-8"><a href="#输入格式：-8" class="headerlink" title="输入格式："></a>输入格式：</h4><p>输入第一行给出一个正整数 N（≤50000），是已知夫妻&#x2F;伴侣的对数；随后 N 行，每行给出一对夫妻&#x2F;伴侣——为方便起见，每人对应一个 ID 号，为 5 位数字（从 00000 到 99999），ID 间以空格分隔；之后给出一个正整数 M（≤10000），为参加派对的总人数；随后一行给出这 M 位客人的 ID，以空格分隔。题目保证无人重婚或脚踩两条船。</p><h4 id="输出格式：-8"><a href="#输出格式：-8" class="headerlink" title="输出格式："></a>输出格式：</h4><p>首先第一行输出落单客人的总人数；随后第二行按 ID 递增顺序列出落单的客人。ID 间用 1 个空格分隔，行的首尾不得有多余空格。</p><h4 id="输入样例：-7"><a href="#输入样例：-7" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">11111 22222</span><br><span class="line">33333 44444</span><br><span class="line">55555 66666</span><br><span class="line">7</span><br><span class="line">55555 44444 10000 88888 22222 11111 23333</span><br></pre></td></tr></table></figure><h4 id="输出样例：-7"><a href="#输出样例：-7" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">10000 23333 44444 55555 88888</span><br></pre></td></tr></table></figure><h4 id="思路：-7"><a href="#思路：-7" class="headerlink" title="思路："></a>思路：</h4><ul><li>刚看到还以为就是看客人中谁没伴侣，写完以后一试，样例没过，才发现是题目看错了。要找的是客人中有没有和伴侣一起来的人。</li><li>每个人的ID可以用数组下标来表示，然后用 f 数组来储存每个人的伴侣。</li><li>输入时用 a 数组储存每个人出现的次数，如果有伴侣则同时把伴侣的次数加1。</li><li>最后再次遍历一遍客人，看出现次数不为 2 的就是没有带伴侣的人。</li><li>用 vector 储存答案，排序输出即可。</li></ul><h4 id="AC代码：-8"><a href="#AC代码：-8" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="comment">// f储存情侣, p储存客人,</span></span><br><span class="line"><span class="type">int</span> f[N], p[N], a[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; dogs;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a, b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">f[a] = b;</span><br><span class="line">f[b] = a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">p[i] = x;</span><br><span class="line">a[x] ++;</span><br><span class="line">a[f[x]] ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[p[i]] != <span class="number">2</span>)</span><br><span class="line">dogs.<span class="built_in">push_back</span>(p[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(dogs.<span class="built_in">begin</span>(), dogs.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 答案输出</span></span><br><span class="line"><span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, dogs.<span class="built_in">size</span>());</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; dogs.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(flag) <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%05d&quot;</span>, dogs[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-29-冰岛人"><a href="#7-29-冰岛人" class="headerlink" title="7-29 冰岛人"></a>7-29 冰岛人</h3><p>2018年世界杯，冰岛队因1:1平了强大的阿根廷队而一战成名。好事者发现冰岛人的名字后面似乎都有个“松”（son），于是有网友科普如下：</p><p><img src="https://images.ptausercontent.com/73226e55-2588-4d45-b049-a6e72de90872.JPG" alt="iceland.JPG"></p><p>冰岛人沿用的是维京人古老的父系姓制，孩子的姓等于父亲的名加后缀，如果是儿子就加 sson，女儿则加 sdottir。因为冰岛人口较少，为避免近亲繁衍，本地人交往前先用个 App 查一下两人祖宗若干代有无联系。本题就请你实现这个 App 的功能。</p><h4 id="输入格式：-9"><a href="#输入格式：-9" class="headerlink" title="输入格式："></a>输入格式：</h4><p>输入首先在第一行给出一个正整数 <em>N</em>（1&lt;<em>N</em>≤105），为当地人口数。随后 <em>N</em> 行，每行给出一个人名，格式为：<code>名 姓（带性别后缀）</code>，两个字符串均由不超过 20 个小写的英文字母组成。维京人后裔是可以通过姓的后缀判断其性别的，其他人则是在姓的后面加 <code>m</code> 表示男性、<code>f</code> 表示女性。题目保证给出的每个维京家族的起源人都是男性。</p><p>随后一行给出正整数 <em>M</em>，为查询数量。随后 <em>M</em> 行，每行给出一对人名，格式为：<code>名1 姓1 名2 姓2</code>。注意：这里的<code>姓</code>是不带后缀的。四个字符串均由不超过 20 个小写的英文字母组成。</p><p>题目保证不存在两个人是同名的。</p><h4 id="输出格式：-9"><a href="#输出格式：-9" class="headerlink" title="输出格式："></a>输出格式：</h4><p>对每一个查询，根据结果在一行内显示以下信息：</p><ul><li>若两人为异性，且五代以内无公共祖先，则输出 <code>Yes</code>；</li><li>若两人为异性，但五代以内（不包括第五代）有公共祖先，则输出 <code>No</code>；</li><li>若两人为同性，则输出 <code>Whatever</code>；</li><li>若有一人不在名单内，则输出 <code>NA</code>。</li></ul><p>所谓“五代以内无公共祖先”是指两人的公共祖先（如果存在的话）必须比任何一方的曾祖父辈分高。</p><h4 id="输入样例：-8"><a href="#输入样例：-8" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">15</span><br><span class="line">chris smithm</span><br><span class="line">adam smithm</span><br><span class="line">bob adamsson</span><br><span class="line">jack chrissson</span><br><span class="line">bill chrissson</span><br><span class="line">mike jacksson</span><br><span class="line">steve billsson</span><br><span class="line">tim mikesson</span><br><span class="line">april mikesdottir</span><br><span class="line">eric stevesson</span><br><span class="line">tracy timsdottir</span><br><span class="line">james ericsson</span><br><span class="line">patrick jacksson</span><br><span class="line">robin patricksson</span><br><span class="line">will robinsson</span><br><span class="line">6</span><br><span class="line">tracy tim james eric</span><br><span class="line">will robin tracy tim</span><br><span class="line">april mike steve bill</span><br><span class="line">bob adam eric steve</span><br><span class="line">tracy tim tracy tim</span><br><span class="line">x man april mikes</span><br></pre></td></tr></table></figure><h4 id="输出样例：-8"><a href="#输出样例：-8" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Yes</span><br><span class="line">No</span><br><span class="line">No</span><br><span class="line">Whatever</span><br><span class="line">Whatever</span><br><span class="line">NA</span><br></pre></td></tr></table></figure><h4 id="思路：-8"><a href="#思路：-8" class="headerlink" title="思路："></a>思路：</h4><ul><li>维京人可以通过姓来判断性别，普通人则需要看最后是m，或者 f。</li><li>用map来储存每个人的名字，性别，父亲。</li><li>把性别和父亲储存在一个pair里面。</li><li>结果输出有三种：不存在、同性、异性。</li><li>前两种直接可以通过查找名字和性别直接得出，如果是异性，则需要去判断5代之内是否有血缘关系。</li><li>把每个人的祖先找到，然后遍历5代内的祖先，是否有血缘关系。</li><li><ul><li>有可能出现的情况包括：A的6代祖先是B的3代祖先。<br>    - A和B的共同祖先在5代之外，不过遍历有可能会超时，所以要判断在超过5代时，然后break。</li></ul></li></ul><h4 id="AC代码：-9"><a href="#AC代码：-9" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">char</span>, string&gt; PSS;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">map&lt;string, PSS&gt; ma;</span><br><span class="line">vector&lt;string&gt; d1, d2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 处理输入 </span></span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">string a, b;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line"><span class="keyword">if</span>(b[b.<span class="built_in">size</span>() - <span class="number">1</span>] == <span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">ma[a] = &#123;<span class="string">&#x27;m&#x27;</span>, b.<span class="built_in">substr</span>(<span class="number">0</span>, b.<span class="built_in">size</span>() - <span class="number">4</span>)&#125;;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(b[b.<span class="built_in">size</span>() - <span class="number">1</span>] == <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">ma[a] = &#123;<span class="string">&#x27;f&#x27;</span>, b.<span class="built_in">substr</span>(<span class="number">0</span>, b.<span class="built_in">size</span>() - <span class="number">7</span>)&#125;;</span><br><span class="line"><span class="keyword">else</span> ma[a].x = b[b.<span class="built_in">size</span>() - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 处理询问 </span></span><br><span class="line">cin &gt;&gt; m;</span><br><span class="line"><span class="keyword">while</span>(m -- )</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> flag = <span class="number">1</span>;</span><br><span class="line">string a1, a2, b1, b2;</span><br><span class="line">cin &gt;&gt; a1 &gt;&gt; a2 &gt;&gt; b1 &gt;&gt; b2;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不存在 </span></span><br><span class="line"><span class="keyword">if</span>(ma.<span class="built_in">find</span>(a1) == ma.<span class="built_in">end</span>() || ma.<span class="built_in">find</span>(b1) == ma.<span class="built_in">end</span>())</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;NA&quot;</span>);</span><br><span class="line"><span class="comment">// 同性 </span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ma[a1].x == ma[b1].x)</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Whatever&quot;</span>);</span><br><span class="line"><span class="comment">// 异性 </span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">string A, B;</span><br><span class="line">A = a1, B = b1; </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; !A.<span class="built_in">empty</span>(); i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;i = &quot; &lt;&lt; i &lt;&lt; endl;</span></span><br><span class="line">B = b1;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; !B.<span class="built_in">empty</span>(); j ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//cout &lt;&lt; A &lt;&lt; &#x27; &#x27; &lt;&lt; B &lt;&lt; endl; </span></span><br><span class="line"><span class="keyword">if</span>(i &gt;= <span class="number">5</span> &amp;&amp; j &gt;= <span class="number">5</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span>(A == B &amp;&amp; (i &lt; <span class="number">5</span> || j &lt; <span class="number">5</span>))</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">B = ma[B].y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!flag) <span class="keyword">break</span>;</span><br><span class="line">A = ma[A].y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(flag) <span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-30-深入虎穴"><a href="#7-30-深入虎穴" class="headerlink" title="7-30 深入虎穴"></a>7-30 深入虎穴</h3><p>著名的王牌间谍 007 需要执行一次任务，获取敌方的机密情报。已知情报藏在一个地下迷宫里，迷宫只有一个入口，里面有很多条通路，每条路通向一扇门。每一扇门背后或者是一个房间，或者又有很多条路，同样是每条路通向一扇门…… 他的手里有一张表格，是其他间谍帮他收集到的情报，他们记下了每扇门的编号，以及这扇门背后的每一条通路所到达的门的编号。007 发现不存在两条路通向同一扇门。</p><p>内线告诉他，情报就藏在迷宫的最深处。但是这个迷宫太大了，他需要你的帮助 —— 请编程帮他找出距离入口最远的那扇门。</p><h4 id="输入格式：-10"><a href="#输入格式：-10" class="headerlink" title="输入格式："></a>输入格式：</h4><p>输入首先在一行中给出正整数 <em>N</em>（&lt;105），是门的数量。最后 <em>N</em> 行，第 <em>i</em> 行（1≤<em>i</em>≤<em>N</em>）按以下格式描述编号为 <em>i</em> 的那扇门背后能通向的门：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">K D[1] D[2] ... D[K]</span><br></pre></td></tr></table></figure><p>其中 <code>K</code> 是通道的数量，其后是每扇门的编号。</p><h4 id="输出格式：-10"><a href="#输出格式：-10" class="headerlink" title="输出格式："></a>输出格式：</h4><p>在一行中输出距离入口最远的那扇门的编号。题目保证这样的结果是唯一的。</p><h4 id="输入样例：-9"><a href="#输入样例：-9" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">13</span><br><span class="line">3 2 3 4</span><br><span class="line">2 5 6</span><br><span class="line">1 7</span><br><span class="line">1 8</span><br><span class="line">1 9</span><br><span class="line">0</span><br><span class="line">2 11 10</span><br><span class="line">1 13</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">1 12</span><br><span class="line">0</span><br><span class="line">0</span><br></pre></td></tr></table></figure><h4 id="输出样例：-9"><a href="#输出样例：-9" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12</span><br></pre></td></tr></table></figure><h4 id="思路：-9"><a href="#思路：-9" class="headerlink" title="思路："></a>思路：</h4><ul><li>并查集，dfs和bfs应该也可以做。</li><li>可以看出来的是答案肯定在k &#x3D; 0 的门里面，用vector储存这些点。</li><li>定义两个数组，一个用来存这个点到1号点的距离，另一个来存这个点的前一个点，也就是可以通向这个门的门，题目给出不存在两条路通向同一个门。</li><li>遍历vector里面储存的点，去找他们到1号点的距离，如果大于就直接更新一下最远距离和最远距离的点，最后直接输出答案。</li></ul><h4 id="AC代码：-10"><a href="#AC代码：-10" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> p[N], dist[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向上查找起点 </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(dist[x] != <span class="number">-1</span>) <span class="keyword">return</span> dist[x];</span><br><span class="line"><span class="keyword">if</span>(x == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(!x) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">dist[x] = <span class="built_in">f</span>(p[x]) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> dist[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dist, <span class="number">-1</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;k);</span><br><span class="line"><span class="keyword">if</span>(!k) res.<span class="built_in">push_back</span>(i);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= k; j ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">p[x] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> mre = <span class="number">0</span>, mx = <span class="number">1</span>;</span><br><span class="line">dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; res.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x = res[i];</span><br><span class="line">dist[x] = <span class="built_in">f</span>(p[x]);</span><br><span class="line"><span class="keyword">if</span>(dist[x] &gt; mre)</span><br><span class="line">&#123;</span><br><span class="line">mre = dist[x];</span><br><span class="line">mx = x; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, mx);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-31-最大子序列之和"><a href="#7-31-最大子序列之和" class="headerlink" title="7-31 最大子序列之和"></a>7-31 最大子序列之和</h3><h4 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h4><p>给一个序列，求序列的最大子序列之和，并输出最大值为多少、子序列的起点和终点的数。数据范围是10000。</p><h4 id="Maximum-Subsequence-Sum"><a href="#Maximum-Subsequence-Sum" class="headerlink" title="Maximum Subsequence Sum"></a>Maximum Subsequence Sum</h4><p>Given a sequence of <em>K</em> integers { <em>N</em>1, <em>N</em>2, …, <em>N**K</em> }. A continuous subsequence is defined to be { <em>N**i</em>, <em>N**i</em>+1, …, <em>N**j</em> } where 1≤<em>i</em>≤<em>j</em>≤<em>K</em>. The Maximum Subsequence is the continuous subsequence which has the largest sum of its elements. For example, given sequence { -2, 11, -4, 13, -5, -2 }, its maximum subsequence is { 11, -4, 13 } with the largest sum being 20.</p><p>Now you are supposed to find the largest sum, together with the first and the last numbers of the maximum subsequence.</p><h4 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h4><p>Each input file contains one test case. Each case occupies two lines. The first line contains a positive integer <em>K</em> (≤10000). The second line contains <em>K</em> numbers, separated by a space.</p><h4 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h4><p>For each test case, output in one line the largest sum, together with the first and the last numbers of the maximum subsequence. The numbers must be separated by one space, but there must be no extra space at the end of a line. In case that the maximum subsequence is not unique, output the one with the smallest indices <em>i</em> and <em>j</em> (as shown by the sample case). If all the <em>K</em> numbers are negative, then its maximum sum is defined to be 0, and you are supposed to output the first and the last numbers of the whole sequence.</p><h4 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">-10 1 2 3 4 -5 -23 3 7 -21</span><br></pre></td></tr></table></figure><h4 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10 1 4</span><br></pre></td></tr></table></figure><h4 id="思路：-10"><a href="#思路：-10" class="headerlink" title="思路："></a>思路：</h4><ul><li>暴力枚举出来所有的子序列，并求和。</li><li>如果和大于m就更新一下m和右端点。</li><li>最后直接输出最大值m和左右端点即可。</li><li>注：有一个点就是左端点的更新，每次循环的时候置t &#x3D; 1，如果从这个 i 开始的子序列的和大于前面的以后更新一下 L ，然后置 t &#x3D; 0，在这层循环里当再次更新时只需要更新右端点即可。</li><li>也可以用动态规划，f[i] 表示以第 i 个数字结尾的子序列的和的最大值。状态转移只有这个数字选和不选，f[i] &#x3D; max(f[i], a[i]);</li></ul><h4 id="AC代码：-11"><a href="#AC代码：-11" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> flag = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line"><span class="keyword">if</span>(a[i] &gt;= <span class="number">0</span>) flag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> l = <span class="number">0</span>, r = <span class="number">0</span>, m = <span class="number">-1e9</span>;</span><br><span class="line"><span class="type">int</span> t = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">t = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = i; j &lt; n; j ++ )</span><br><span class="line">&#123;</span><br><span class="line">sum += a[j];</span><br><span class="line"><span class="keyword">if</span>(sum &gt; m)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(t)</span><br><span class="line">&#123;</span><br><span class="line">l = i;</span><br><span class="line">t = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">m = sum;</span><br><span class="line">r = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(flag) <span class="built_in">printf</span>(<span class="string">&quot;0 %d %d\n&quot;</span>, a[<span class="number">0</span>], a[n - <span class="number">1</span>]);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>, m, a[l], a[r]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-32-链表翻转"><a href="#7-32-链表翻转" class="headerlink" title="7-32 链表翻转"></a>7-32 链表翻转</h3><h4 id="题目大意：-1"><a href="#题目大意：-1" class="headerlink" title="题目大意："></a>题目大意：</h4><p>给定长度为L 的链表，翻转每K个长度的链表，再输出重排以后的链表。</p><p>比如1234567890，K &#x3D; 4，翻转之后应该为4321876590。</p><h4 id="Reversing-Linked-List"><a href="#Reversing-Linked-List" class="headerlink" title="Reversing Linked List"></a>Reversing Linked List</h4><p>Given a constant <em>K</em> and a singly linked list <em>L</em>, you are supposed to reverse the links of every <em>K</em> elements on <em>L</em>. For example, given <em>L</em> being 1→2→3→4→5→6, if <em>K</em>&#x3D;3, then you must output 3→2→1→6→5→4; if <em>K</em>&#x3D;4, you must output 4→3→2→1→5→6.</p><h4 id="Input-Specification-1"><a href="#Input-Specification-1" class="headerlink" title="Input Specification:"></a>Input Specification:</h4><p>Each input file contains one test case. For each case, the first line contains the address of the first node, a positive <em>N</em> (≤105) which is the total number of nodes, and a positive <em>K</em> (≤<em>N</em>) which is the length of the sublist to be reversed. The address of a node is a 5-digit nonnegative integer, and NULL is represented by -1.</p><p>Then <em>N</em> lines follow, each describes a node in the format:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Address Data Next</span><br></pre></td></tr></table></figure><p>where <code>Address</code> is the position of the node, <code>Data</code> is an integer, and <code>Next</code> is the position of the next node.</p><h4 id="Output-Specification-1"><a href="#Output-Specification-1" class="headerlink" title="Output Specification:"></a>Output Specification:</h4><p>For each case, output the resulting ordered linked list. Each node occupies a line, and is printed in the same format as in the input.</p><h4 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input:"></a>Sample Input:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">00100 6 4</span><br><span class="line">00000 4 99999</span><br><span class="line">00100 1 12309</span><br><span class="line">68237 6 -1</span><br><span class="line">33218 3 00000</span><br><span class="line">99999 5 68237</span><br><span class="line">12309 2 33218</span><br></pre></td></tr></table></figure><h4 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output:"></a>Sample Output:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">00000 4 33218</span><br><span class="line">33218 3 12309</span><br><span class="line">12309 2 00100</span><br><span class="line">00100 1 99999</span><br><span class="line">99999 5 68237</span><br><span class="line">68237 6 -1</span><br></pre></td></tr></table></figure><h4 id="思路：-11"><a href="#思路：-11" class="headerlink" title="思路："></a>思路：</h4><ul><li>这个题目和 7-22 一样，用数组下标看作地址，储存结点的值和next值。</li><li>通过next和初始地址找出原链表。</li><li>按题意翻转链表，输出结果即可，注意最后一个结点的next是- 1。</li><li>注：有一个卡的点是会出现不在原链表中的点，所以找到原链表后要更新一下需要操作的次数，即 n &#x3D; cnt。</li></ul><h4 id="AC代码：-12"><a href="#AC代码：-12" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line"><span class="type">int</span> next;</span><br><span class="line">&#125;p[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> add, n, k;</span><br><span class="line"><span class="type">int</span> add1[N], add2[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 处理输入 </span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;add, &amp;n, &amp;k);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a, b, c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">p[a].data = b;</span><br><span class="line">p[a].next = c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 找出原序列</span></span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(add != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">add1[++ cnt] = add;</span><br><span class="line">add = p[add].next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 翻转序列</span></span><br><span class="line"><span class="type">int</span> t = <span class="number">0</span>, tem = k;</span><br><span class="line">n = cnt;<span class="comment">// 在链表上的点的数量 </span></span><br><span class="line">cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(tem &lt;= n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = tem; i &gt;= t + <span class="number">1</span>; i -- )</span><br><span class="line">add2[++ cnt] = add1[i];</span><br><span class="line">t = tem;</span><br><span class="line">tem += k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = t + <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">add2[++ cnt] = add1[i];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出答案</span></span><br><span class="line"><span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; cnt; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(flag) <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%05d %d %05d&quot;</span>, add2[i], p[add2[i]], add2[i + <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag) <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%05d %d -1&quot;</span>, add2[cnt], p[add2[cnt]]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-33-判断出栈序列"><a href="#7-33-判断出栈序列" class="headerlink" title="7-33 判断出栈序列"></a>7-33 判断出栈序列</h3><h4 id="题目大意：-2"><a href="#题目大意：-2" class="headerlink" title="题目大意："></a>题目大意：</h4><p>给定一个长度为n的序列按123···n入栈，判断出栈序列是否成立，m是栈的大小，k是询问数量。</p><h4 id="Pop-Sequence"><a href="#Pop-Sequence" class="headerlink" title="Pop Sequence"></a>Pop Sequence</h4><p>Given a stack which can keep <em>M</em> numbers at most. Push <em>N</em> numbers in the order of 1, 2, 3, …, <em>N</em> and pop randomly. You are supposed to tell if a given sequence of numbers is a possible pop sequence of the stack. For example, if <em>M</em> is 5 and <em>N</em> is 7, we can obtain 1, 2, 3, 4, 5, 6, 7 from the stack, but not 3, 2, 1, 7, 5, 6, 4.</p><h4 id="Input-Specification-2"><a href="#Input-Specification-2" class="headerlink" title="Input Specification:"></a>Input Specification:</h4><p>Each input file contains one test case. For each case, the first line contains 3 numbers (all no more than 1000): <em>M</em> (the maximum capacity of the stack), <em>N</em> (the length of push sequence), and <em>K</em> (the number of pop sequences to be checked). Then <em>K</em> lines follow, each contains a pop sequence of <em>N</em> numbers. All the numbers in a line are separated by a space.</p><h4 id="Output-Specification-2"><a href="#Output-Specification-2" class="headerlink" title="Output Specification:"></a>Output Specification:</h4><p>For each pop sequence, print in one line “YES” if it is indeed a possible pop sequence of the stack, or “NO” if not.</p><h4 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input:"></a>Sample Input:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5 7 5</span><br><span class="line">1 2 3 4 5 6 7</span><br><span class="line">3 2 1 7 5 6 4</span><br><span class="line">7 6 5 4 3 2 1</span><br><span class="line">5 6 4 3 7 2 1</span><br><span class="line">1 7 6 5 4 3 2</span><br></pre></td></tr></table></figure><h4 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output:"></a>Sample Output:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">YES</span><br><span class="line">NO</span><br><span class="line">NO</span><br><span class="line">YES</span><br><span class="line">NO</span><br></pre></td></tr></table></figure><h4 id="思路：-12"><a href="#思路：-12" class="headerlink" title="思路："></a>思路：</h4><ul><li>用栈去模拟序列入栈出栈。</li><li>用数组来储存询问的序列，然后按123·····n的顺序依次入栈，每次入栈以后判断栈的大小是否符合，然后判断栈顶元素是否等于数组下标元素，如果等于就弹出栈顶再把下标加一，最后判断栈是否为空，不为空，则不是正确的序列。</li></ul><h4 id="AC代码：-13"><a href="#AC代码：-13" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;m, &amp;n, &amp;k);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(k -- )</span><br><span class="line">&#123;</span><br><span class="line">stack&lt;<span class="type">int</span>&gt; stk;</span><br><span class="line"><span class="type">int</span> j = <span class="number">1</span>, flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">stk.<span class="built_in">push</span>(i);</span><br><span class="line">            <span class="comment">// 判断栈的大小</span></span><br><span class="line"><span class="keyword">if</span>(stk.<span class="built_in">size</span>() &gt; m)</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">            <span class="comment">// 判断是否出栈</span></span><br><span class="line"><span class="keyword">if</span>(!stk.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(!stk.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[j] == stk.<span class="built_in">top</span>())</span><br><span class="line">&#123;</span><br><span class="line">stk.<span class="built_in">pop</span>();</span><br><span class="line">j ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">// 判断栈是否为空</span></span><br><span class="line"><span class="keyword">if</span>(!stk.<span class="built_in">empty</span>()) flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(flag) <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-34-树的同构"><a href="#7-34-树的同构" class="headerlink" title="7-34 树的同构"></a>7-34 树的同构</h3><p>给定两棵树T1和T2。如果T1可以通过若干次左右孩子互换就变成T2，则我们称两棵树是“同构”的。例如图1给出的两棵树就是同构的，因为我们把其中一棵树的结点A、B、G的左右孩子互换后，就得到另外一棵树。而图2就不是同构的。</p><table><thead><tr><th><img src="https://images.ptausercontent.com/0c8bbacf-d64e-4c6d-8d4e-1249e33fb0b1.jpg" alt="fig1.jpg"></th></tr></thead><tbody><tr><td>图1</td></tr><tr><td><img src="https://images.ptausercontent.com/29" alt="img"></td></tr><tr><td>图2</td></tr></tbody></table><p>现给定两棵树，请你判断它们是否是同构的。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h4><p>输入给出2棵二叉树树的信息。对于每棵树，首先在一行中给出一个非负整数<em>N</em> (≤10)，即该树的结点数（此时假设结点从0到<em>N</em>−1编号）；随后<em>N</em>行，第<em>i</em>行对应编号第<em>i</em>个结点，给出该结点中存储的1个英文大写字母、其左孩子结点的编号、右孩子结点的编号。如果孩子结点为空，则在相应位置上给出“-”。给出的数据间用一个空格分隔。注意：题目保证每个结点中存储的字母是不同的。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h4><p>如果两棵树是同构的，输出“Yes”，否则输出“No”。</p><h4 id="输入样例1（图1）："><a href="#输入样例1（图1）：" class="headerlink" title="输入样例1（图1）："></a>输入样例1（图1）：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">A 1 2</span><br><span class="line">B 3 4</span><br><span class="line">C 5 -</span><br><span class="line">D - -</span><br><span class="line">E 6 -</span><br><span class="line">G 7 -</span><br><span class="line">F - -</span><br><span class="line">H - -</span><br><span class="line">8</span><br><span class="line">G - 4</span><br><span class="line">B 7 6</span><br><span class="line">F - -</span><br><span class="line">A 5 1</span><br><span class="line">H - -</span><br><span class="line">C 0 -</span><br><span class="line">D - -</span><br><span class="line">E 2 -</span><br></pre></td></tr></table></figure><h4 id="输出样例1"><a href="#输出样例1" class="headerlink" title="输出样例1:"></a>输出样例1:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yes</span><br></pre></td></tr></table></figure><h4 id="输入样例2（图2）："><a href="#输入样例2（图2）：" class="headerlink" title="输入样例2（图2）："></a>输入样例2（图2）：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">B 5 7</span><br><span class="line">F - -</span><br><span class="line">A 0 3</span><br><span class="line">C 6 -</span><br><span class="line">H - -</span><br><span class="line">D - -</span><br><span class="line">G 4 -</span><br><span class="line">E 1 -</span><br><span class="line">8</span><br><span class="line">D 6 -</span><br><span class="line">B 5 -</span><br><span class="line">E - -</span><br><span class="line">H - -</span><br><span class="line">C 0 2</span><br><span class="line">G - 3</span><br><span class="line">F - -</span><br><span class="line">A 1 4</span><br></pre></td></tr></table></figure><h4 id="输出样例2"><a href="#输出样例2" class="headerlink" title="输出样例2:"></a>输出样例2:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">No</span><br></pre></td></tr></table></figure><h4 id="思路：-13"><a href="#思路：-13" class="headerlink" title="思路："></a>思路：</h4><ul><li>用结构体储存树的结点，维护一个p数组去判断树是否是合法的树，并返回树根的结点编号。</li><li>递归处理去判断树是否同构：</li><li><ul><li>1、两个数都不存在即根节点编号为-1，肯定是同构的。<br>    - 2、一个存在一个不存在，不同构。<br>    - 3、两个根节点的值不一样，不同构。<br>    - 4、如果结点值相同：<br>    - - 1、左子树如果都不存在，返回右子树是否同构。<br>            - 2、左子树存在并且左两个左子树值相等，判断左子树的左子树和右子树是否同构。<br>            - 3、交叉判断，左子树存在但值不相等，判断（T1的左子树和T2的右子树）和（T2的右子树和T1的左子树）是否同时同构。</li></ul></li></ul><h4 id="AC代码：-14"><a href="#AC代码：-14" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Tree</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> data;</span><br><span class="line"><span class="type">int</span> l;</span><br><span class="line"><span class="type">int</span> r;</span><br><span class="line">&#125;T1[N], T2[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">build</span><span class="params">(Tree T[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> root = <span class="number">-1</span>, p[N];</span><br><span class="line"><span class="built_in">memset</span>(p, <span class="number">0</span>, <span class="keyword">sizeof</span> p);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> x;</span><br><span class="line"><span class="type">int</span> t = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">while</span>(t)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;x);</span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">if</span>(t == <span class="number">3</span>) T[i].data = x;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(t == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(x == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">T[i].l = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">T[i].l = x - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">p[T[i].l] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(x == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">T[i].r = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">T[i].r = x - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">p[T[i].r] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">t --;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line"><span class="keyword">if</span>(!p[i])<span class="keyword">return</span> i;</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">isSame</span><span class="params">(<span class="type">int</span> t1, <span class="type">int</span> t2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t1 == <span class="number">-1</span> &amp;&amp; t2 == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>((t1 == <span class="number">-1</span> &amp;&amp; t2 != <span class="number">-1</span>) || (t1 != <span class="number">-1</span> &amp;&amp; t2 == <span class="number">-1</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(T1[t1].data != T2[t2].data) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(T1[t1].l == <span class="number">-1</span> &amp;&amp; T2[t2].l == <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">isSame</span>(T1[t1].r, T2[t2].r);</span><br><span class="line"><span class="keyword">if</span>(T1[t1].l != <span class="number">-1</span> &amp;&amp; T2[t2].l != <span class="number">-1</span> &amp;&amp; T1[T1[t1].l].data == T2[T2[t2].l].data)</span><br><span class="line"><span class="keyword">return</span> (<span class="built_in">isSame</span>(T1[t1].l, T2[t2].l) &amp;&amp; <span class="built_in">isSame</span>(T1[t1].r, T2[t2].r));</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">isSame</span>(T1[t1].l, T2[t2].r) &amp;&amp; <span class="built_in">isSame</span>(T1[t1].r, T2[t2].l);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> t1, t2;</span><br><span class="line">t1 = <span class="built_in">build</span>(T1);</span><br><span class="line">t2 = <span class="built_in">build</span>(T2);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">isSame</span>(t1, t2))</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-35-输出叶子结点"><a href="#7-35-输出叶子结点" class="headerlink" title="7-35 输出叶子结点"></a>7-35 输出叶子结点</h3><h4 id="题目大意：-3"><a href="#题目大意：-3" class="headerlink" title="题目大意："></a>题目大意：</h4><p>给定一颗树，按照从上到下从左到右的顺序输出所有的叶子结点，</p><h4 id="List-Leaves"><a href="#List-Leaves" class="headerlink" title="List Leaves"></a>List Leaves</h4><p>Given a tree, you are supposed to list all the leaves in the order of top down, and left to right.</p><h4 id="Input-Specification-3"><a href="#Input-Specification-3" class="headerlink" title="Input Specification:"></a>Input Specification:</h4><p>Each input file contains one test case. For each case, the first line gives a positive integer <em>N</em> (≤10) which is the total number of nodes in the tree – and hence the nodes are numbered from 0 to <em>N</em>−1. Then <em>N</em> lines follow, each corresponds to a node, and gives the indices of the left and right children of the node. If the child does not exist, a “-“ will be put at the position. Any pair of children are separated by a space.</p><h4 id="Output-Specification-3"><a href="#Output-Specification-3" class="headerlink" title="Output Specification:"></a>Output Specification:</h4><p>For each test case, print in one line all the leaves’ indices in the order of top down, and left to right. There must be exactly one space between any adjacent numbers, and no extra space at the end of the line.</p><h4 id="Sample-Input-3"><a href="#Sample-Input-3" class="headerlink" title="Sample Input:"></a>Sample Input:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">1 -</span><br><span class="line">- -</span><br><span class="line">0 -</span><br><span class="line">2 7</span><br><span class="line">- -</span><br><span class="line">- -</span><br><span class="line">5 -</span><br><span class="line">4 6</span><br></pre></td></tr></table></figure><h4 id="Sample-Output-3"><a href="#Sample-Output-3" class="headerlink" title="Sample Output:"></a>Sample Output:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4 1 5</span><br></pre></td></tr></table></figure><h4 id="思路：-14"><a href="#思路：-14" class="headerlink" title="思路："></a>思路：</h4><ul><li>用 p 数组储存结点是否有父结点，然后遍历返回得到树的根节点。</li><li>BFS遍历树，用队列储存结点，每次拿出队头，判断是否为叶子结点，如果是就直接输出，如果不是看左右孩子是否存在，若存在就加入队列。</li></ul><h4 id="AC代码：-15"><a href="#AC代码：-15" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Tree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line"><span class="type">int</span> l;</span><br><span class="line"><span class="type">int</span> r;</span><br><span class="line">&#125;T[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> p[N];</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">T[i].data = i;</span><br><span class="line"><span class="type">char</span> xl,xr;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c %c&quot;</span>, &amp;xl, &amp;xr);</span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">if</span>(xl == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">T[i].l = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">T[i].l = xl - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">p[T[i].l] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(xr == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">T[i].r = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">T[i].r = xr - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">p[T[i].r] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> root = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line"><span class="keyword">if</span>(!p[i]) root = i;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">q.<span class="built_in">push</span>(root);</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span>(T[t].l == <span class="number">-1</span> &amp;&amp; T[t].r == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(flag) <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(T[t].l != <span class="number">-1</span>)</span><br><span class="line">q.<span class="built_in">push</span>(T[t].l);</span><br><span class="line"><span class="keyword">if</span>(T[t].r != <span class="number">-1</span>)</span><br><span class="line">q.<span class="built_in">push</span>(T[t].r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-36-后序遍历"><a href="#7-36-后序遍历" class="headerlink" title="7-36 后序遍历"></a>7-36 后序遍历</h3><h4 id="题目大意：-4"><a href="#题目大意：-4" class="headerlink" title="题目大意："></a>题目大意：</h4><p>按栈的操作输入弹出遍历一棵树的中序遍历，输出该树的后序遍历。</p><h4 id="Tree-Traversals-Again"><a href="#Tree-Traversals-Again" class="headerlink" title="Tree Traversals Again"></a>Tree Traversals Again</h4><p>An inorder binary tree traversal can be implemented in a non-recursive way with a stack. For example, suppose that when a 6-node binary tree (with the keys numbered from 1 to 6) is traversed, the stack operations are: push(1); push(2); push(3); pop(); pop(); push(4); pop(); pop(); push(5); push(6); pop(); pop(). Then a unique binary tree (shown in Figure 1) can be generated from this sequence of operations. Your task is to give the postorder traversal sequence of this tree.</p><p><img src="https://images.ptausercontent.com/30" alt="img"><br>Figure 1</p><h4 id="Input-Specification-4"><a href="#Input-Specification-4" class="headerlink" title="Input Specification:"></a>Input Specification:</h4><p>Each input file contains one test case. For each case, the first line contains a positive integer <em>N</em> (≤30) which is the total number of nodes in a tree (and hence the nodes are numbered from 1 to <em>N</em>). Then 2<em>N</em> lines follow, each describes a stack operation in the format: “Push X” where X is the index of the node being pushed onto the stack; or “Pop” meaning to pop one node from the stack.</p><h4 id="Output-Specification-4"><a href="#Output-Specification-4" class="headerlink" title="Output Specification:"></a>Output Specification:</h4><p>For each test case, print the postorder traversal sequence of the corresponding tree in one line. A solution is guaranteed to exist. All the numbers must be separated by exactly one space, and there must be no extra space at the end of the line.</p><h4 id="Sample-Input-4"><a href="#Sample-Input-4" class="headerlink" title="Sample Input:"></a>Sample Input:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">Push 1</span><br><span class="line">Push 2</span><br><span class="line">Push 3</span><br><span class="line">Pop</span><br><span class="line">Pop</span><br><span class="line">Push 4</span><br><span class="line">Pop</span><br><span class="line">Pop</span><br><span class="line">Push 5</span><br><span class="line">Push 6</span><br><span class="line">Pop</span><br><span class="line">Pop</span><br></pre></td></tr></table></figure><h4 id="Sample-Output-4"><a href="#Sample-Output-4" class="headerlink" title="Sample Output:"></a>Sample Output:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 4 2 6 5 1</span><br></pre></td></tr></table></figure><h4 id="思路：-15"><a href="#思路：-15" class="headerlink" title="思路："></a>思路：</h4><ul><li>刚看到在想怎么构造出原树，后来发现题目的入栈序列是前序遍历，弹出顺序是中序遍历，那么这个题目就转换成了由前序和中序推出后序遍历序列。</li><li>由前序和中序推后序序列，前序的第一个即为根节点，遍历中序序列找到该点，该点的左边为左子树，右边为右子树，递归处理左右子树再倒序输出。</li><li>参考：<a href="https://blog.csdn.net/qq_44622401/article/details/104064901">https://blog.csdn.net/qq_44622401/article/details/104064901</a></li></ul><h4 id="AC代码：-16"><a href="#AC代码：-16" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">40</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, cnt1 = <span class="number">1</span>, cnt2 = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> pre[N], in[N];</span><br><span class="line">stack&lt;<span class="type">int</span>&gt; stk;</span><br><span class="line"><span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后序序列 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">lastprintf</span><span class="params">(<span class="type">int</span> root, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l &gt; r) <span class="keyword">return</span> ;</span><br><span class="line"><span class="type">int</span> i = l;</span><br><span class="line"><span class="keyword">while</span>(i &lt; r &amp;&amp; in[i] != pre[root]) i ++;</span><br><span class="line"><span class="comment">// 遍历左子树 </span></span><br><span class="line"><span class="built_in">lastprintf</span>(root + <span class="number">1</span>, l, i - <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 遍历右子树</span></span><br><span class="line"><span class="built_in">lastprintf</span>(root + <span class="number">1</span> + i - l, i + <span class="number">1</span>, r);</span><br><span class="line"><span class="keyword">if</span>(flag) <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, pre[root]); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> s[<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(s,<span class="string">&quot;Push&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">pre[cnt1 ++] = x;</span><br><span class="line">stk.<span class="built_in">push</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">in[cnt2 ++] = stk.<span class="built_in">top</span>();</span><br><span class="line">stk.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出后序序列 </span></span><br><span class="line"><span class="built_in">lastprintf</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-39-堆中的路径"><a href="#7-39-堆中的路径" class="headerlink" title="7-39 堆中的路径"></a>7-39 堆中的路径</h3><p>将一系列给定数字插入一个初始为空的小顶堆<code>H[]</code>。随后对任意给定的下标<code>i</code>，打印从<code>H[i]</code>到根结点的路径。</p><h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式:"></a>输入格式:</h4><p>每组测试第1行包含2个正整数<em>N</em>和<em>M</em>(≤1000)，分别是插入元素的个数、以及需要打印的路径条数。下一行给出区间[-10000, 10000]内的<em>N</em>个要被插入一个初始为空的小顶堆的整数。最后一行给出<em>M</em>个下标。</p><h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式:"></a>输出格式:</h4><p>对输入中给出的每个下标<code>i</code>，在一行中输出从<code>H[i]</code>到根结点的路径上的数据。数字间以1个空格分隔，行末不得有多余空格。</p><h4 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5 3</span><br><span class="line">46 23 26 24 10</span><br><span class="line">5 4 3</span><br></pre></td></tr></table></figure><h4 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">24 23 10</span><br><span class="line">46 23 10</span><br><span class="line">26 10</span><br></pre></td></tr></table></figure><h4 id="思路：-16"><a href="#思路：-16" class="headerlink" title="思路："></a>思路：</h4><ul><li><p>小根堆：每个结点都小于等于他的左右孩子。</p></li><li><p>大根堆：每个结点都大于等于他的左右孩子。</p></li><li><p>用数组模拟堆进行插入，需要实现两个函数down和up，即该位置的数向上或者向下移动，数组中储存二叉树，x 的左儿子是2 * x ，x 的右儿子是2 * x + 1。</p></li><li><p>小根堆插入一般都在数组最后插入，然后up一下就可以了。</p></li><li><p>构造完成堆以后，查找某点到根节点的路径就是找该点所有父结点，即u &#x2F; 2。</p></li></ul><h4 id="AC代码：-17"><a href="#AC代码：-17" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, cnt;</span><br><span class="line"><span class="type">int</span> h[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">down</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t = u;</span><br><span class="line">    <span class="keyword">if</span>(u * <span class="number">2</span> &lt;= cnt &amp;&amp; h[u * <span class="number">2</span>] &lt; h[t]) t = u * <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(u * <span class="number">2</span> + <span class="number">1</span> &lt;= cnt &amp;&amp; h[u * <span class="number">2</span> + <span class="number">1</span>] &lt; h[t]) t = u * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(u != t)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">swap</span>(h[u], h[t]);</span><br><span class="line">        <span class="built_in">down</span>(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">up</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(u / <span class="number">2</span> &amp;&amp; h[u / <span class="number">2</span>] &gt; h[u])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">swap</span>(h[u / <span class="number">2</span>], h[u]);</span><br><span class="line"><span class="built_in">up</span>(u / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取路径</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getpath</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(x / <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, h[x]);</span><br><span class="line">x /= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, h[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">h[++ cnt] = x;</span><br><span class="line"><span class="built_in">up</span>(cnt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(m -- )</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line"><span class="built_in">getpath</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-40-并查集"><a href="#7-40-并查集" class="headerlink" title="7-40 并查集"></a>7-40 并查集</h3><h4 id="题目大意：-5"><a href="#题目大意：-5" class="headerlink" title="题目大意："></a>题目大意：</h4><p>给一些查询和插入操作，如果两个点是连通的就返回yes否者返回no，插入操作是将两个点连接，最后输出有几个独立的集合。</p><h4 id="File-Transfer"><a href="#File-Transfer" class="headerlink" title="File Transfer"></a>File Transfer</h4><p>We have a network of computers and a list of bi-directional connections. Each of these connections allows a file transfer from one computer to another. Is it possible to send a file from any computer on the network to any other?</p><h4 id="Input-Specification-5"><a href="#Input-Specification-5" class="headerlink" title="Input Specification:"></a>Input Specification:</h4><p>Each input file contains one test case. For each test case, the first line contains <em>N</em> (2≤<em>N</em>≤104), the total number of computers in a network. Each computer in the network is then represented by a positive integer between 1 and <em>N</em>. Then in the following lines, the input is given in the format:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I c1 c2  </span><br></pre></td></tr></table></figure><p>where <code>I</code> stands for inputting a connection between <code>c1</code> and <code>c2</code>; or</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C c1 c2    </span><br></pre></td></tr></table></figure><p>where <code>C</code> stands for checking if it is possible to transfer files between <code>c1</code> and <code>c2</code>; or</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">S</span><br></pre></td></tr></table></figure><p>where <code>S</code> stands for stopping this case.</p><h4 id="Output-Specification-5"><a href="#Output-Specification-5" class="headerlink" title="Output Specification:"></a>Output Specification:</h4><p>For each <code>C</code> case, print in one line the word “yes” or “no” if it is possible or impossible to transfer files between <code>c1</code> and <code>c2</code>, respectively. At the end of each case, print in one line “The network is connected.” if there is a path between any pair of computers; or “There are <code>k</code> components.” where <code>k</code> is the number of connected components in this network.</p><h4 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">C 3 2</span><br><span class="line">I 3 2</span><br><span class="line">C 1 5</span><br><span class="line">I 4 5</span><br><span class="line">I 2 4</span><br><span class="line">C 3 5</span><br><span class="line">S</span><br></pre></td></tr></table></figure><h4 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">no</span><br><span class="line">no</span><br><span class="line">yes</span><br><span class="line">There are 2 components.</span><br></pre></td></tr></table></figure><h4 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">C 3 2</span><br><span class="line">I 3 2</span><br><span class="line">C 1 5</span><br><span class="line">I 4 5</span><br><span class="line">I 2 4</span><br><span class="line">C 3 5</span><br><span class="line">I 1 3</span><br><span class="line">C 1 5</span><br><span class="line">S</span><br></pre></td></tr></table></figure><h4 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">no</span><br><span class="line">no</span><br><span class="line">yes</span><br><span class="line">yes</span><br><span class="line">The network is connected.</span><br></pre></td></tr></table></figure><h4 id="思路：-17"><a href="#思路：-17" class="headerlink" title="思路："></a>思路：</h4><ul><li>并查集，集合的合并和集合间的查询。</li><li>find函数如果当前点不是就继续向上找，同时对路径进行压缩，让每个点都指向他所在集合的代表元素。</li></ul><h4 id="AC代码：-18"><a href="#AC代码：-18" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, k, flag = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> p[N];</span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; ma;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x != p[x]) p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line"><span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化并查集</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) p[i] = i;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> op[<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> a, b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, op);</span><br><span class="line"><span class="keyword">if</span>(*op == <span class="string">&#x27;S&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line"><span class="keyword">if</span>(*op == <span class="string">&#x27;I&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">p[<span class="built_in">find</span>(b)] = <span class="built_in">find</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">find</span>(a) == <span class="built_in">find</span>(b))</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;yes&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;no&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 寻找独立集合</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">ma[<span class="built_in">find</span>(i)] ++;</span><br><span class="line">&#125;</span><br><span class="line">k = ma.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">if</span>(k == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;The network is connected.\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;There are %d components.\n&quot;</span>, k);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-41-列出连通集"><a href="#7-41-列出连通集" class="headerlink" title="7-41 列出连通集"></a>7-41 列出连通集</h3><p>给定一个有<em>N</em>个顶点和<em>E</em>条边的无向图，请用DFS和BFS分别列出其所有的连通集。假设顶点从0到<em>N</em>−1编号。进行搜索时，假设我们总是从编号最小的顶点出发，按编号递增的顺序访问邻接点。</p><h4 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式:"></a>输入格式:</h4><p>输入第1行给出2个整数<em>N</em>(0&lt;<em>N</em>≤10)和<em>E</em>，分别是图的顶点数和边数。随后<em>E</em>行，每行给出一条边的两个端点。每行中的数字之间用1空格分隔。</p><h4 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式:"></a>输出格式:</h4><p>按照”{ <em>v</em>1 <em>v</em>2 … <em>v**k</em> }”的格式，每行输出一个连通集。先输出DFS的结果，再输出BFS的结果。</p><h4 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例:"></a>输入样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">8 6</span><br><span class="line">0 7</span><br><span class="line">0 1</span><br><span class="line">2 0</span><br><span class="line">4 1</span><br><span class="line">2 4</span><br><span class="line">3 5</span><br></pre></td></tr></table></figure><h4 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例:"></a>输出样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123; 0 1 4 2 7 &#125;</span><br><span class="line">&#123; 3 5 &#125;</span><br><span class="line">&#123; 6 &#125;</span><br><span class="line">&#123; 0 1 2 7 4 &#125;</span><br><span class="line">&#123; 3 5 &#125;</span><br><span class="line">&#123; 6 &#125;</span><br></pre></td></tr></table></figure><h4 id="思路：-18"><a href="#思路：-18" class="headerlink" title="思路："></a>思路：</h4><ul><li>图的DFS和BFS遍历。</li><li>刚开始我在想还要先去找出每个连通集并记录一下连通集的最小点标号，便于开始遍历。后来发现直接维护一个st数组判断该点是否已经被选过即可，然后直接从0 ~ n-1遍历全部点即可。</li><li>遍历过程中每次选到该点时直接将st置为1表示该点已经选过。</li></ul><h4 id="AC代码：-19"><a href="#AC代码：-19" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> g[N][N];</span><br><span class="line"><span class="type">int</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!st[i] &amp;&amp; g[x][i])</span><br><span class="line">&#123;</span><br><span class="line">st[i] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; %d&quot;</span>, i);</span><br><span class="line"><span class="built_in">dfs</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a, b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">g[a][b] = g[b][a] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// DFS</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!st[i])</span><br><span class="line">&#123;</span><br><span class="line">st[i] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&#123; %d&quot;</span>, i);</span><br><span class="line"><span class="built_in">dfs</span>(i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; &#125;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// BFS</span></span><br><span class="line"><span class="built_in">memset</span>(st, <span class="number">0</span>, <span class="keyword">sizeof</span> st);</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!st[i])</span><br><span class="line">&#123;</span><br><span class="line">q.<span class="built_in">push</span>(i);</span><br><span class="line">st[i] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&#123;&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!st[j] &amp;&amp; g[t][j])</span><br><span class="line">&#123;</span><br><span class="line">st[j] = <span class="number">1</span>;</span><br><span class="line">q.<span class="built_in">push</span>(j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; %d&quot;</span>, t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; &#125;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-42-DFS"><a href="#7-42-DFS" class="headerlink" title="7-42 DFS"></a>7-42 DFS</h3><h4 id="题目大意：-6"><a href="#题目大意：-6" class="headerlink" title="题目大意："></a>题目大意：</h4><p>有个100 X 100的正方形，中心点是（0，0），右上角是（50，50），中心有个直径为15的圆形岛，在正方形内给出n个可以踩的点，判断是否可以由中心岛踩某些点而到达岸边。给出每次跳跃的距离。</p><h4 id="Saving-James-Bond-Easy-Version"><a href="#Saving-James-Bond-Easy-Version" class="headerlink" title="Saving James Bond - Easy Version"></a>Saving James Bond - Easy Version</h4><p>This time let us consider the situation in the movie “Live and Let Die” in which James Bond, the world’s most famous spy, was captured by a group of drug dealers. He was sent to a small piece of land at the center of a lake filled with crocodiles. There he performed the most daring action to escape – he jumped onto the head of the nearest crocodile! Before the animal realized what was happening, James jumped again onto the next big head… Finally he reached the bank before the last crocodile could bite him (actually the stunt man was caught by the big mouth and barely escaped with his extra thick boot).</p><p>Assume that the lake is a 100 by 100 square one. Assume that the center of the lake is at (0,0) and the northeast corner at (50,50). The central island is a disk centered at (0,0) with the diameter of 15. A number of crocodiles are in the lake at various positions. Given the coordinates of each crocodile and the distance that James could jump, you must tell him whether or not he can escape.</p><h4 id="Input-Specification-6"><a href="#Input-Specification-6" class="headerlink" title="Input Specification:"></a>Input Specification:</h4><p>Each input file contains one test case. Each case starts with a line containing two positive integers <em>N</em> (≤100), the number of crocodiles, and <em>D</em>, the maximum distance that James could jump. Then <em>N</em> lines follow, each containing the (<em>x</em>,<em>y</em>) location of a crocodile. Note that no two crocodiles are staying at the same position.</p><h4 id="Output-Specification-6"><a href="#Output-Specification-6" class="headerlink" title="Output Specification:"></a>Output Specification:</h4><p>For each test case, print in a line “Yes” if James can escape, or “No” if not.</p><h4 id="Sample-Input-1-1"><a href="#Sample-Input-1-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">14 20</span><br><span class="line">25 -15</span><br><span class="line">-25 28</span><br><span class="line">8 49</span><br><span class="line">29 15</span><br><span class="line">-35 -2</span><br><span class="line">5 28</span><br><span class="line">27 -29</span><br><span class="line">-8 -28</span><br><span class="line">-20 -35</span><br><span class="line">-25 -20</span><br><span class="line">-13 29</span><br><span class="line">-30 15</span><br><span class="line">-35 40</span><br><span class="line">12 12</span><br></pre></td></tr></table></figure><h4 id="Sample-Output-1-1"><a href="#Sample-Output-1-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yes</span><br></pre></td></tr></table></figure><h4 id="Sample-Input-2-1"><a href="#Sample-Input-2-1" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4 13</span><br><span class="line">-12 12</span><br><span class="line">12 12</span><br><span class="line">-12 -12</span><br><span class="line">12 -12</span><br></pre></td></tr></table></figure><h4 id="Sample-Output-2-1"><a href="#Sample-Output-2-1" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">No</span><br></pre></td></tr></table></figure><h4 id="思路：-19"><a href="#思路：-19" class="headerlink" title="思路："></a>思路：</h4><ul><li>题目没让输出路径，所以可以直接遍历每个点，去DFS遍历每个可以由该点跳跃到的点，每次判断一下是否可以由该点到达岸边。</li><li>两点之间的距离公式：（x1 - x2) ^ 2 + (y1 - y2) ^ 2 &#x3D; r ^ 2。</li><li>注意中心点是个直径为15的岛，所以从中心岛跳出时需要特判一下距离。</li></ul><h4 id="AC代码：-20"><a href="#AC代码：-20" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">point</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line">&#125;p[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, flag = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="comment">//  判断是否有点可以从中心岛跳过去 </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f1</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> dx = p[x].x * p[x].x;</span><br><span class="line"><span class="type">int</span> dy = p[x].y * p[x].y;</span><br><span class="line"><span class="type">int</span> r = (m + <span class="number">7.5</span>) * (m + <span class="number">7.5</span>);</span><br><span class="line"><span class="keyword">if</span>(dx + dy &lt;= r) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  判断是否可以由x，跳到y上 </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">distance</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> dx = (p[x].x - p[y].x) * (p[x].x - p[y].x);</span><br><span class="line"><span class="type">int</span> dy = (p[x].y - p[y].y) * (p[x].y - p[y].y);</span><br><span class="line"><span class="type">int</span> r = m * m;</span><br><span class="line"><span class="keyword">if</span>(dx + dy &lt;= r) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断是否可以由x这个点跳到岸上 </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">judge</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p[x].x - m &lt;= <span class="number">-50</span> || p[x].x + m &gt;= <span class="number">50</span> || p[x].y - m &lt;= <span class="number">-50</span> || p[x].y + m &gt;= <span class="number">50</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">st[x] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">judge</span>(x)) flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line"><span class="keyword">if</span>(!st[i] &amp;&amp; <span class="built_in">distance</span>(x, i))</span><br><span class="line"><span class="built_in">dfs</span>(i);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;p[i].x, &amp;p[i].y);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(m &gt;= <span class="number">42.5</span>) <span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line"><span class="keyword">if</span>(!st[i] &amp;&amp; <span class="built_in">f1</span>(i))</span><br><span class="line"><span class="built_in">dfs</span>(i);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(flag) <span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-43-哈利·波特的考试"><a href="#7-43-哈利·波特的考试" class="headerlink" title="7-43 哈利·波特的考试"></a>7-43 哈利·波特的考试</h3><p>哈利·波特要考试了，他需要你的帮助。这门课学的是用魔咒将一种动物变成另一种动物的本事。例如将猫变成老鼠的魔咒是haha，将老鼠变成鱼的魔咒是hehe等等。反方向变化的魔咒就是简单地将原来的魔咒倒过来念，例如ahah可以将老鼠变成猫。另外，如果想把猫变成鱼，可以通过念一个直接魔咒lalala，也可以将猫变老鼠、老鼠变鱼的魔咒连起来念：hahahehe。</p><p>现在哈利·波特的手里有一本教材，里面列出了所有的变形魔咒和能变的动物。老师允许他自己带一只动物去考场，要考察他把这只动物变成任意一只指定动物的本事。于是他来问你：带什么动物去可以让最难变的那种动物（即该动物变为哈利·波特自己带去的动物所需要的魔咒最长）需要的魔咒最短？例如：如果只有猫、鼠、鱼，则显然哈利·波特应该带鼠去，因为鼠变成另外两种动物都只需要念4个字符；而如果带猫去，则至少需要念6个字符才能把猫变成鱼；同理，带鱼去也不是最好的选择。</p><h4 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式:"></a>输入格式:</h4><p>输入说明：输入第1行给出两个正整数<em>N</em> (≤100)和<em>M</em>，其中<em>N</em>是考试涉及的动物总数，<em>M</em>是用于直接变形的魔咒条数。为简单起见，我们将动物按1~<em>N</em>编号。随后<em>M</em>行，每行给出了3个正整数，分别是两种动物的编号、以及它们之间变形需要的魔咒的长度(≤100)，数字之间用空格分隔。</p><h4 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式:"></a>输出格式:</h4><p>输出哈利·波特应该带去考场的动物的编号、以及最长的变形魔咒的长度，中间以空格分隔。如果只带1只动物是不可能完成所有变形要求的，则输出0。如果有若干只动物都可以备选，则输出编号最小的那只。</p><h4 id="输入样例-2"><a href="#输入样例-2" class="headerlink" title="输入样例:"></a>输入样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">6 11</span><br><span class="line">3 4 70</span><br><span class="line">1 2 1</span><br><span class="line">5 4 50</span><br><span class="line">2 6 50</span><br><span class="line">5 6 60</span><br><span class="line">1 3 70</span><br><span class="line">4 6 60</span><br><span class="line">3 6 80</span><br><span class="line">5 1 100</span><br><span class="line">2 4 60</span><br><span class="line">5 2 80</span><br></pre></td></tr></table></figure><h4 id="输出样例-2"><a href="#输出样例-2" class="headerlink" title="输出样例:"></a>输出样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4 70</span><br></pre></td></tr></table></figure><h4 id="思路：-20"><a href="#思路：-20" class="headerlink" title="思路："></a>思路：</h4><ul><li><p>由题目知道两个动物之间可以由咒语互变，可以理解成无向图。</p></li><li><p>多元汇最短路，Floyd算法，因为题目没有说明是从哪个点作为起点，所以用到了Floyd算法，d数组中储存的即为 a 到 b 的最短路。</p></li><li><p>算完以后，找到每一行里面的最大值，再在这些最大值里找到一个最小值即为答案。</p></li><li><p>有个特殊情况是不能到达的某个点，Floyd算完以后，遍历时，如果找到一个距离为INF的值即两点之间不可到达，所以不连通，就输出0。</p></li></ul><h4 id="AC代码：-21"><a href="#AC代码：-21" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>, INF = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> d[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">floyd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>; k &lt;= n; k ++ )</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ )</span><br><span class="line">d[i][j] = <span class="built_in">min</span>(d[i][j], d[i][k] + d[k][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="comment">// 初始化 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ )</span><br><span class="line"><span class="keyword">if</span>(i == j) d[i][j] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> d[i][j] = INF;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a, b, w;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;w);</span><br><span class="line">d[a][b] = d[b][a] = <span class="built_in">min</span>(d[a][b], w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">floyd</span>();</span><br><span class="line"><span class="comment">// minnum储存最小的点坐标，maxres储存对应的咒语长度</span></span><br><span class="line">    <span class="comment">// flag 对应是否存在不可到达的点</span></span><br><span class="line"><span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> minnum = <span class="number">1</span>, maxres = INF;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(d[i][j] &gt; x)</span><br><span class="line">&#123;</span><br><span class="line">x = d[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x == INF) flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(maxres &gt; x)</span><br><span class="line">&#123;</span><br><span class="line">maxres = x;</span><br><span class="line">minnum = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag) <span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>, minnum, maxres);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-44-关键路径"><a href="#7-44-关键路径" class="headerlink" title="7-44 关键路径"></a>7-44 关键路径</h3><h4 id="题目大意：-7"><a href="#题目大意：-7" class="headerlink" title="题目大意："></a>题目大意：</h4><p>给定一个有向图，第一行n表示点的数量（0 ~ n -1编号）m表示边得数量，然后m行每行给出一条边的起点、终点、权值。求从起点到终点的的最短时间，如果不存在就输出Impossible。</p><h4 id="How-Long-Does-It-Take"><a href="#How-Long-Does-It-Take" class="headerlink" title="How Long Does It Take"></a>How Long Does It Take</h4><p>Given the relations of all the activities of a project, you are supposed to find the earliest completion time of the project.</p><h4 id="Input-Specification-7"><a href="#Input-Specification-7" class="headerlink" title="Input Specification:"></a>Input Specification:</h4><p>Each input file contains one test case. Each case starts with a line containing two positive integers <em>N</em> (≤100), the number of activity check points (hence it is assumed that the check points are numbered from 0 to <em>N</em>−1), and <em>M</em>, the number of activities. Then <em>M</em> lines follow, each gives the description of an activity. For the <code>i</code>-th activity, three non-negative numbers are given: <code>S[i]</code>, <code>E[i]</code>, and <code>L[i]</code>, where <code>S[i]</code> is the index of the starting check point, <code>E[i]</code> of the ending check point, and <code>L[i]</code> the lasting time of the activity. The numbers in a line are separated by a space.</p><h4 id="Output-Specification-7"><a href="#Output-Specification-7" class="headerlink" title="Output Specification:"></a>Output Specification:</h4><p>For each test case, if the scheduling is possible, print in a line its earliest completion time; or simply output “Impossible”.</p><h4 id="Sample-Input-1-2"><a href="#Sample-Input-1-2" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">9 12</span><br><span class="line">0 1 6</span><br><span class="line">0 2 4</span><br><span class="line">0 3 5</span><br><span class="line">1 4 1</span><br><span class="line">2 4 1</span><br><span class="line">3 5 2</span><br><span class="line">5 4 0</span><br><span class="line">4 6 9</span><br><span class="line">4 7 7</span><br><span class="line">5 7 4</span><br><span class="line">6 8 2</span><br><span class="line">7 8 4</span><br></pre></td></tr></table></figure><h4 id="Sample-Output-1-2"><a href="#Sample-Output-1-2" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">18</span><br></pre></td></tr></table></figure><h4 id="Sample-Input-2-2"><a href="#Sample-Input-2-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">4 5</span><br><span class="line">0 1 1</span><br><span class="line">0 2 2</span><br><span class="line">2 1 3</span><br><span class="line">1 3 4</span><br><span class="line">3 2 5</span><br></pre></td></tr></table></figure><h4 id="Sample-Output-2-2"><a href="#Sample-Output-2-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Impossible</span><br></pre></td></tr></table></figure><h4 id="思路：-21"><a href="#思路：-21" class="headerlink" title="思路："></a>思路：</h4><ul><li>关键路径题目，把每个点的入度储存下来，然后从度为0的点开始遍历。</li><li>ET数组储存每个点完成的最早时间，InD数组储存每个点的入度。</li><li>把度为0的点入队，然后遍历每个跟点相连的点，更新ET值，再把每个跟该点相连的点的入度减一，如果为0就入队。</li><li>做完以后看ans的值是否和n的值相同，不同则说明图中存在环，输出Impossible，相同就输出最大的res。</li></ul><h4 id="AC代码：-22"><a href="#AC代码：-22" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> ET[N], InD[N]; <span class="comment">// ET储存每个活动最早完成时间 </span></span><br><span class="line"><span class="type">int</span> g[N][N];<span class="comment">// InD储存每个点的入度 </span></span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="built_in">memset</span>(g, <span class="number">-1</span>, <span class="keyword">sizeof</span> g);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a, b, c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">g[a][b] = c;</span><br><span class="line">InD[b] ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 度为 0 的加入队列 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line"><span class="keyword">if</span>(!InD[i])</span><br><span class="line">q.<span class="built_in">push</span>(i);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> res = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line">ans ++;</span><br><span class="line"><span class="comment">// 更新一下每个可以更新的点</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(g[t][i] != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ET[t] + g[t][i] &gt; ET[i])</span><br><span class="line">&#123;</span><br><span class="line">ET[i] = ET[t] + g[t][i];</span><br><span class="line">res = <span class="built_in">max</span>(res, ET[i]);</span><br><span class="line">&#125;</span><br><span class="line">InD[i] --;</span><br><span class="line"><span class="keyword">if</span>(!InD[i])</span><br><span class="line">q.<span class="built_in">push</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ans记录每个点是否加入队列，如果ans不等于n说明存在回路 </span></span><br><span class="line"><span class="keyword">if</span>(ans != n) <span class="built_in">puts</span>(<span class="string">&quot;Impossible&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, res);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-45-排序"><a href="#7-45-排序" class="headerlink" title="7-45 排序"></a>7-45 排序</h3><p>给定<em>N</em>个（长整型范围内的）整数，要求输出从小到大排序后的结果。</p><p>本题旨在测试各种不同的排序算法在各种数据情况下的表现。各组测试数据特点如下：</p><p>数据1：只有1个元素；</p><p>数据2：11个不相同的整数，测试基本正确性；</p><p>数据3：103个随机整数；</p><p>数据4：104个随机整数；</p><p>数据5：105个随机整数；</p><p>数据6：105个顺序整数；</p><p>数据7：105个逆序整数；</p><p>数据8：105个基本有序的整数；</p><p>数据9：105个随机正整数，每个数字不超过1000。</p><h4 id="输入格式-4"><a href="#输入格式-4" class="headerlink" title="输入格式:"></a>输入格式:</h4><p>输入第一行给出正整数<em>N</em>（≤105），随后一行给出<em>N</em>个（长整型范围内的）整数，其间以空格分隔。</p><h4 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式:"></a>输出格式:</h4><p>在一行中输出从小到大排序后的结果，数字间以1个空格分隔，行末不得有多余空格。</p><h4 id="输入样例-3"><a href="#输入样例-3" class="headerlink" title="输入样例:"></a>输入样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">11</span><br><span class="line">4 981 10 -17 0 -20 29 50 8 43 -5</span><br></pre></td></tr></table></figure><h4 id="输出样例-3"><a href="#输出样例-3" class="headerlink" title="输出样例:"></a>输出样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-20 -17 -5 0 4 8 10 29 43 50 981</span><br></pre></td></tr></table></figure><h4 id="思路：-22"><a href="#思路：-22" class="headerlink" title="思路："></a>思路：</h4><ul><li>刚看到以为会有坑，后来看完以后发现只是一个排序题目。</li></ul><h4 id="AC代码：-23"><a href="#AC代码：-23" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">LL q[N], temp[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quick_sort</span><span class="params">(LL q[], <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span> ;</span><br><span class="line"><span class="type">int</span> i = l - <span class="number">1</span>, j = r + <span class="number">1</span>;</span><br><span class="line">LL x = q[(l + r) / <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(i &lt; j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">do</span> i ++; <span class="keyword">while</span>(q[i] &lt; x);</span><br><span class="line"><span class="keyword">do</span> j --; <span class="keyword">while</span>(q[j] &gt; x);</span><br><span class="line"><span class="keyword">if</span>(i &lt; j)</span><br><span class="line"><span class="built_in">swap</span>(q[i], q[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">quick_sort</span>(q, l, j);</span><br><span class="line"><span class="built_in">quick_sort</span>(q, j + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge_sort</span><span class="params">(LL q[], <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span> ;</span><br><span class="line"><span class="type">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line"><span class="built_in">merge_sort</span>(q, l, mid);</span><br><span class="line"><span class="built_in">merge_sort</span>(q, mid + <span class="number">1</span>, r);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i = l, j = mid + <span class="number">1</span>, k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(q[i] &lt; q[j])</span><br><span class="line">temp[k ++ ] = q[i ++ ];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">temp[k ++ ] = q[j ++ ];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(i &lt;= mid)</span><br><span class="line">temp[k ++ ] = q[i ++ ];</span><br><span class="line"><span class="keyword">while</span>(j &lt;= r)</span><br><span class="line">temp[k ++ ] = q[j ++ ];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = l, j = <span class="number">0</span>; i &lt;= r;)</span><br><span class="line">q[i ++ ] = temp[j ++ ];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;q[i]);</span><br><span class="line"><span class="comment">// 可以直接调用sort函数</span></span><br><span class="line"><span class="comment">//sort(q, q + n);</span></span><br><span class="line"><span class="comment">// 手写快排和归并</span></span><br><span class="line"><span class="comment">//quick_sort(q, 0, n - 1);</span></span><br><span class="line"><span class="built_in">merge_sort</span>(q, <span class="number">0</span>, n - <span class="number">1</span>); </span><br><span class="line"></span><br><span class="line"><span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(flag) <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, q[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-46-插入和归并排序"><a href="#7-46-插入和归并排序" class="headerlink" title="7-46 插入和归并排序"></a>7-46 插入和归并排序</h3><h4 id="题目大意：-8"><a href="#题目大意：-8" class="headerlink" title="题目大意："></a>题目大意：</h4><p>给定一个序列和一个排序没有完成的该序列的一个状态，判断是插入排序还是归并排序，并输出迭代下一步的序列。</p><h4 id="Insert-or-Merge"><a href="#Insert-or-Merge" class="headerlink" title="Insert or Merge"></a>Insert or Merge</h4><p>According to Wikipedia:</p><p><strong>Insertion sort</strong> iterates, consuming one input element each repetition, and growing a sorted output list. Each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list, and inserts it there. It repeats until no input elements remain.</p><p><strong>Merge sort</strong> works as follows: Divide the unsorted list into N sublists, each containing 1 element (a list of 1 element is considered sorted). Then repeatedly merge two adjacent sublists to produce new sorted sublists until there is only 1 sublist remaining.</p><p>Now given the initial sequence of integers, together with a sequence which is a result of several iterations of some sorting method, can you tell which sorting method we are using?</p><h4 id="Input-Specification-8"><a href="#Input-Specification-8" class="headerlink" title="Input Specification:"></a>Input Specification:</h4><p>Each input file contains one test case. For each case, the first line gives a positive integer <em>N</em> (≤100). Then in the next line, <em>N</em> integers are given as the initial sequence. The last line contains the partially sorted sequence of the <em>N</em> numbers. It is assumed that the target sequence is always ascending. All the numbers in a line are separated by a space.</p><h4 id="Output-Specification-8"><a href="#Output-Specification-8" class="headerlink" title="Output Specification:"></a>Output Specification:</h4><p>For each test case, print in the first line either “Insertion Sort” or “Merge Sort” to indicate the method used to obtain the partial result. Then run this method for one more iteration and output in the second line the resuling sequence. It is guaranteed that the answer is unique for each test case. All the numbers in a line must be separated by a space, and there must be no extra space at the end of the line.</p><h4 id="Sample-Input-1-3"><a href="#Sample-Input-1-3" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">3 1 2 8 7 5 9 4 6 0</span><br><span class="line">1 2 3 7 8 5 9 4 6 0</span><br></pre></td></tr></table></figure><h4 id="Sample-Output-1-3"><a href="#Sample-Output-1-3" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Insertion Sort</span><br><span class="line">1 2 3 5 7 8 9 4 6 0</span><br></pre></td></tr></table></figure><h4 id="Sample-Input-2-3"><a href="#Sample-Input-2-3" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">3 1 2 8 7 5 9 4 0 6</span><br><span class="line">1 3 2 8 5 7 4 9 0 6</span><br></pre></td></tr></table></figure><h4 id="Sample-Output-2-3"><a href="#Sample-Output-2-3" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Merge Sort</span><br><span class="line">1 2 3 8 4 5 7 9 0 6</span><br></pre></td></tr></table></figure><h4 id="思路：-23"><a href="#思路：-23" class="headerlink" title="思路："></a>思路：</h4><ul><li><p>a储存原序列，q储存中间状态。</p></li><li><p>插入排序是有序的，那么就可以直接遍历q，找到有序的前面一部分，后面无序的与原数组a比较，如果相同即为插入排序，反之为归并。</p></li><li><p>插入排序直接就把q排好序的一部分往下再排一位即可。</p></li><li><p>归并排序是分治的思想，那么直接枚举长度len从2开始，把a数组按归并排序排，每次比较a和q如果两者相等，即找到，然后再排一次就是答案。</p></li></ul><h4 id="AC代码：-24"><a href="#AC代码：-24" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> q[N], a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q[i]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否为插入排序 </span></span><br><span class="line"><span class="type">int</span> t, flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i ++ )</span><br><span class="line"><span class="keyword">if</span>(q[i] &lt; q[i - <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">t = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = t; i &lt; n; i ++ )</span><br><span class="line"><span class="keyword">if</span>(q[i] != a[i])</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理下一次迭代</span></span><br><span class="line"><span class="comment">// 插入排序 </span></span><br><span class="line"><span class="keyword">if</span>(flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> k = q[t];</span><br><span class="line"><span class="built_in">sort</span>(q, q + t + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> te = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Insertion Sort\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(te) <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">te = <span class="number">1</span>; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, q[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 归并排序 </span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> len = <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(k)</span><br><span class="line">&#123;</span><br><span class="line">k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line"><span class="keyword">if</span>(a[i] != q[i])</span><br><span class="line">&#123;</span><br><span class="line">k = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i += len)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">sort</span>(a + i, a + <span class="built_in">min</span>(i + len, n));</span><br><span class="line">&#125;</span><br><span class="line">len *= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> te = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Merge Sort\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(te) <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">te = <span class="number">1</span>; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-47-插入和堆排序"><a href="#7-47-插入和堆排序" class="headerlink" title="7-47 插入和堆排序"></a>7-47 插入和堆排序</h3><h4 id="题目大意：-9"><a href="#题目大意：-9" class="headerlink" title="题目大意："></a>题目大意：</h4><p>给定一个序列和一个排序没有完成的该序列的一个状态，判断是插入排序还是堆排序，并输出迭代下一步的序列。</p><h4 id="Insertion-or-Heap-Sort"><a href="#Insertion-or-Heap-Sort" class="headerlink" title="Insertion or Heap Sort"></a>Insertion or Heap Sort</h4><p>According to Wikipedia:</p><p><strong>Insertion sort</strong> iterates, consuming one input element each repetition, and growing a sorted output list. Each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list, and inserts it there. It repeats until no input elements remain.</p><p><strong>Heap sort</strong> divides its input into a sorted and an unsorted region, and it iteratively shrinks the unsorted region by extracting the largest element and moving that to the sorted region. it involves the use of a heap data structure rather than a linear-time search to find the maximum.</p><p>Now given the initial sequence of integers, together with a sequence which is a result of several iterations of some sorting method, can you tell which sorting method we are using?</p><h4 id="Input-Specification-9"><a href="#Input-Specification-9" class="headerlink" title="Input Specification:"></a>Input Specification:</h4><p>Each input file contains one test case. For each case, the first line gives a positive integer <em>N</em> (≤100). Then in the next line, <em>N</em> integers are given as the initial sequence. The last line contains the partially sorted sequence of the <em>N</em> numbers. It is assumed that the target sequence is always ascending. All the numbers in a line are separated by a space.</p><h4 id="Output-Specification-9"><a href="#Output-Specification-9" class="headerlink" title="Output Specification:"></a>Output Specification:</h4><p>For each test case, print in the first line either “Insertion Sort” or “Heap Sort” to indicate the method used to obtain the partial result. Then run this method for one more iteration and output in the second line the resulting sequence. It is guaranteed that the answer is unique for each test case. All the numbers in a line must be separated by a space, and there must be no extra space at the end of the line.</p><h4 id="Sample-Input-1-4"><a href="#Sample-Input-1-4" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">3 1 2 8 7 5 9 4 6 0</span><br><span class="line">1 2 3 7 8 5 9 4 6 0</span><br></pre></td></tr></table></figure><h4 id="Sample-Output-1-4"><a href="#Sample-Output-1-4" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Insertion Sort</span><br><span class="line">1 2 3 5 7 8 9 4 6 0</span><br></pre></td></tr></table></figure><h4 id="Sample-Input-2-4"><a href="#Sample-Input-2-4" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">3 1 2 8 7 5 9 4 6 0</span><br><span class="line">6 4 5 1 0 3 2 7 8 9</span><br></pre></td></tr></table></figure><h4 id="Sample-Output-2-4"><a href="#Sample-Output-2-4" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Heap Sort</span><br><span class="line">5 4 3 1 0 2 6 7 8 9</span><br></pre></td></tr></table></figure><h4 id="思路：-24"><a href="#思路：-24" class="headerlink" title="思路："></a>思路：</h4><ul><li><p>a储存原序列，q储存中间状态。</p></li><li><p>插入排序是有序的，那么就可以直接遍历q，找到有序的前面一部分，后面无序的与原数组a比较，如果相同即为插入排序，反之为堆排序。</p></li><li><p>插入排序直接就把q排好序的一部分往下再排一位即可。</p></li><li><p>堆排序是从后往前的序列，每次把堆顶放到最后，所以可以从后往前找比堆顶（就是a[1]）大的就是已经有序的序列，找到第一个不属于有序的元素，让其与h[1]交换，然后再down一下第一个元素。</p></li></ul><h4 id="AC代码：-25"><a href="#AC代码：-25" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, ans;</span><br><span class="line"><span class="type">int</span> q[N], a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">down</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> t = u;</span><br><span class="line"><span class="keyword">if</span>(u * <span class="number">2</span> &lt;= ans &amp;&amp; q[u * <span class="number">2</span>] &gt; q[t]) t = u * <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(u * <span class="number">2</span> + <span class="number">1</span> &lt;= ans &amp;&amp; q[u * <span class="number">2</span> + <span class="number">1</span>] &gt; q[t]) t = u * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(u != t)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">swap</span>(q[u], q[t]);</span><br><span class="line"><span class="built_in">down</span>(t);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">up</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(u / <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(q[u] &gt; q[u / <span class="number">2</span>])</span><br><span class="line"><span class="built_in">swap</span>(q[u], q[u / <span class="number">2</span>]);</span><br><span class="line">u /= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q[i]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否为插入排序 </span></span><br><span class="line"><span class="type">int</span> t, flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i ++ )</span><br><span class="line"><span class="keyword">if</span>(q[i] &lt; q[i - <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">t = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = t; i &lt;= n; i ++ )</span><br><span class="line"><span class="keyword">if</span>(q[i] != a[i])</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理下一次迭代</span></span><br><span class="line"><span class="comment">// 插入排序 </span></span><br><span class="line"><span class="keyword">if</span>(flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> k = q[t];</span><br><span class="line"><span class="built_in">sort</span>(q + <span class="number">1</span>, q + t + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> te = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Insertion Sort\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(te) <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">te = <span class="number">1</span>; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, q[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 堆排序 </span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; i -- )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(q[i] &lt; q[<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">k = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans = k - <span class="number">1</span>;</span><br><span class="line"><span class="built_in">swap</span>(q[<span class="number">1</span>], q[k]);</span><br><span class="line"><span class="built_in">down</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> te = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Heap Sort\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(te) <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">te = <span class="number">1</span>; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, q[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-48-PAT-Judge"><a href="#7-48-PAT-Judge" class="headerlink" title="7-48 PAT Judge"></a>7-48 PAT Judge</h3><h4 id="题目大意：-10"><a href="#题目大意：-10" class="headerlink" title="题目大意："></a>题目大意：</h4><p>排序题，给定m次提交，最后按总分、满分题目数、id排名输出。</p><p>The ranklist of PAT is generated from the status list, which shows the scores of the submissions. This time you are supposed to generate the ranklist for PAT.</p><h4 id="Input-Specification-10"><a href="#Input-Specification-10" class="headerlink" title="Input Specification:"></a>Input Specification:</h4><p>Each input file contains one test case. For each case, the first line contains 3 positive integers, <em>N</em> (≤104), the total number of users, <em>K</em> (≤5), the total number of problems, and <em>M</em> (≤105), the total number of submissions. It is then assumed that the user id’s are 5-digit numbers from 00001 to <em>N</em>, and the problem id’s are from 1 to <em>K</em>. The next line contains <em>K</em> positive integers <code>p[i]</code> (<code>i</code>&#x3D;1, …, <em>K</em>), where <code>p[i]</code> corresponds to the full mark of the i-th problem. Then <em>M</em> lines follow, each gives the information of a submission in the following format:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_id problem_id partial_score_obtained</span><br></pre></td></tr></table></figure><p>where <code>partial_score_obtained</code> is either −1 if the submission cannot even pass the compiler, or is an integer in the range [0, <code>p[problem_id]</code>]. All the numbers in a line are separated by a space.</p><h4 id="Output-Specification-10"><a href="#Output-Specification-10" class="headerlink" title="Output Specification:"></a>Output Specification:</h4><p>For each test case, you are supposed to output the ranklist in the following format:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rank user_id total_score s[1] ... s[K]</span><br></pre></td></tr></table></figure><p>where <code>rank</code> is calculated according to the <code>total_score</code>, and all the users with the same <code>total_score</code> obtain the same <code>rank</code>; and <code>s[i]</code> is the partial score obtained for the <code>i</code>-th problem. If a user has never submitted a solution for a problem, then “-“ must be printed at the corresponding position. If a user has submitted several solutions to solve one problem, then the highest score will be counted.</p><p>The ranklist must be printed in non-decreasing order of the ranks. For those who have the same rank, users must be sorted in nonincreasing order according to the number of perfectly solved problems. And if there is still a tie, then they must be printed in increasing order of their id’s. For those who has never submitted any solution that can pass the compiler, or has never submitted any solution, they must NOT be shown on the ranklist. It is guaranteed that at least one user can be shown on the ranklist.</p><h4 id="Sample-Input-5"><a href="#Sample-Input-5" class="headerlink" title="Sample Input:"></a>Sample Input:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">7 4 20</span><br><span class="line">20 25 25 30</span><br><span class="line">00002 2 12</span><br><span class="line">00007 4 17</span><br><span class="line">00005 1 19</span><br><span class="line">00007 2 25</span><br><span class="line">00005 1 20</span><br><span class="line">00002 2 2</span><br><span class="line">00005 1 15</span><br><span class="line">00001 1 18</span><br><span class="line">00004 3 25</span><br><span class="line">00002 2 25</span><br><span class="line">00005 3 22</span><br><span class="line">00006 4 -1</span><br><span class="line">00001 2 18</span><br><span class="line">00002 1 20</span><br><span class="line">00004 1 15</span><br><span class="line">00002 4 18</span><br><span class="line">00001 3 4</span><br><span class="line">00001 4 2</span><br><span class="line">00005 2 -1</span><br><span class="line">00004 2 0</span><br></pre></td></tr></table></figure><h4 id="Sample-Output-5"><a href="#Sample-Output-5" class="headerlink" title="Sample Output:"></a>Sample Output:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 00002 63 20 25 - 18</span><br><span class="line">2 00005 42 20 0 22 -</span><br><span class="line">2 00007 42 - 25 - 17</span><br><span class="line">2 00001 42 18 18 4 2</span><br><span class="line">5 00004 40 15 0 25 -</span><br></pre></td></tr></table></figure><h4 id="思路：-25"><a href="#思路：-25" class="headerlink" title="思路："></a>思路：</h4><ul><li>因为题目数量很少所以用一个数组储存下来题目对应的分数，用结构体来储存每个人的id，分数，满分通过的题目数，各个题目对应的分数。</li><li>sort排序要手写cmp函数，总分，满分题目数，id排序。</li><li>在排序前把每个人的总分计算一下，同时判断一下每个人是否有一次编译也没过的情况。</li><li>输出时注意名次，重复名次输出是一样的，如果一次都没有编译通过，就不输出该同学的成绩。</li></ul><h4 id="AC代码：-26"><a href="#AC代码：-26" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c"><figcaption><span>++</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10010</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> id;</span><br><span class="line"><span class="type">int</span> r; <span class="comment">// 是否有提交编译过了 </span></span><br><span class="line"><span class="type">int</span> fpass; <span class="comment">// 完全正确的通过数</span></span><br><span class="line"><span class="type">int</span> total_score;</span><br><span class="line"><span class="type">int</span> s[<span class="number">6</span>] = &#123;<span class="number">-2</span>,<span class="number">-2</span>,<span class="number">-2</span>,<span class="number">-2</span>,<span class="number">-2</span>,<span class="number">-2</span>&#125;;</span><br><span class="line">&#125; stu[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, k, m;</span><br><span class="line"><span class="type">int</span> p[<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">cmp</span><span class="params">(student a, student b)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a.total_score != b.total_score)</span><br><span class="line"><span class="keyword">return</span> a.total_score &gt; b.total_score;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a.fpass != b.fpass)</span><br><span class="line"><span class="keyword">return</span> a.fpass &gt; b.fpass;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a.id &lt; b.id;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;k, &amp;m);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读入题目和分数 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; i ++ )</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;p[i]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读入提交 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">1</span>; i &lt;= m; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a, b, c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line"><span class="comment">// 满分 </span></span><br><span class="line"><span class="keyword">if</span>(c == p[b])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(stu[a].s[b] == <span class="number">-2</span> || stu[a].s[b] == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">stu[a].s[b] = c;</span><br><span class="line">stu[a].fpass ++;</span><br><span class="line"><span class="comment">//stu[a].total_score += c;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(stu[a].s[b] &lt; c)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//stu[a].total_score += (c - stu[a].s[b]);</span></span><br><span class="line">stu[a].s[b] = c;</span><br><span class="line">stu[a].fpass ++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 编译不过 </span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(stu[a].s[b] == <span class="number">-2</span>)</span><br><span class="line">&#123;</span><br><span class="line">stu[a].s[b] = c;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不是满分</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(stu[a].s[b] &lt; c)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//stu[a].total_score += (c - stu[a].s[b]);</span></span><br><span class="line">stu[a].s[b] = c;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 计算总分</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> w = <span class="number">0</span>;</span><br><span class="line">stu[i].id = i; </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= k; j ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> t = stu[i].s[j];</span><br><span class="line"><span class="keyword">if</span>(t == <span class="number">-1</span> || t == <span class="number">-2</span>)</span><br><span class="line">&#123;</span><br><span class="line">w ++;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">stu[i].total_score += t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(w == k) stu[i].r = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 排序 </span></span><br><span class="line">sort(stu + <span class="number">1</span>, stu + <span class="number">1</span> + n, cmp);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="type">int</span> cnt = <span class="number">1</span>, t = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(stu[i].r) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(t &amp;&amp; stu[i].total_score != stu[i - <span class="number">1</span>].total_score)</span><br><span class="line">cnt = i;</span><br><span class="line">t = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %05d %d &quot;</span>, cnt, stu[i].id, stu[i].total_score);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= k; j ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(flag) <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(stu[i].s[j] == <span class="number">-1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(stu[i].s[j] == <span class="number">-2</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, stu[i].s[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-49-Sort-with-Swap-0-i"><a href="#7-49-Sort-with-Swap-0-i" class="headerlink" title="7-49 Sort with Swap(0, i)"></a>7-49 Sort with Swap(0, i)</h3><h4 id="题目大意：-11"><a href="#题目大意：-11" class="headerlink" title="题目大意："></a>题目大意：</h4><p>给定一个长度为N的序列，{0，1，2，·····，N-1}的随机排列，每次只能交换0和一个其他数字，输出让每个数字到对应的位置需要交换几步。</p><p>Given any permutation of the numbers {0, 1, 2,…, <em>N</em>−1}, it is easy to sort them in increasing order. But what if <code>Swap(0, *)</code> is the ONLY operation that is allowed to use? For example, to sort {4, 0, 2, 1, 3} we may apply the swap operations in the following way:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Swap(0, 1) =&gt; &#123;4, 1, 2, 0, 3&#125;</span><br><span class="line">Swap(0, 3) =&gt; &#123;4, 1, 2, 3, 0&#125;</span><br><span class="line">Swap(0, 4) =&gt; &#123;0, 1, 2, 3, 4&#125;</span><br></pre></td></tr></table></figure><p>Now you are asked to find the minimum number of swaps need to sort the given permutation of the first <em>N</em> nonnegative integers.</p><h4 id="Input-Specification-11"><a href="#Input-Specification-11" class="headerlink" title="Input Specification:"></a>Input Specification:</h4><p>Each input file contains one test case, which gives a positive <em>N</em> (≤105) followed by a permutation sequence of {0, 1, …, <em>N</em>−1}. All the numbers in a line are separated by a space.</p><h4 id="Output-Specification-11"><a href="#Output-Specification-11" class="headerlink" title="Output Specification:"></a>Output Specification:</h4><p>For each case, simply print in a line the minimum number of swaps need to sort the given permutation.</p><h4 id="Sample-Input-6"><a href="#Sample-Input-6" class="headerlink" title="Sample Input:"></a>Sample Input:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">3 5 7 2 6 4 9 0 8 1</span><br></pre></td></tr></table></figure><h4 id="Sample-Output-6"><a href="#Sample-Output-6" class="headerlink" title="Sample Output:"></a>Sample Output:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">9</span><br></pre></td></tr></table></figure><h4 id="思路：-26"><a href="#思路：-26" class="headerlink" title="思路："></a>思路：</h4><ul><li><p>可以看出序列是由一个或多个环组成的，按环交换一遍后可以让对应的元素到相应的位置。</p></li><li><p>以q[0]为哨兵，当环交换以后，如果环包含0那么0必定在q[0]。</p></li><li><p>遍历一遍看每个元素是否在相应的位置上</p></li><li><ul><li>如果q[0] !&#x3D; 0，则把环交换一遍。<br>    - 如果交换一遍之后仍然不在相应位置，就把该数与q[0]交换。<br>    - 每次交换数的时候就把答案加1，最后得到的步骤数即为答案。</li></ul></li><li><p><em>如果环内包含0，那么交换一遍的步骤为环内元素个数减一；如果不包含0，则需要把0引入最后再交换出去，步骤数为环内元素个数加一。</em></p></li></ul><h4 id="AC代码：-27"><a href="#AC代码：-27" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, ans;</span><br><span class="line"><span class="type">int</span> q[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap_sort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i != q[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(q[<span class="number">0</span>] != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">swap</span>(q[<span class="number">0</span>], q[q[<span class="number">0</span>]]);</span><br><span class="line">ans ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i != q[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">swap</span>(q[<span class="number">0</span>], q[i]);</span><br><span class="line">ans ++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q[i]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">swap_sort</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-50-电话聊天狂人"><a href="#7-50-电话聊天狂人" class="headerlink" title="7-50 电话聊天狂人"></a>7-50 电话聊天狂人</h3><p>给定大量手机用户通话记录，找出其中通话次数最多的聊天狂人。</p><h4 id="输入格式-5"><a href="#输入格式-5" class="headerlink" title="输入格式:"></a>输入格式:</h4><p>输入首先给出正整数<em>N</em>（≤105），为通话记录条数。随后<em>N</em>行，每行给出一条通话记录。简单起见，这里只列出拨出方和接收方的11位数字构成的手机号码，其中以空格分隔。</p><h4 id="输出格式-5"><a href="#输出格式-5" class="headerlink" title="输出格式:"></a>输出格式:</h4><p>在一行中给出聊天狂人的手机号码及其通话次数，其间以空格分隔。如果这样的人不唯一，则输出狂人中最小的号码及其通话次数，并且附加给出并列狂人的人数。</p><h4 id="输入样例-4"><a href="#输入样例-4" class="headerlink" title="输入样例:"></a>输入样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">13005711862 13588625832</span><br><span class="line">13505711862 13088625832</span><br><span class="line">13588625832 18087925832</span><br><span class="line">15005713862 13588625832</span><br></pre></td></tr></table></figure><h4 id="输出样例-4"><a href="#输出样例-4" class="headerlink" title="输出样例:"></a>输出样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">13588625832 3</span><br></pre></td></tr></table></figure><h4 id="思路：-27"><a href="#思路：-27" class="headerlink" title="思路："></a>思路：</h4><ul><li>刚开始以为要排序，后来发现直接遍历一遍就可以了。</li><li>用map储存电话号码和拨打次数，每次遇见号码就直接加一。</li><li>遍历map里面的所有元素，如果拨打次数大则更新一下答案，如果次数相等就把人数加一，每次更新电话号码的时候把sum置为1，当次数相等时题目要求输出号码小的，就在相等的条件里面加一个判断，更新一下电话就可以。</li><li>刚开始我没写相等时输出电话小的，不知道是不是没有卡这个点。</li></ul><h4 id="AC代码：-28"><a href="#AC代码：-28" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">map&lt;string, <span class="type">int</span>&gt; ma;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">string a, b;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">ma[a] ++;</span><br><span class="line">ma[b] ++;</span><br><span class="line">&#125;</span><br><span class="line">string ans;</span><br><span class="line"><span class="type">int</span> max_ans = <span class="number">0</span>, sum = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it = ma.<span class="built_in">begin</span>(); it != ma.<span class="built_in">end</span>(); it ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(it -&gt; second &gt; max_ans)</span><br><span class="line">&#123;</span><br><span class="line">ans = it -&gt; first;</span><br><span class="line">max_ans = it -&gt; second;</span><br><span class="line">sum = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(it -&gt; second == max_ans)</span><br><span class="line">&#123;</span><br><span class="line">sum ++;</span><br><span class="line">            <span class="comment">// 如果电话号码小，则更新</span></span><br><span class="line">            <span class="keyword">if</span>(ans &gt; it -&gt; first)</span><br><span class="line">                ans = it -&gt; first;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">if</span>(sum == <span class="number">1</span>) cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; max_ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; max_ans &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-52-QQ帐户的申请与登陆"><a href="#7-52-QQ帐户的申请与登陆" class="headerlink" title="7-52 QQ帐户的申请与登陆"></a>7-52 QQ帐户的申请与登陆</h3><p>实现QQ新帐户申请和老帐户登陆的简化版功能。最大挑战是：据说现在的QQ号码已经有10位数了。</p><h4 id="输入格式-6"><a href="#输入格式-6" class="headerlink" title="输入格式:"></a>输入格式:</h4><p>输入首先给出一个正整数<em>N</em>（≤105），随后给出<em>N</em>行指令。每行指令的格式为：“命令符（空格）QQ号码（空格）密码”。其中命令符为“N”（代表New）时表示要新申请一个QQ号，后面是新帐户的号码和密码；命令符为“L”（代表Login）时表示是老帐户登陆，后面是登陆信息。QQ号码为一个不超过10位、但大于1000（据说QQ老总的号码是1001）的整数。密码为不小于6位、不超过16位、且不包含空格的字符串。</p><h4 id="输出格式-6"><a href="#输出格式-6" class="headerlink" title="输出格式:"></a>输出格式:</h4><p>针对每条指令，给出相应的信息：</p><p>1）若新申请帐户成功，则输出“New: OK”；<br>2）若新申请的号码已经存在，则输出“ERROR: Exist”；<br>3）若老帐户登陆成功，则输出“Login: OK”；<br>4）若老帐户QQ号码不存在，则输出“ERROR: Not Exist”；<br>5）若老帐户密码错误，则输出“ERROR: Wrong PW”。</p><h4 id="输入样例-5"><a href="#输入样例-5" class="headerlink" title="输入样例:"></a>输入样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">L 1234567890 myQQ@qq.com</span><br><span class="line">N 1234567890 myQQ@qq.com</span><br><span class="line">N 1234567890 myQQ@qq.com</span><br><span class="line">L 1234567890 myQQ@qq</span><br><span class="line">L 1234567890 myQQ@qq.com</span><br></pre></td></tr></table></figure><h4 id="输出样例-5"><a href="#输出样例-5" class="headerlink" title="输出样例:"></a>输出样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ERROR: Not Exist</span><br><span class="line">New: OK</span><br><span class="line">ERROR: Exist</span><br><span class="line">ERROR: Wrong PW</span><br><span class="line">Login: OK</span><br></pre></td></tr></table></figure><h4 id="思路：-28"><a href="#思路：-28" class="headerlink" title="思路："></a>思路：</h4><ul><li>用map来储存每个账号和对应的密码，find去查找。</li><li>按题给情况分析输出就可以。</li></ul><h4 id="AC代码：-29"><a href="#AC代码：-29" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">map&lt;string, string&gt; ma;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(n -- )</span><br><span class="line">&#123;</span><br><span class="line">string num, pw;</span><br><span class="line"><span class="type">char</span> op[<span class="number">2</span>];</span><br><span class="line">cin &gt;&gt; op &gt;&gt; num &gt;&gt; pw;</span><br><span class="line"><span class="keyword">if</span>(*op == <span class="string">&#x27;N&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ma.<span class="built_in">find</span>(num) != ma.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;ERROR: Exist&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ma[num] = pw;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;New: OK&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ma.<span class="built_in">find</span>(num) != ma.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ma[num] != pw)</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;ERROR: Wrong PW&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Login: OK&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;ERROR: Not Exist&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-54-Harry-Potter’s-Exam（同43）"><a href="#7-54-Harry-Potter’s-Exam（同43）" class="headerlink" title="7-54 Harry Potter’s Exam（同43）"></a>7-54 Harry Potter’s Exam（同43）</h3><h3 id="7-55-QQ-Account-Management（同52）"><a href="#7-55-QQ-Account-Management（同52）" class="headerlink" title="7-55 QQ Account Management（同52）"></a>7-55 QQ Account Management（同52）</h3><h3 id="7-56-The-World’s-Richest"><a href="#7-56-The-World’s-Richest" class="headerlink" title="7-56 The World’s Richest"></a>7-56 The World’s Richest</h3><h4 id="题目大意：-12"><a href="#题目大意：-12" class="headerlink" title="题目大意："></a>题目大意：</h4><p>给定一个n和k，接下来n行，每行是一个人的姓名，年龄，资产，然后给k个询问，每个询问有三个数据，m，l ，r。m是输出数量，和一个年龄范围[ l , r ]，输出这个年龄范围内所有人按资产，年龄，姓名排序，输出前m个，如果不足m个，就输出有的，如果这个范围内没有人就输出None。</p><p>Forbes magazine publishes every year its list of billionaires based on the annual ranking of the world’s wealthiest people. Now you are supposed to simulate this job, but concentrate only on the people in a certain range of ages. That is, given the net worths of N people, you must find the M richest people in a given range of their ages.</p><h4 id="Input-Specification-12"><a href="#Input-Specification-12" class="headerlink" title="Input Specification:"></a>Input Specification:</h4><p>Each input file contains one test case. For each case, the first line contains 2 positive integers: <code>N</code> (≤105) - the total number of people, and <code>K</code> (≤103) - the number of queries. Then <code>N</code> lines follow, each contains the name (string of no more than 8 characters without space), age (integer in (0, 200]), and the net worth (integer in [−106, 106]) of a person. Finally there are <code>K</code> lines of queries, each contains three positive integers: <code>M</code> (≤ 100) - the maximum number of outputs, and [<em>A**min</em>, <em>A<strong>ma</strong>x</em>] which are the range of ages. All the numbers in a line are separated by a space.</p><h4 id="Output-Specification-12"><a href="#Output-Specification-12" class="headerlink" title="Output Specification:"></a>Output Specification:</h4><p>For each query, first print in a line <code>Case #X:</code> where <code>X</code> is the query number starting from 1. Then output the <code>M</code> richest people with their ages in the range [<em>A**min</em>, <em>A<strong>ma</strong>x</em>]. Each person’s information occupies a line, in the format <code>Name Age Net_Worth</code>.</p><p>The outputs must be in non-increasing order of the net worths. In case there are equal worths, it must be in non-decreasing order of the ages. If both worths and ages are the same, then the output must be in non-decreasing alphabetical order of the names. It is guaranteed that there is no two persons share all the same of the three pieces of information. In case no one is found, output <code>None</code>.</p><h4 id="Sample-Input-7"><a href="#Sample-Input-7" class="headerlink" title="Sample Input:"></a>Sample Input:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">12 4</span><br><span class="line">Zoe_Bill 35 2333</span><br><span class="line">Bob_Volk 24 5888</span><br><span class="line">Anny_Cin 95 999999</span><br><span class="line">Williams 30 -22</span><br><span class="line">Cindy 76 76000</span><br><span class="line">Alice 18 88888</span><br><span class="line">Joe_Mike 32 3222</span><br><span class="line">Michael 5 300000</span><br><span class="line">Rosemary 40 5888</span><br><span class="line">Dobby 24 5888</span><br><span class="line">Billy 24 5888</span><br><span class="line">Nobody 5 0</span><br><span class="line">4 15 45</span><br><span class="line">4 30 35</span><br><span class="line">4 5 95</span><br><span class="line">1 45 50</span><br></pre></td></tr></table></figure><h4 id="Sample-Output-7"><a href="#Sample-Output-7" class="headerlink" title="Sample Output:"></a>Sample Output:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Case #1:</span><br><span class="line">Alice 18 88888</span><br><span class="line">Billy 24 5888</span><br><span class="line">Bob_Volk 24 5888</span><br><span class="line">Dobby 24 5888</span><br><span class="line">Case #2:</span><br><span class="line">Joe_Mike 32 3222</span><br><span class="line">Zoe_Bill 35 2333</span><br><span class="line">Williams 30 -22</span><br><span class="line">Case #3:</span><br><span class="line">Anny_Cin 95 999999</span><br><span class="line">Michael 5 300000</span><br><span class="line">Alice 18 88888</span><br><span class="line">Cindy 76 76000</span><br><span class="line">Case #4:</span><br><span class="line">None</span><br></pre></td></tr></table></figure><h4 id="思路：-29"><a href="#思路：-29" class="headerlink" title="思路："></a>思路：</h4><ul><li>这个题目，就是储存，排序和查询，然后按题目要求输出查询结果就可。</li><li>有个点就是会卡时间，所以不能每次找到年龄段内的人，然后再排序。</li><li>可以读入所有数据后把数据排好序，然后遍历找到年龄段内的人，直接输出即可。</li><li>我卡一个点是vector动态申请会超时，所以每次读入n后直接把vector的大小预申请出来。</li></ul><h4 id="AC代码：-30"><a href="#AC代码：-30" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> id[<span class="number">10</span>];</span><br><span class="line">    <span class="type">int</span> age, mony;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, k;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node a, node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a.mony != b.mony)</span><br><span class="line"><span class="keyword">return</span> a.mony &gt; b.mony;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a.age != b.age)</span><br><span class="line"><span class="keyword">return</span> a.age &lt; b.age;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">strcmp</span>(a.id, b.id) &lt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line"><span class="function">vector&lt;node&gt; <span class="title">ma</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s %d %d&quot;</span>, ma[i].id, &amp;ma[i].age, &amp;ma[i].mony);</span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(ma.<span class="built_in">begin</span>(), ma.<span class="built_in">end</span>(), cmp);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(k -- )</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> cnt, l, r;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;cnt, &amp;l, &amp;r);</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="type">int</span> flag = <span class="number">1</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Case #&quot;</span> &lt;&lt; num &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; endl;</span><br><span class="line">num ++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it = ma.<span class="built_in">begin</span>(); it != ma.<span class="built_in">end</span>(); it ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!cnt) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span>(it-&gt;age &gt;= l &amp;&amp; it-&gt;age &lt;= r)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; it-&gt;id &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; it-&gt;age &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; it-&gt;mony &lt;&lt; endl;</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line">cnt --;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag) cout &lt;&lt; <span class="string">&quot;None&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-57-汉诺塔的非递归实现"><a href="#7-57-汉诺塔的非递归实现" class="headerlink" title="7-57 汉诺塔的非递归实现"></a>7-57 汉诺塔的非递归实现</h3><p>借助堆栈以非递归（循环）方式求解汉诺塔的问题（n, a, b, c），即将N个盘子从起始柱（标记为“a”）通过借助柱（标记为“b”）移动到目标柱（标记为“c”），并保证每个移动符合汉诺塔问题的要求。</p><h4 id="输入格式-7"><a href="#输入格式-7" class="headerlink" title="输入格式:"></a>输入格式:</h4><p>输入为一个正整数N，即起始柱上的盘数。</p><h4 id="输出格式-7"><a href="#输出格式-7" class="headerlink" title="输出格式:"></a>输出格式:</h4><p>每个操作（移动）占一行，按<code>柱1 -&gt; 柱2</code>的格式输出。</p><h4 id="输入样例-6"><a href="#输入样例-6" class="headerlink" title="输入样例:"></a>输入样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h4 id="输出样例-6"><a href="#输出样例-6" class="headerlink" title="输出样例:"></a>输出样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a -&gt; c</span><br><span class="line">a -&gt; b</span><br><span class="line">c -&gt; b</span><br><span class="line">a -&gt; c</span><br><span class="line">b -&gt; a</span><br><span class="line">b -&gt; c</span><br><span class="line">a -&gt; c</span><br></pre></td></tr></table></figure><h4 id="思路：-30"><a href="#思路：-30" class="headerlink" title="思路："></a>思路：</h4><ul><li>递归问题</li><li><ul><li>当n &#x3D; 1时，直接从a -&gt; c。<br>    - 当n !&#x3D; 1时，把n - 1个先从a -&gt; b，然后把最下面的一个从a -&gt; c，再把n - 1个从b -&gt; c。</li></ul></li></ul><h4 id="AC代码：-31"><a href="#AC代码：-31" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">char</span> a, b, c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">stack&lt;node&gt; stk;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">h</span><span class="params">(<span class="type">int</span> n, <span class="type">char</span> a, <span class="type">char</span> b, <span class="type">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c -&gt; %c\n&quot;</span>, a, c);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">h</span>(n - <span class="number">1</span>, a, c, b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c -&gt; %c\n&quot;</span>, a, c);</span><br><span class="line"><span class="built_in">h</span>(n - <span class="number">1</span>, b, a, c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="comment">//h(n, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;);</span></span><br><span class="line"></span><br><span class="line">stk.<span class="built_in">push</span>(&#123;n, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;);</span><br><span class="line"><span class="keyword">while</span>(!stk.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">node t = stk.<span class="built_in">top</span>();</span><br><span class="line">stk.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span>(t.n == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c -&gt; %c\n&quot;</span>, t.a, t.c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 把 n - 1 个通过 a 移动到 c 上 </span></span><br><span class="line">stk.<span class="built_in">push</span>(&#123;t.n - <span class="number">1</span>, t.b, t.a, t.c&#125;);</span><br><span class="line"><span class="comment">// 把剩下的一个直接从 a 移动到 a 上</span></span><br><span class="line">stk.<span class="built_in">push</span>(&#123;<span class="number">1</span>, t.a, t.b, t.c&#125;);</span><br><span class="line"><span class="comment">// 把 n - 1 个通过 c 移动到 b 上 </span></span><br><span class="line">stk.<span class="built_in">push</span>(&#123;t.n - <span class="number">1</span>, t.a, t.c, t.b&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 栈是后入先出的数据结构所以压入的时候要反过来。 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-58-堆栈模拟队列"><a href="#7-58-堆栈模拟队列" class="headerlink" title="7-58 堆栈模拟队列"></a>7-58 堆栈模拟队列</h3><p>设已知有两个堆栈S1和S2，请用这两个堆栈模拟出一个队列Q。</p><p>所谓用堆栈模拟队列，实际上就是通过调用堆栈的下列操作函数:</p><ul><li><code>int IsFull(Stack S)</code>：判断堆栈<code>S</code>是否已满，返回1或0；</li><li><code>int IsEmpty (Stack S )</code>：判断堆栈<code>S</code>是否为空，返回1或0；</li><li><code>void Push(Stack S, ElementType item )</code>：将元素<code>item</code>压入堆栈<code>S</code>；</li><li><code>ElementType Pop(Stack S )</code>：删除并返回<code>S</code>的栈顶元素。</li></ul><p>实现队列的操作，即入队<code>void AddQ(ElementType item)</code>和出队<code>ElementType DeleteQ()</code>。</p><h4 id="输入格式-8"><a href="#输入格式-8" class="headerlink" title="输入格式:"></a>输入格式:</h4><p>输入首先给出两个正整数<code>N1</code>和<code>N2</code>，表示堆栈<code>S1</code>和<code>S2</code>的最大容量。随后给出一系列的队列操作：<code>A item</code>表示将<code>item</code>入列（这里假设<code>item</code>为整型数字）；<code>D</code>表示出队操作；<code>T</code>表示输入结束。</p><h4 id="输出格式-8"><a href="#输出格式-8" class="headerlink" title="输出格式:"></a>输出格式:</h4><p>对输入中的每个<code>D</code>操作，输出相应出队的数字，或者错误信息<code>ERROR:Empty</code>。如果入队操作无法执行，也需要输出<code>ERROR:Full</code>。每个输出占1行。</p><h4 id="输入样例-7"><a href="#输入样例-7" class="headerlink" title="输入样例:"></a>输入样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3 2</span><br><span class="line">A 1 A 2 A 3 A 4 A 5 D A 6 D A 7 D A 8 D D D D T</span><br></pre></td></tr></table></figure><h4 id="输出样例-7"><a href="#输出样例-7" class="headerlink" title="输出样例:"></a>输出样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ERROR:Full</span><br><span class="line">1</span><br><span class="line">ERROR:Full</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">ERROR:Empty</span><br></pre></td></tr></table></figure><h4 id="思路：-31"><a href="#思路：-31" class="headerlink" title="思路："></a>思路：</h4><ul><li>当一个序列入栈再按栈的规则出栈进入第二个栈，那么第二个栈再出栈的顺序即为队列的顺序，所以两个栈，一个当作入栈，一个当作出栈，显然入栈的容量小一点。</li><li>入栈有三种情况：</li><li><ul><li>当入栈序列不满时，直接进入入栈序列即可。<br>    - 当入栈序列满，而出栈序列为空时，把入栈序列的数弹出压入到出栈序列。<br>    - 当入栈序列满，而出栈序列不为空时，此时不能往出栈序列里压数，判断为满。</li></ul></li><li>出栈有三种情况：</li><li><ul><li>当出栈序列不为空时，直接弹出即可。<br>    - 当出栈序列空，入栈序列不空时，把入栈序列的数加入出栈序列，再弹出。<br>    - 当出栈空，入栈空时，判断队列为空，输出空即可。</li></ul></li></ul><h4 id="AC代码：-32"><a href="#AC代码：-32" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n1, n2;</span><br><span class="line"><span class="type">int</span> s1[N], s2[N], t1, t2;</span><br><span class="line"><span class="comment">// s1 入栈，s2 出栈 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n1, &amp;n2);</span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line"><span class="comment">// 让大容量做为出栈</span></span><br><span class="line"><span class="type">int</span> IN, OUT;</span><br><span class="line"><span class="keyword">if</span>(n1 &lt; n2)</span><br><span class="line">&#123;</span><br><span class="line">IN = n1 - <span class="number">1</span>;</span><br><span class="line">OUT = n2 - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line">IN = n2 - <span class="number">1</span>;</span><br><span class="line">OUT = n1 - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">t1 = t2 = <span class="number">-1</span>;</span><br><span class="line"><span class="type">char</span> x;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;x);</span><br><span class="line"><span class="keyword">if</span>(x == <span class="string">&#x27;T&#x27;</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(x == <span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> item;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;item);</span><br><span class="line"><span class="comment">// 入栈满，出栈满 </span></span><br><span class="line"><span class="keyword">if</span>(t1 == IN &amp;&amp; t2 &gt; <span class="number">-1</span>) </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ERROR:Full\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 入栈满，出栈空 </span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(t1 == IN &amp;&amp; t2 == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(t1 &gt; <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">s2[++ t2] = s1[t1 --];</span><br><span class="line">&#125;</span><br><span class="line">s1[++ t1] = item;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 入栈不满 </span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">s1[++ t1] = item; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(x == <span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 入栈空，出栈空</span></span><br><span class="line"><span class="keyword">if</span>(t1 == <span class="number">-1</span> &amp;&amp; t2 == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ERROR:Empty\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 入栈不空，出栈空 </span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(t1 &gt; <span class="number">-1</span> &amp;&amp; t2 == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(t1 &gt; <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">s2[++ t2] = s1[t1 --];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, s2[t2 --]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 出栈不空 </span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, s2[t2 --]); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-59-还原二叉树"><a href="#7-59-还原二叉树" class="headerlink" title="7-59 还原二叉树"></a>7-59 还原二叉树</h3><p>给定一棵二叉树的先序遍历序列和中序遍历序列，要求计算该二叉树的高度。</p><h4 id="输入格式-9"><a href="#输入格式-9" class="headerlink" title="输入格式:"></a>输入格式:</h4><p>输入首先给出正整数N（≤50），为树中结点总数。下面两行先后给出先序和中序遍历序列，均是长度为N的不包含重复英文字母（区别大小写）的字符串。</p><h4 id="输出格式-9"><a href="#输出格式-9" class="headerlink" title="输出格式:"></a>输出格式:</h4><p>输出为一个整数，即该二叉树的高度。</p><h4 id="输入样例-8"><a href="#输入样例-8" class="headerlink" title="输入样例:"></a>输入样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">9</span><br><span class="line">ABDFGHIEC</span><br><span class="line">FDHGIBEAC</span><br></pre></td></tr></table></figure><h4 id="输出样例-8"><a href="#输出样例-8" class="headerlink" title="输出样例:"></a>输出样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><h4 id="思路：-32"><a href="#思路：-32" class="headerlink" title="思路："></a>思路：</h4><ul><li>这个题跟由前序和中序求后序一样，只不过不用输出后序序列，记录一下深度，每次如果深度大于答案后更新一下最大深度。</li><li>前序的第一个点即为二叉树的根节点，在中序序列中找到该点后，该点的左侧即为左子树，右侧即为右子树，只需要递归处理左右子树即可，每次层数都会加一，递归开始时都判断一下res是否需要更新，递归完以后res即为最大深度。</li></ul><h4 id="AC代码：-33"><a href="#AC代码：-33" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c"><figcaption><span>++</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">55</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, res;</span><br><span class="line"><span class="type">char</span> pre[N], in[N];</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">f</span><span class="params">(<span class="type">int</span> root, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> d)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(l &gt; r) <span class="keyword">return</span> ;</span><br><span class="line">res = max(res, d);</span><br><span class="line"><span class="type">int</span> i = l;</span><br><span class="line">    <span class="comment">// 找到根节点</span></span><br><span class="line"><span class="keyword">while</span>(i &lt; r &amp;&amp; in[i] != pre[root]) i ++;</span><br><span class="line"><span class="comment">// 左子树</span></span><br><span class="line">f(root + <span class="number">1</span>, l, i - <span class="number">1</span>, d + <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 右子树</span></span><br><span class="line">f(root + <span class="number">1</span> + i - l, i + <span class="number">1</span>, r, d + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s%s&quot;</span>, pre, in);</span><br><span class="line"></span><br><span class="line">f(<span class="number">0</span>, <span class="number">0</span>, n - <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, res);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-60-树种统计"><a href="#7-60-树种统计" class="headerlink" title="7-60 树种统计"></a>7-60 树种统计</h3><p>随着卫星成像技术的应用，自然资源研究机构可以识别每一棵树的种类。请编写程序帮助研究人员统计每种树的数量，计算每种树占总数的百分比。</p><h4 id="输入格式-10"><a href="#输入格式-10" class="headerlink" title="输入格式:"></a>输入格式:</h4><p>输入首先给出正整数N（≤105），随后N行，每行给出卫星观测到的一棵树的种类名称。种类名称由不超过30个英文字母和空格组成（大小写不区分）。</p><h4 id="输出格式-10"><a href="#输出格式-10" class="headerlink" title="输出格式:"></a>输出格式:</h4><p>按字典序递增输出各种树的种类名称及其所占总数的百分比，其间以空格分隔，保留小数点后4位。</p><h4 id="输入样例-9"><a href="#输入样例-9" class="headerlink" title="输入样例:"></a>输入样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">29</span><br><span class="line">Red Alder</span><br><span class="line">Ash</span><br><span class="line">Aspen</span><br><span class="line">Basswood</span><br><span class="line">Ash</span><br><span class="line">Beech</span><br><span class="line">Yellow Birch</span><br><span class="line">Ash</span><br><span class="line">Cherry</span><br><span class="line">Cottonwood</span><br><span class="line">Ash</span><br><span class="line">Cypress</span><br><span class="line">Red Elm</span><br><span class="line">Gum</span><br><span class="line">Hackberry</span><br><span class="line">White Oak</span><br><span class="line">Hickory</span><br><span class="line">Pecan</span><br><span class="line">Hard Maple</span><br><span class="line">White Oak</span><br><span class="line">Soft Maple</span><br><span class="line">Red Oak</span><br><span class="line">Red Oak</span><br><span class="line">White Oak</span><br><span class="line">Poplan</span><br><span class="line">Sassafras</span><br><span class="line">Sycamore</span><br><span class="line">Black Walnut</span><br><span class="line">Willow</span><br></pre></td></tr></table></figure><h4 id="输出样例-9"><a href="#输出样例-9" class="headerlink" title="输出样例:"></a>输出样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Ash 13.7931%</span><br><span class="line">Aspen 3.4483%</span><br><span class="line">Basswood 3.4483%</span><br><span class="line">Beech 3.4483%</span><br><span class="line">Black Walnut 3.4483%</span><br><span class="line">Cherry 3.4483%</span><br><span class="line">Cottonwood 3.4483%</span><br><span class="line">Cypress 3.4483%</span><br><span class="line">Gum 3.4483%</span><br><span class="line">Hackberry 3.4483%</span><br><span class="line">Hard Maple 3.4483%</span><br><span class="line">Hickory 3.4483%</span><br><span class="line">Pecan 3.4483%</span><br><span class="line">Poplan 3.4483%</span><br><span class="line">Red Alder 3.4483%</span><br><span class="line">Red Elm 3.4483%</span><br><span class="line">Red Oak 6.8966%</span><br><span class="line">Sassafras 3.4483%</span><br><span class="line">Soft Maple 3.4483%</span><br><span class="line">Sycamore 3.4483%</span><br><span class="line">White Oak 10.3448%</span><br><span class="line">Willow 3.4483%</span><br><span class="line">Yellow Birch 3.4483%</span><br></pre></td></tr></table></figure><h4 id="思路：-33"><a href="#思路：-33" class="headerlink" title="思路："></a>思路：</h4><ul><li>用map把每个名字储存和数量储存下来，因为map是按key值排序的所以直接遍历一遍然后输出名字和比例就可以了。</li></ul><h4 id="AC代码：-34"><a href="#AC代码：-34" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">map&lt;string, <span class="type">int</span>&gt; ma;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">string s;</span><br><span class="line"><span class="built_in">getline</span>(cin, s);</span><br><span class="line">ma[s] ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it = ma.<span class="built_in">begin</span>(); it != ma.<span class="built_in">end</span>(); it ++ )</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; it-&gt;x &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.4f%\n&quot;</span>, <span class="number">100.0</span> * it-&gt;y / n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-61-朋友圈"><a href="#7-61-朋友圈" class="headerlink" title="7-61 朋友圈"></a>7-61 朋友圈</h3><p>某学校有N个学生，形成M个俱乐部。每个俱乐部里的学生有着一定相似的兴趣爱好，形成一个朋友圈。一个学生可以同时属于若干个不同的俱乐部。根据“我的朋友的朋友也是我的朋友”这个推论可以得出，如果A和B是朋友，且B和C是朋友，则A和C也是朋友。请编写程序计算最大朋友圈中有多少人。</p><h4 id="输入格式-11"><a href="#输入格式-11" class="headerlink" title="输入格式:"></a>输入格式:</h4><p>输入的第一行包含两个正整数N（≤30000）和M（≤1000），分别代表学校的学生总数和俱乐部的个数。后面的M行每行按以下格式给出1个俱乐部的信息，其中学生从1~N编号：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">第i个俱乐部的人数Mi（空格）学生1（空格）学生2 … 学生Mi</span><br></pre></td></tr></table></figure><h4 id="输出格式-11"><a href="#输出格式-11" class="headerlink" title="输出格式:"></a>输出格式:</h4><p>输出给出一个整数，表示在最大朋友圈中有多少人。</p><h4 id="输入样例-10"><a href="#输入样例-10" class="headerlink" title="输入样例:"></a>输入样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">7 4</span><br><span class="line">3 1 2 3</span><br><span class="line">2 1 4</span><br><span class="line">3 5 6 7</span><br><span class="line">1 6</span><br></pre></td></tr></table></figure><h4 id="输出样例-10"><a href="#输出样例-10" class="headerlink" title="输出样例:"></a>输出样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><h4 id="思路：-34"><a href="#思路：-34" class="headerlink" title="思路："></a>思路：</h4><ul><li>并查集应用。</li><li>把同一个朋友圈的人加到一个集合里，最后遍历一遍，然后如果在同一个集合里就把数量加加，及时更新最大值即可。</li></ul><h4 id="AC代码：-35"><a href="#AC代码：-35" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">30010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> p[N], num[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p[x] != x) p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line"><span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="comment">// 初始化并查集 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i ++ )</span><br><span class="line">p[i] = i;</span><br><span class="line"><span class="keyword">while</span>(m -- )</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x, t1;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;t1);</span><br><span class="line">x --;</span><br><span class="line"><span class="keyword">while</span>(x -- )</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> t2;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t2);</span><br><span class="line">p[<span class="built_in">find</span>(t2)] = <span class="built_in">find</span>(t1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> t = <span class="built_in">find</span>(i);</span><br><span class="line">num[t] ++;</span><br><span class="line">res = <span class="built_in">max</span>(res, num[t]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, res);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-62-Windows消息队列"><a href="#7-62-Windows消息队列" class="headerlink" title="7-62 Windows消息队列"></a>7-62 Windows消息队列</h3><p>消息队列是Windows系统的基础。对于每个进程，系统维护一个消息队列。如果在进程中有特定事件发生，如点击鼠标、文字改变等，系统将把这个消息加到队列当中。同时，如果队列不是空的，这一进程循环地从队列中按照优先级获取消息。请注意优先级值低意味着优先级高。请编辑程序模拟消息队列，将消息加到队列中以及从队列中获取消息。</p><h4 id="输入格式-12"><a href="#输入格式-12" class="headerlink" title="输入格式:"></a>输入格式:</h4><p>输入首先给出正整数N（≤105），随后N行，每行给出一个指令——<code>GET</code>或<code>PUT</code>，分别表示从队列中取出消息或将消息添加到队列中。如果指令是<code>PUT</code>，后面就有一个消息名称、以及一个正整数表示消息的优先级，此数越小表示优先级越高。消息名称是长度不超过10个字符且不含空格的字符串；题目保证队列中消息的优先级无重复，且输入至少有一个<code>GET</code>。</p><h4 id="输出格式-12"><a href="#输出格式-12" class="headerlink" title="输出格式:"></a>输出格式:</h4><p>对于每个<code>GET</code>指令，在一行中输出消息队列中优先级最高的消息的名称和参数。如果消息队列中没有消息，输出<code>EMPTY QUEUE!</code>。对于<code>PUT</code>指令则没有输出。</p><h4 id="输入样例-11"><a href="#输入样例-11" class="headerlink" title="输入样例:"></a>输入样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">9</span><br><span class="line">PUT msg1 5</span><br><span class="line">PUT msg2 4</span><br><span class="line">GET</span><br><span class="line">PUT msg3 2</span><br><span class="line">PUT msg4 4</span><br><span class="line">GET</span><br><span class="line">GET</span><br><span class="line">GET</span><br><span class="line">GET</span><br></pre></td></tr></table></figure><h4 id="输出样例-11"><a href="#输出样例-11" class="headerlink" title="输出样例:"></a>输出样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">msg2</span><br><span class="line">msg3</span><br><span class="line">msg4</span><br><span class="line">msg1</span><br><span class="line">EMPTY QUEUE!</span><br></pre></td></tr></table></figure><h4 id="思路：-35"><a href="#思路：-35" class="headerlink" title="思路："></a>思路：</h4><ul><li>调用优先队列就是堆，然后每次直接输出堆顶就可以了，重载结构体内的小于号，让消息队列排序按照优先级。</li><li>每次读入命令后判断，如果是输入就压入队列，如果是输出，就把堆顶拿出，然后弹出，每次记得判断队列是否为空，为空即输出空。</li></ul><h4 id="AC代码：-36"><a href="#AC代码：-36" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> name[<span class="number">15</span>];</span><br><span class="line"><span class="type">int</span> rank;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &lt;(<span class="type">const</span> node x) <span class="type">const</span>&#123;</span><br><span class="line"><span class="keyword">return</span> rank &gt; x.rank;</span><br><span class="line">&#125;</span><br><span class="line">&#125;w;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">string op, p;</span><br><span class="line">priority_queue&lt;node&gt; q;</span><br><span class="line"><span class="comment">// 优先队列，堆，重载小于号 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">p = <span class="string">&quot;PUT&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; op;</span><br><span class="line"><span class="keyword">if</span>(op == p)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; w.name &gt;&gt; w.rank;</span><br><span class="line">q.<span class="built_in">push</span>(w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;EMPTY QUEUE!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">w = q.<span class="built_in">top</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line">cout &lt;&lt; w.name &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-64-修理牧场"><a href="#7-64-修理牧场" class="headerlink" title="7-64 修理牧场"></a>7-64 修理牧场</h3><p>农夫要修理牧场的一段栅栏，他测量了栅栏，发现需要<em>N</em>块木头，每块木头长度为整数<em>L**i</em>个长度单位，于是他购买了一条很长的、能锯成<em>N</em>块的木头，即该木头的长度是<em>L**i</em>的总和。</p><p>但是农夫自己没有锯子，请人锯木的酬金跟这段木头的长度成正比。为简单起见，不妨就设酬金等于所锯木头的长度。例如，要将长度为20的木头锯成长度为8、7和5的三段，第一次锯木头花费20，将木头锯成12和8；第二次锯木头花费12，将长度为12的木头锯成7和5，总花费为32。如果第一次将木头锯成15和5，则第二次锯木头花费15，总花费为35（大于32）。</p><p>请编写程序帮助农夫计算将木头锯成<em>N</em>块的最少花费。</p><h4 id="输入格式-13"><a href="#输入格式-13" class="headerlink" title="输入格式:"></a>输入格式:</h4><p>输入首先给出正整数<em>N</em>（≤104），表示要将木头锯成<em>N</em>块。第二行给出<em>N</em>个正整数（≤50），表示每段木块的长度。</p><h4 id="输出格式-13"><a href="#输出格式-13" class="headerlink" title="输出格式:"></a>输出格式:</h4><p>输出一个整数，即将木头锯成<em>N</em>块的最少花费。</p><h4 id="输入样例-12"><a href="#输入样例-12" class="headerlink" title="输入样例:"></a>输入样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">4 5 1 2 1 3 1 1</span><br></pre></td></tr></table></figure><h4 id="输出样例-12"><a href="#输出样例-12" class="headerlink" title="输出样例:"></a>输出样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">49</span><br></pre></td></tr></table></figure><h4 id="思路：-36"><a href="#思路：-36" class="headerlink" title="思路："></a>思路：</h4><ul><li>刚看到这个题目以为是要用贪心去解，后来发现考察的是哈夫曼树，最小生成树。</li><li>每次选最小的两个连到一起生成树，然后把值加到序列里，再去选最小的，最后的哈夫曼树的树根即为答案。</li><li>用到了STL里的优先队列（堆），自动排序，每次去堆顶就可以了，然后把加一起以后的值加入被选序列里。</li></ul><h4 id="AC代码：-37"><a href="#AC代码：-37" class="headerlink" title="AC代码："></a>AC代码：</h4><h5 id="调用STL"><a href="#调用STL" class="headerlink" title="调用STL"></a>调用STL</h5><figure class="highlight c"><figcaption><span>++</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, sum;</span><br><span class="line"><span class="built_in">priority_queue</span>&lt;<span class="type">int</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt; &gt;q;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">q.push(x); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(q.size() &gt; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> t1 = q.top(); q.pop();</span><br><span class="line"><span class="type">int</span> t2 = q.top(); q.pop();</span><br><span class="line">sum += t1 + t2;</span><br><span class="line">q.push(t1 + t2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, sum);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="数组实现"><a href="#数组实现" class="headerlink" title="数组实现"></a>数组实现</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(a + <span class="number">1</span>, a + <span class="number">1</span> + n);</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) &#123;</span><br><span class="line">sum += a[i] + a[i + <span class="number">1</span>];</span><br><span class="line">a[i + <span class="number">1</span>] += a[i];</span><br><span class="line"><span class="built_in">sort</span>(a + <span class="number">1</span> + i, a + <span class="number">1</span> + n); </span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; sum - a[n];</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="7-66-哥尼斯堡的“七桥问题”"><a href="#7-66-哥尼斯堡的“七桥问题”" class="headerlink" title="7-66 哥尼斯堡的“七桥问题”"></a>7-66 哥尼斯堡的“七桥问题”</h3><p>哥尼斯堡是位于普累格河上的一座城市，它包含两个岛屿及连接它们的七座桥，如下图所示。</p><p><img src="https://images.ptausercontent.com/51" alt="img"></p><p>可否走过这样的七座桥，而且每桥只走过一次？瑞士数学家欧拉(Leonhard Euler，1707—1783)最终解决了这个问题，并由此创立了拓扑学。</p><p>这个问题如今可以描述为判断欧拉回路是否存在的问题。欧拉回路是指不令笔离开纸面，可画过图中每条边仅一次，且可以回到起点的一条回路。现给定一个无向图，问是否存在欧拉回路？</p><h4 id="输入格式-14"><a href="#输入格式-14" class="headerlink" title="输入格式:"></a>输入格式:</h4><p>输入第一行给出两个正整数，分别是节点数<em>N</em> (1≤<em>N</em>≤1000)和边数<em>M</em>；随后的<em>M</em>行对应<em>M</em>条边，每行给出一对正整数，分别是该条边直接连通的两个节点的编号（节点从1到<em>N</em>编号）。</p><h4 id="输出格式-14"><a href="#输出格式-14" class="headerlink" title="输出格式:"></a>输出格式:</h4><p>若欧拉回路存在则输出1，否则输出0。</p><h4 id="输入样例1"><a href="#输入样例1" class="headerlink" title="输入样例1:"></a>输入样例1:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">6 10</span><br><span class="line">1 2</span><br><span class="line">2 3</span><br><span class="line">3 1</span><br><span class="line">4 5</span><br><span class="line">5 6</span><br><span class="line">6 4</span><br><span class="line">1 4</span><br><span class="line">1 6</span><br><span class="line">3 4</span><br><span class="line">3 6</span><br></pre></td></tr></table></figure><h4 id="输出样例1-1"><a href="#输出样例1-1" class="headerlink" title="输出样例1:"></a>输出样例1:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><h4 id="输入样例2"><a href="#输入样例2" class="headerlink" title="输入样例2:"></a>输入样例2:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">5 8</span><br><span class="line">1 2</span><br><span class="line">1 3</span><br><span class="line">2 3</span><br><span class="line">2 4</span><br><span class="line">2 5</span><br><span class="line">5 3</span><br><span class="line">5 4</span><br><span class="line">3 4</span><br></pre></td></tr></table></figure><h4 id="输出样例2-1"><a href="#输出样例2-1" class="headerlink" title="输出样例2:"></a>输出样例2:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure><h4 id="思路：-37"><a href="#思路：-37" class="headerlink" title="思路："></a>思路：</h4><ul><li><p>欧拉回路知识点：</p><ul><li><p>定义</p><p>  如果图G（有向图或者无向图）中所有边一次仅且一次行遍所有顶点的通路称作欧拉通路。如果图G中所有边一次仅且一次行遍所有顶点的回路称作欧拉回路。具有欧拉回路的图称为欧拉图（简称E图）。具有欧拉通路但不具有欧拉回路的图称为半欧拉图。</p></li><li><p>欧拉回路存在的判断方法</p><ul><li>有向图：图连通；所有的顶点的入度等于出度。</li><li>无向图：图连通；所有点的度必须为偶数。</li></ul></li><li><p>欧拉通路存在的判断方法</p><ul><li>有向图：图连通；所有点中除去两个点其他点的入度等于出度；除去的两个特殊点一个是入度-出度&#x3D;1，一个是出度-入度&#x3D;1。</li><li>无向图：图连通；所有点除去两个点其他点的度均为偶数；除去的两个点度为奇数。</li></ul></li></ul></li><li><p>储存点的时候把每个点的度计算一下，遍历度的数组检查是否存在度为奇数的点。</p></li><li><p>dfs递归遍历每个点，判断是否是连通图。递归过程中把每个与该点连接的点都遍历并且置st为1，循环是用ans记录图中有几个独立集合，如果只有一个那么即为连通图，大于1即至少两个图所以不连通。</p></li><li><p>最后根据两个条件判断得到是否存在欧拉回路。</p></li><li><p>还有一个法子是用并查集把每个连通的点放到一个集合里，可以直接判断p[i]是否等于 i ,如果是连通图那么肯定只满足一个，所以ans等于1为连通图。</p></li></ul><h4 id="AC代码：-38"><a href="#AC代码：-38" class="headerlink" title="AC代码："></a>AC代码：</h4><h5 id="dfs求连通"><a href="#dfs求连通" class="headerlink" title="dfs求连通"></a>dfs求连通</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> g[N][N], d[N], st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">st[x] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> t = g[x][i];</span><br><span class="line"><span class="keyword">if</span>(!st[i] &amp;&amp; t == <span class="number">1</span>)</span><br><span class="line"><span class="built_in">dfs</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a, b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">g[a][b] = g[b][a] = <span class="number">1</span>;</span><br><span class="line">d[a] ++;</span><br><span class="line">d[b] ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// flag 为 1 表示图中无奇数度的结点 </span></span><br><span class="line"><span class="type">int</span> flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line"><span class="keyword">if</span>(d[i] % <span class="number">2</span>) flag = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 判断图是否连通</span></span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!st[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">dfs</span>(i);</span><br><span class="line">ans ++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans == <span class="number">1</span> &amp;&amp; flag == <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="并查集求连通"><a href="#并查集求连通" class="headerlink" title="并查集求连通"></a>并查集求连通</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> g[N][N], d[N], p[N], st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p[x] != x) p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line"><span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">p[i] = i;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a, b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line"><span class="comment">//g[a][b] = g[b][a] = 1;</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">find</span>(a) != <span class="built_in">find</span>(b))</span><br><span class="line">&#123;</span><br><span class="line">p[<span class="built_in">find</span>(b)] = <span class="built_in">find</span>(a);</span><br><span class="line">&#125;</span><br><span class="line">d[a] ++;</span><br><span class="line">d[b] ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// flag 为 1 表示图中无奇数度的结点 </span></span><br><span class="line"><span class="type">int</span> flag = <span class="number">1</span>, ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(d[i] % <span class="number">2</span>) flag = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 判断图是否连通</span></span><br><span class="line"><span class="keyword">if</span>(p[i] == i)</span><br><span class="line">ans ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans == <span class="number">1</span> &amp;&amp; flag == <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-67-任务调度的合理性"><a href="#7-67-任务调度的合理性" class="headerlink" title="7-67 任务调度的合理性"></a>7-67 任务调度的合理性</h3><p>假定一个工程项目由一组子任务构成，子任务之间有的可以并行执行，有的必须在完成了其它一些子任务后才能执行。“任务调度”包括一组子任务、以及每个子任务可以执行所依赖的子任务集。</p><p>比如完成一个专业的所有课程学习和毕业设计可以看成一个本科生要完成的一项工程，各门课程可以看成是子任务。有些课程可以同时开设，比如英语和C程序设计，它们没有必须先修哪门的约束；有些课程则不可以同时开设，因为它们有先后的依赖关系，比如C程序设计和数据结构两门课，必须先学习前者。</p><p>但是需要注意的是，对一组子任务，并不是任意的任务调度都是一个可行的方案。比如方案中存在“子任务A依赖于子任务B，子任务B依赖于子任务C，子任务C又依赖于子任务A”，那么这三个任务哪个都不能先执行，这就是一个不可行的方案。你现在的工作是写程序判定任何一个给定的任务调度是否可行。</p><h4 id="输入格式-15"><a href="#输入格式-15" class="headerlink" title="输入格式:"></a>输入格式:</h4><p>输入说明：输入第一行给出子任务数<em>N</em>（≤100），子任务按1~<em>N</em>编号。随后<em>N</em>行，每行给出一个子任务的依赖集合：首先给出依赖集合中的子任务数<em>K</em>，随后给出<em>K</em>个子任务编号，整数之间都用空格分隔。</p><h4 id="输出格式-15"><a href="#输出格式-15" class="headerlink" title="输出格式:"></a>输出格式:</h4><p>如果方案可行，则输出1，否则输出0。</p><h4 id="输入样例1-1"><a href="#输入样例1-1" class="headerlink" title="输入样例1:"></a>输入样例1:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">12</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">2 1 2</span><br><span class="line">0</span><br><span class="line">1 4</span><br><span class="line">1 5</span><br><span class="line">2 3 6</span><br><span class="line">1 3</span><br><span class="line">2 7 8</span><br><span class="line">1 7</span><br><span class="line">1 10</span><br><span class="line">1 7</span><br></pre></td></tr></table></figure><h4 id="输出样例1-2"><a href="#输出样例1-2" class="headerlink" title="输出样例1:"></a>输出样例1:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><h4 id="输入样例2-1"><a href="#输入样例2-1" class="headerlink" title="输入样例2:"></a>输入样例2:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">1 4</span><br><span class="line">2 1 4</span><br><span class="line">2 2 5</span><br><span class="line">1 3</span><br><span class="line">0</span><br></pre></td></tr></table></figure><h4 id="输出样例2-2"><a href="#输出样例2-2" class="headerlink" title="输出样例2:"></a>输出样例2:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure><h4 id="思路：-38"><a href="#思路：-38" class="headerlink" title="思路："></a>思路：</h4><ul><li>拓扑排序，有向图判环。</li><li>把入度为零的点入队，每次从队列中取出删除入度为零的点，把与该点相连的点的入度减一，如果为零则入队。</li><li>用ans储存入队点的个数，如果ans &#x3D; n，则表明每个点都进入过队列，说明没有环，反之存在环。</li></ul><h4 id="AC代码：-39"><a href="#AC代码：-39" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, k;</span><br><span class="line"><span class="type">int</span> ind[N], g[N][N];<span class="comment">//ind[]c</span></span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;k);</span><br><span class="line"><span class="keyword">while</span>(k -- )</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">g[x][i] = <span class="number">1</span>;</span><br><span class="line">ind[i] ++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 找到入度为 0 的点</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ind[i] == <span class="number">0</span>)</span><br><span class="line">q.<span class="built_in">push</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 拓扑排序</span></span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line">ans ++;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line"><span class="keyword">if</span>(g[t][i])</span><br><span class="line">&#123;</span><br><span class="line">ind[i] --;</span><br><span class="line"><span class="keyword">if</span>(ind[i] == <span class="number">0</span>)</span><br><span class="line">q.<span class="built_in">push</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans == n) <span class="built_in">printf</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-68-城市间紧急救援"><a href="#7-68-城市间紧急救援" class="headerlink" title="7-68 城市间紧急救援"></a>7-68 城市间紧急救援</h3><p>作为一个城市的应急救援队伍的负责人，你有一张特殊的全国地图。在地图上显示有多个分散的城市和一些连接城市的快速道路。每个城市的救援队数量和每一条连接两个城市的快速道路长度都标在地图上。当其他城市有紧急求助电话给你的时候，你的任务是带领你的救援队尽快赶往事发地，同时，一路上召集尽可能多的救援队。</p><h4 id="输入格式-16"><a href="#输入格式-16" class="headerlink" title="输入格式:"></a>输入格式:</h4><p>输入第一行给出4个正整数<em>N</em>、<em>M</em>、<em>S</em>、<em>D</em>，其中<em>N</em>（2≤<em>N</em>≤500）是城市的个数，顺便假设城市的编号为0 ~ (<em>N</em>−1)；<em>M</em>是快速道路的条数；<em>S</em>是出发地的城市编号；<em>D</em>是目的地的城市编号。</p><p>第二行给出<em>N</em>个正整数，其中第<em>i</em>个数是第<em>i</em>个城市的救援队的数目，数字间以空格分隔。随后的<em>M</em>行中，每行给出一条快速道路的信息，分别是：城市1、城市2、快速道路的长度，中间用空格分开，数字均为整数且不超过500。输入保证救援可行且最优解唯一。</p><h4 id="输出格式-16"><a href="#输出格式-16" class="headerlink" title="输出格式:"></a>输出格式:</h4><p>第一行输出最短路径的条数和能够召集的最多的救援队数量。第二行输出从<em>S</em>到<em>D</em>的路径中经过的城市编号。数字间以空格分隔，输出结尾不能有多余空格。</p><h4 id="输入样例-13"><a href="#输入样例-13" class="headerlink" title="输入样例:"></a>输入样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">4 5 0 3</span><br><span class="line">20 30 40 10</span><br><span class="line">0 1 1</span><br><span class="line">1 3 2</span><br><span class="line">0 3 3</span><br><span class="line">0 2 2</span><br><span class="line">2 3 2</span><br></pre></td></tr></table></figure><h4 id="输出样例-13"><a href="#输出样例-13" class="headerlink" title="输出样例:"></a>输出样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2 60</span><br><span class="line">0 1 3</span><br></pre></td></tr></table></figure><h4 id="思路：-39"><a href="#思路：-39" class="headerlink" title="思路："></a>思路：</h4><ul><li>dijkstra算法基础应用，再过程中记录需要用到的数据量。</li><li>每次更新的时候把路径储存下来，最后用dfs来遍历输出答案。</li><li>需要输出的是最短路径的数量和最多的救援队数量，最后输出路径上城市的编号。</li><li>在过程中更新dist的条件是dist[j] &gt; dist[t] + g [t][j] || (dist[j] &gt; dist[t] + g[t][j] &amp;&amp; wi[j] &gt; wi[t] + w[j])。</li><li><ul><li>第一种情况，还在同一条路径上，所以j的路径数量等于t的路径数量。<br>    - 第二种情况即不在同一条路径上，j的路径数量等于j的加上t的路径数量。</li></ul></li><li>注：一定要初始化dist和g数组。</li></ul><h4 id="AC代码：-40"><a href="#AC代码：-40" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">510</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, s, d;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> w[N], g[N][N], st[N];</span><br><span class="line"><span class="type">int</span> path[N], dist[N], num[N], wi[N];</span><br><span class="line"><span class="comment">// 路径记录，每个点到起点的距离，路径条数，到该点路径上集结最多的人数 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dijkstra</span><span class="params">(<span class="type">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">dist[s] = <span class="number">0</span>;</span><br><span class="line">wi[s] = w[s];</span><br><span class="line">num[s] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> t = <span class="number">-1</span>;</span><br><span class="line"><span class="comment">// 找到当前距离起点最短的点</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j ++ )</span><br><span class="line"><span class="keyword">if</span>(!st[j] &amp;&amp; (t == <span class="number">-1</span> || dist[t] &gt; dist[j]))</span><br><span class="line">t = j;</span><br><span class="line"><span class="comment">//if(t == -1)break;</span></span><br><span class="line">st[t] = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 更新每个点的距离</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 同一条路 </span></span><br><span class="line"><span class="keyword">if</span>(!st[j] &amp;&amp; dist[j] &gt; dist[t] + g[t][j])</span><br><span class="line">&#123;</span><br><span class="line">dist[j] = dist[t] + g[t][j];</span><br><span class="line">path[j] = t;</span><br><span class="line">wi[j] = wi[t] + w[j];</span><br><span class="line">num[j] = num[t];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不同的路 </span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(!st[j] &amp;&amp; dist[j] == dist[t] + g[t][j])</span><br><span class="line">&#123;</span><br><span class="line">num[j] += num[t];</span><br><span class="line"><span class="keyword">if</span>(wi[j] &lt; wi[t] + w[j])</span><br><span class="line">&#123;</span><br><span class="line">wi[j] = wi[t] + w[j];</span><br><span class="line">path[j] = t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(d == s)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, d);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">dfs</span>(path[d]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; %d&quot;</span>, d);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(g, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> g);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;s, &amp;d);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;w[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a, b, l;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;l);</span><br><span class="line">g[a][b] = g[b][a] = l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">dijkstra</span>(s);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, num[d], wi[d]);</span><br><span class="line"><span class="built_in">dfs</span>(d);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-69-模拟EXCEL排序"><a href="#7-69-模拟EXCEL排序" class="headerlink" title="7-69 模拟EXCEL排序"></a>7-69 模拟EXCEL排序</h3><p>Excel可以对一组纪录按任意指定列排序。现请编写程序实现类似功能。</p><h4 id="输入格式-17"><a href="#输入格式-17" class="headerlink" title="输入格式:"></a>输入格式:</h4><p>输入的第一行包含两个正整数<em>N</em>(≤105) 和<em>C</em>，其中<em>N</em>是纪录的条数，<em>C</em>是指定排序的列号。之后有 <em>N</em>行，每行包含一条学生纪录。每条学生纪录由学号（6位数字，保证没有重复的学号）、姓名（不超过8位且不包含空格的字符串）、成绩（[0, 100]内的整数）组成，相邻属性用1个空格隔开。</p><h4 id="输出格式-17"><a href="#输出格式-17" class="headerlink" title="输出格式:"></a>输出格式:</h4><p>在<em>N</em>行中输出按要求排序后的结果，即：当<em>C</em>&#x3D;1时，按学号递增排序；当<em>C</em>&#x3D;2时，按姓名的非递减字典序排序；当<em>C</em>&#x3D;3时，按成绩的非递减排序。当若干学生具有相同姓名或者相同成绩时，则按他们的学号递增排序。</p><h4 id="输入样例-14"><a href="#输入样例-14" class="headerlink" title="输入样例:"></a>输入样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3 1</span><br><span class="line">000007 James 85</span><br><span class="line">000010 Amy 90</span><br><span class="line">000001 Zoe 60</span><br></pre></td></tr></table></figure><h4 id="输出样例-14"><a href="#输出样例-14" class="headerlink" title="输出样例:"></a>输出样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">000001 Zoe 60</span><br><span class="line">000007 James 85</span><br><span class="line">000010 Amy 90</span><br></pre></td></tr></table></figure><h4 id="思路：-40"><a href="#思路：-40" class="headerlink" title="思路："></a>思路：</h4><ul><li>排序题目，用结构体储存数据，根据输入判断出应该按照哪个排序。</li><li>调用sort函数，自己手写cmp规则，根据c来判断调用规则。</li><li>排序结束后直接按规则输出即可。</li><li>注：当名字相同时按照学号排序。</li></ul><h4 id="AC代码：-41"><a href="#AC代码：-41" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> id;</span><br><span class="line"><span class="type">char</span> name[<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> grade;</span><br><span class="line">&#125;stu[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp1</span><span class="params">(student a, student b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.id &lt; b.id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp2</span><span class="params">(student a, student b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(a.name, b.name) == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> a.id &lt; b.id;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">strcmp</span>(a.name, b.name) &lt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp3</span><span class="params">(student a, student b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a.grade != b.grade)</span><br><span class="line"><span class="keyword">return</span> a.grade &lt; b.grade;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(a.name, b.name) == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">strcmp</span>(a.name, b.name) &lt; <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> a.id &lt; b.id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%s%d&quot;</span>, &amp;stu[i].id, stu[i].name, &amp;stu[i].grade);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(m == <span class="number">1</span>)</span><br><span class="line"><span class="built_in">sort</span>(stu, stu + n, cmp1);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(m == <span class="number">2</span>)</span><br><span class="line"><span class="built_in">sort</span>(stu, stu + n, cmp2);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">sort</span>(stu, stu + n, cmp3);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%06d %s %d\n&quot;</span>, stu[i].id, stu[i].name, stu[i].grade);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-70-魔法优惠券"><a href="#7-70-魔法优惠券" class="headerlink" title="7-70 魔法优惠券"></a>7-70 魔法优惠券</h3><p>在火星上有个魔法商店，提供魔法优惠券。每个优惠劵上印有一个整数面值K，表示若你在购买某商品时使用这张优惠劵，可以得到K倍该商品价值的回报！该商店还免费赠送一些有价值的商品，但是如果你在领取免费赠品的时候使用面值为正的优惠劵，则必须倒贴给商店K倍该商品价值的金额…… 但是不要紧，还有面值为负的优惠劵可以用！（真是神奇的火星）</p><p>例如，给定一组优惠劵，面值分别为1、2、4、-1；对应一组商品，价值为火星币M7、6、−2、−3，其中负的价值表示该商品是免费赠品。我们可以将优惠劵3用在商品1上，得到<em>M</em>28的回报；优惠劵2用在商品2上，得到M12的回报；优惠劵4用在商品4上，得到<em>M</em>3的回报。但是如果一不小心把优惠劵3用在商品4上，你必须倒贴给商店M12。同样，当你一不小心把优惠劵4用在商品1上，你必须倒贴给商店<em>M</em>7。</p><p>规定每张优惠券和每件商品都只能最多被使用一次，求你可以得到的最大回报。</p><h4 id="输入格式-18"><a href="#输入格式-18" class="headerlink" title="输入格式:"></a>输入格式:</h4><p>输入有两行。第一行首先给出优惠劵的个数N，随后给出N个优惠劵的整数面值。第二行首先给出商品的个数M，随后给出M个商品的整数价值。N和M在[1, 106]之间，所有的数据大小不超过230，数字间以空格分隔。</p><h4 id="输出格式-18"><a href="#输出格式-18" class="headerlink" title="输出格式:"></a>输出格式:</h4><p>输出可以得到的最大回报。</p><h4 id="输入样例-15"><a href="#输入样例-15" class="headerlink" title="输入样例:"></a>输入样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4 1 2 4 -1</span><br><span class="line">4 7 6 -2 -3</span><br></pre></td></tr></table></figure><h4 id="输出样例-15"><a href="#输出样例-15" class="headerlink" title="输出样例:"></a>输出样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">43</span><br></pre></td></tr></table></figure><h4 id="思路：-41"><a href="#思路：-41" class="headerlink" title="思路："></a>思路：</h4><ul><li>贪心题目，要的到最大的钱数即看优惠券和商品价格的乘积和最大。</li><li>把两个数组都按降序排好，用双指针来记录数字的位置。</li><li>head前面模拟，直接看如果q[] x g[] 是大于0 的即这个组合是成立的。</li><li>两个尾指针是不一样的，所以要分开模拟，后面是负数，两个负数相乘大于零即也是合适的答案，但是注意随时检查头指针和尾指针是否越界，即保持head &lt;&#x3D; min(tail1, tail2)，head要随时小于两个尾指针的最小值。</li></ul><h4 id="AC代码：-42"><a href="#AC代码：-42" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> q[N], g[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &gt; b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q[i]);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i ++ )</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;g[i]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(q + <span class="number">1</span>, q + <span class="number">1</span> + n, cmp);</span><br><span class="line"><span class="built_in">sort</span>(g + <span class="number">1</span>, g + <span class="number">1</span> + m, cmp);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> head = <span class="number">1</span>, tail1 = n, tail2 = m;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(q[head] * g[head] &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">sum += q[head] * g[head];</span><br><span class="line">head ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(head &lt;= <span class="built_in">min</span>(tail1, tail2) &amp;&amp; q[tail1] * g[tail2] &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">sum += q[tail1] * g[tail2];</span><br><span class="line">tail1 --;</span><br><span class="line">tail2 --;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, sum);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-71-奥运排行榜"><a href="#7-71-奥运排行榜" class="headerlink" title="7-71 奥运排行榜"></a>7-71 奥运排行榜</h3><p>每年奥运会各大媒体都会公布一个排行榜，但是细心的读者发现，不同国家的排行榜略有不同。比如中国金牌总数列第一的时候，中国媒体就公布“金牌榜”；而美国的奖牌总数第一，于是美国媒体就公布“奖牌榜”。如果人口少的国家公布一个“国民人均奖牌榜”，说不定非洲的国家会成为榜魁…… 现在就请你写一个程序，对每个前来咨询的国家按照对其最有利的方式计算它的排名。</p><h4 id="输入格式-19"><a href="#输入格式-19" class="headerlink" title="输入格式:"></a>输入格式:</h4><p>输入的第一行给出两个正整数<em>N</em>和<em>M</em>（≤224，因为世界上共有224个国家和地区），分别是参与排名的国家和地区的总个数、以及前来咨询的国家的个数。为简单起见，我们把国家从0 ~ <em>N</em>−1编号。之后有<em>N</em>行输入，第<em>i</em>行给出编号为<em>i</em>−1的国家的金牌数、奖牌数、国民人口数（单位为百万），数字均为[0,1000]区间内的整数，用空格分隔。最后面一行给出<em>M</em>个前来咨询的国家的编号，用空格分隔。</p><h4 id="输出格式-19"><a href="#输出格式-19" class="headerlink" title="输出格式:"></a>输出格式:</h4><p>在一行里顺序输出前来咨询的国家的<code>排名:计算方式编号</code>。其排名按照对该国家最有利的方式计算；计算方式编号为：金牌榜&#x3D;1，奖牌榜&#x3D;2，国民人均金牌榜&#x3D;3，国民人均奖牌榜&#x3D;4。输出间以空格分隔，输出结尾不能有多余空格。</p><p>若某国在不同排名方式下有相同名次，则输出编号最小的计算方式。</p><h4 id="输入样例-16"><a href="#输入样例-16" class="headerlink" title="输入样例:"></a>输入样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">4 4</span><br><span class="line">51 100 1000</span><br><span class="line">36 110 300</span><br><span class="line">6 14 32</span><br><span class="line">5 18 40</span><br><span class="line">0 1 2 3</span><br></pre></td></tr></table></figure><h4 id="输出样例-16"><a href="#输出样例-16" class="headerlink" title="输出样例:"></a>输出样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1:1 1:2 1:3 1:4</span><br></pre></td></tr></table></figure><h4 id="思路：-42"><a href="#思路：-42" class="headerlink" title="思路："></a>思路：</h4><ul><li>排序题目。</li><li>因为只给出了金牌数，奖牌数，人口数，需要输出的是用哪种方式排名可以使得该国家的排名最小，所以需要把每种方式都排出来，然后把这种排序下该国家的名次储存下来。</li><li>这里我用到两个结构体数组来储存国家的奖牌数和排名，用p数组去进行各个方式的排序，然后在pre数组下，就可以直接通过数组下标直接查找到国家的位置并把排名直接插入。</li><li>输出时，直接用一个t储存该国家的排名，用k储存用的哪种方式排序，每次比较把最小的排名去更新t的值，同时更新k的值，最后直接输出排名和排序方式即可。</li></ul><h4 id="AC代码：-43"><a href="#AC代码：-43" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">230</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">nation</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> id;</span><br><span class="line"><span class="type">int</span> goldmedal, medal, pupl;</span><br><span class="line"><span class="type">int</span> r1, r2, r3, r4;</span><br><span class="line">&#125;p[N], pre[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp1</span><span class="params">(nation a, nation b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.goldmedal &gt; b.goldmedal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp2</span><span class="params">(nation a, nation b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.medal &gt; b.medal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp3</span><span class="params">(nation a, nation b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">float</span> t1 = a.goldmedal * <span class="number">1.0</span> / a.pupl;</span><br><span class="line"><span class="type">float</span> t2 = b.goldmedal * <span class="number">1.0</span> / b.pupl;</span><br><span class="line"><span class="keyword">return</span> t1 &gt; t2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp4</span><span class="params">(nation a, nation b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">float</span> t1 = a.medal * <span class="number">1.0</span> / a.pupl;</span><br><span class="line"><span class="type">float</span> t2 = b.medal * <span class="number">1.0</span> / b.pupl;</span><br><span class="line"><span class="keyword">return</span> t1 &gt; t2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a, b, c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">p[i].id = i;</span><br><span class="line">p[i].goldmedal = a;</span><br><span class="line">p[i].medal = b;</span><br><span class="line">p[i].pupl= c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 金牌排序 </span></span><br><span class="line"><span class="built_in">sort</span>(p, p + n, cmp1);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(p[i].goldmedal == p[i - <span class="number">1</span>].goldmedal &amp;&amp; i - <span class="number">1</span> &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">pre[p[i].id].r1 = pre[p[i - <span class="number">1</span>].id].r1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">pre[p[i].id].r1 = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 奖牌排序</span></span><br><span class="line"><span class="built_in">sort</span>(p, p + n, cmp2);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(p[i].medal == p[i - <span class="number">1</span>].medal &amp;&amp; i - <span class="number">1</span> &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">pre[p[i].id].r2 = pre[p[i - <span class="number">1</span>].id].r2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">pre[p[i].id].r2 = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 人均金牌</span></span><br><span class="line"><span class="built_in">sort</span>(p, p + n, cmp3);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(p[i].goldmedal * <span class="number">1.0</span> / p[i].pupl == p[i - <span class="number">1</span>].goldmedal * <span class="number">1.0</span> / p[i - <span class="number">1</span>].pupl &amp;&amp; i - <span class="number">1</span> &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">pre[p[i].id].r3 = pre[p[i - <span class="number">1</span>].id].r3;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">pre[p[i].id].r3 = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 人均奖牌</span></span><br><span class="line"><span class="built_in">sort</span>(p, p + n, cmp4);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(p[i].medal * <span class="number">1.0</span> / p[i].pupl == p[i - <span class="number">1</span>].medal * <span class="number">1.0</span> / p[i - <span class="number">1</span>].pupl &amp;&amp; i - <span class="number">1</span> &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">pre[p[i].id].r4 = pre[p[i - <span class="number">1</span>].id].r4;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">pre[p[i].id].r4 = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> flag = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">while</span>(m -- )</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line"><span class="type">int</span> t = pre[x].r1;</span><br><span class="line"><span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(t &gt; pre[x].r2)</span><br><span class="line">t = pre[x].r2, k = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(t &gt; pre[x].r3)</span><br><span class="line">t = pre[x].r3, k = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">if</span>(t &gt; pre[x].r4)</span><br><span class="line">t = pre[x].r4, k = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(flag)<span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d:%d&quot;</span>, t, k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-72-PAT排名汇总"><a href="#7-72-PAT排名汇总" class="headerlink" title="7-72 PAT排名汇总"></a>7-72 PAT排名汇总</h3><p>计算机程序设计能力考试（Programming Ability Test，简称PAT）旨在通过统一组织的在线考试及自动评测方法客观地评判考生的算法设计与程序设计实现能力，科学的评价计算机程序设计人才，为企业选拔人才提供参考标准（网址<a href="http://www.patest.cn)./">http://www.patest.cn）。</a></p><p>每次考试会在若干个不同的考点同时举行，每个考点用局域网，产生本考点的成绩。考试结束后，各个考点的成绩将即刻汇总成一张总的排名表。</p><p>现在就请你写一个程序自动归并各个考点的成绩并生成总排名表。</p><h4 id="输入格式-20"><a href="#输入格式-20" class="headerlink" title="输入格式:"></a>输入格式:</h4><p>输入的第一行给出一个正整数N（≤100），代表考点总数。随后给出N个考点的成绩，格式为：首先一行给出正整数K（≤300），代表该考点的考生总数；随后K行，每行给出1个考生的信息，包括考号（由13位整数字组成）和得分（为[0,100]区间内的整数），中间用空格分隔。</p><h4 id="输出格式-20"><a href="#输出格式-20" class="headerlink" title="输出格式:"></a>输出格式:</h4><p>首先在第一行里输出考生总数。随后输出汇总的排名表，每个考生的信息占一行，顺序为：考号、最终排名、考点编号、在该考点的排名。其中考点按输入给出的顺序从1到N编号。考生的输出须按最终排名的非递减顺序输出，获得相同分数的考生应有相同名次，并按考号的递增顺序输出。</p><h4 id="输入样例-17"><a href="#输入样例-17" class="headerlink" title="输入样例:"></a>输入样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">5</span><br><span class="line">1234567890001 95</span><br><span class="line">1234567890005 100</span><br><span class="line">1234567890003 95</span><br><span class="line">1234567890002 77</span><br><span class="line">1234567890004 85</span><br><span class="line">4</span><br><span class="line">1234567890013 65</span><br><span class="line">1234567890011 25</span><br><span class="line">1234567890014 100</span><br><span class="line">1234567890012 85</span><br></pre></td></tr></table></figure><h4 id="输出样例-17"><a href="#输出样例-17" class="headerlink" title="输出样例:"></a>输出样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">9</span><br><span class="line">1234567890005 1 1 1</span><br><span class="line">1234567890014 1 2 1</span><br><span class="line">1234567890001 3 1 2</span><br><span class="line">1234567890003 3 1 2</span><br><span class="line">1234567890004 5 1 4</span><br><span class="line">1234567890012 5 2 2</span><br><span class="line">1234567890002 7 1 5</span><br><span class="line">1234567890013 8 2 3</span><br><span class="line">1234567890011 9 2 4</span><br></pre></td></tr></table></figure><h4 id="思路：-43"><a href="#思路：-43" class="headerlink" title="思路："></a>思路：</h4><ul><li>排序题目。</li><li>按照提给要求即分数第一，同分情况按考号排，每个考点读入完以后进行该考点的排序，然后把每个人的考点名次插入到结构体中。</li><li>读入全部学生以后，按照要求进行一下全排，把每个人的最终名次插入到结构体中。</li><li>按要求格式输出答案即可。</li><li>补充：cin，cout 的速度优化，优化以后速度和scanf，printf 速度差不多。<ul><li>ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);</li></ul></li></ul><h4 id="AC代码：-44"><a href="#AC代码：-44" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">30010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> id[<span class="number">15</span>];</span><br><span class="line"><span class="type">int</span> grade, num;</span><br><span class="line"><span class="type">int</span> Lrank, Trank;</span><br><span class="line">&#125;stu[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> sum;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(student a, student b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a.grade != b.grade)</span><br><span class="line"><span class="keyword">return</span> a.grade &gt; b.grade;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">strcmp</span>(a.id, b.id) &lt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// cin,cout 优化速度</span></span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>); cin.<span class="built_in">tie</span>(<span class="number">0</span>); cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//scanf(&quot;%d&quot;, &amp;n);</span></span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//scanf(&quot;%d&quot;, &amp;m);</span></span><br><span class="line">cin &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = sum; j &lt; sum + m; j ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//scanf(&quot;%s %d&quot;, stu[j].id, &amp;stu[j].grade);</span></span><br><span class="line">cin &gt;&gt; stu[j].id &gt;&gt; stu[j].grade;</span><br><span class="line">stu[j].num = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(stu + sum, stu + sum + m, cmp);</span><br><span class="line">stu[sum].Trank = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = sum + <span class="number">1</span>; j &lt; m + sum; j ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(stu[j].grade == stu[j - <span class="number">1</span>].grade)</span><br><span class="line">stu[j].Trank = stu[j - <span class="number">1</span>].Trank;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">stu[j].Trank = j - sum + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">sum += m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(stu, stu + sum, cmp);</span><br><span class="line">stu[<span class="number">0</span>].Lrank = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; sum; j ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(stu[j].grade == stu[j - <span class="number">1</span>].grade)</span><br><span class="line">stu[j].Lrank = stu[j - <span class="number">1</span>].Lrank;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">stu[j].Lrank = j + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//printf(&quot;%d\n&quot;, sum);</span></span><br><span class="line">cout &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; sum; j ++ )</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; stu[j].id &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; stu[j].Lrank &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; stu[j].num &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; stu[j].Trank &lt;&lt; endl;</span><br><span class="line"><span class="comment">//printf(&quot;%d %d %d\n&quot;, stu[j].Lrank, stu[j].num, stu[j].Trank);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-73-整型关键字的散列映射"><a href="#7-73-整型关键字的散列映射" class="headerlink" title="7-73 整型关键字的散列映射"></a>7-73 整型关键字的散列映射</h3><p>给定一系列整型关键字和素数<em>P</em>，用除留余数法定义的散列函数<em>H</em>(<em>Key</em>)&#x3D;<em>Key</em>将关键字映射到长度为<em>P</em>的散列表中。用线性探测法解决冲突。</p><h4 id="输入格式-21"><a href="#输入格式-21" class="headerlink" title="输入格式:"></a>输入格式:</h4><p>输入第一行首先给出两个正整数<em>N</em>（≤1000）和<em>P</em>（≥<em>N</em>的最小素数），分别为待插入的关键字总数、以及散列表的长度。第二行给出<em>N</em>个整型关键字。数字间以空格分隔。</p><h4 id="输出格式-21"><a href="#输出格式-21" class="headerlink" title="输出格式:"></a>输出格式:</h4><p>在一行内输出每个整型关键字在散列表中的位置。数字间以空格分隔，但行末尾不得有多余空格。</p><h4 id="输入样例-18"><a href="#输入样例-18" class="headerlink" title="输入样例:"></a>输入样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4 5</span><br><span class="line">24 15 61 88</span><br></pre></td></tr></table></figure><h4 id="输出样例-18"><a href="#输出样例-18" class="headerlink" title="输出样例:"></a>输出样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4 0 1 3</span><br></pre></td></tr></table></figure><h4 id="思路：-44"><a href="#思路：-44" class="headerlink" title="思路："></a>思路：</h4><ul><li>线性探测法如果当前位置有元素 t &#x3D; (x + k) % p，k从1开始逐渐加一。</li><li>每次读入一个元素先找到该元素的散列位置，即与 p 取余后的位置没有元素，同时该元素也是第一次出现，如果出现过直接输出该元素的位置即可。</li></ul><h4 id="AC代码：-45"><a href="#AC代码：-45" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1020</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, p, x, flag;</span><br><span class="line"><span class="type">int</span> h[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>); cin.<span class="built_in">tie</span>(<span class="number">0</span>); cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; p;</span><br><span class="line"><span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ ) &#123;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line"><span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> t = x % p;</span><br><span class="line"><span class="keyword">while</span>(h[t] != <span class="number">-1</span> &amp;&amp; h[t] != x) &#123;</span><br><span class="line">t = (x + k) % p;</span><br><span class="line">k ++ ;</span><br><span class="line">&#125;</span><br><span class="line">h[t] = x;</span><br><span class="line"><span class="keyword">if</span>(flag) cout &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line">cout &lt;&lt; t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="7-74-字符串关键字的散列映射"><a href="#7-74-字符串关键字的散列映射" class="headerlink" title="7-74 字符串关键字的散列映射"></a>7-74 字符串关键字的散列映射</h3><p>给定一系列由大写英文字母组成的字符串关键字和素数<em>P</em>，用移位法定义的散列函数<em>H</em>(<em>Key</em>)将关键字<em>Key</em>中的最后3个字符映射为整数，每个字符占5位；再用除留余数法将整数映射到长度为<em>P</em>的散列表中。例如将字符串<code>AZDEG</code>插入长度为1009的散列表中，我们首先将26个大写英文字母顺序映射到整数0~25；再通过移位将其映射为3×322+4×32+6&#x3D;3206；然后根据表长得到3206，即是该字符串的散列映射位置。</p><p>发生冲突时请用平方探测法解决。</p><h4 id="输入格式-22"><a href="#输入格式-22" class="headerlink" title="输入格式:"></a>输入格式:</h4><p>输入第一行首先给出两个正整数<em>N</em>（≤500）和<em>P</em>（≥2<em>N</em>的最小素数），分别为待插入的关键字总数、以及散列表的长度。第二行给出<em>N</em>个字符串关键字，每个长度不超过8位，其间以空格分隔。</p><h4 id="输出格式-22"><a href="#输出格式-22" class="headerlink" title="输出格式:"></a>输出格式:</h4><p>在一行内输出每个字符串关键字在散列表中的位置。数字间以空格分隔，但行末尾不得有多余空格。</p><h4 id="输入样例1-2"><a href="#输入样例1-2" class="headerlink" title="输入样例1:"></a>输入样例1:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4 11</span><br><span class="line">HELLO ANNK ZOE LOLI</span><br></pre></td></tr></table></figure><h4 id="输出样例1-3"><a href="#输出样例1-3" class="headerlink" title="输出样例1:"></a>输出样例1:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 10 4 0</span><br></pre></td></tr></table></figure><h4 id="输入样例2-2"><a href="#输入样例2-2" class="headerlink" title="输入样例2:"></a>输入样例2:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6 11</span><br><span class="line">LLO ANNA NNK ZOJ INNK AAA</span><br></pre></td></tr></table></figure><h4 id="输出样例2-3"><a href="#输出样例2-3" class="headerlink" title="输出样例2:"></a>输出样例2:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 0 10 9 6 1</span><br></pre></td></tr></table></figure><h4 id="思路：-45"><a href="#思路：-45" class="headerlink" title="思路："></a>思路：</h4><ul><li>平方探测法：<ul><li>如果冲突，即 h[t] 位置上有元素了，则 t &#x3D; t + 1 ^ 2，如果还冲突就 t &#x3D; t - 1 ^ 2，依次以加减平方递增。</li><li>即序列为：+1^2, - 1^2, + 2^2, - 2^2, + 3^2, - 3 ^3， ……，+p^2, -p^2。 p &lt;&#x3D; size &#x2F; 2;</li></ul></li><li>需要用到额外的一个char数组来储存字符串，当该点的哈希值（即为最后三位字母的值）存在且相等时，比较字符串是否相等，如果相等直接输出值，不相等即用平方探测法去寻找下一个位置。</li></ul><h4 id="AC代码：-46"><a href="#AC代码：-46" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1020</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, p, x, flag;</span><br><span class="line"><span class="type">int</span> h[N];</span><br><span class="line"><span class="type">char</span> str[<span class="number">10</span>];</span><br><span class="line"><span class="type">char</span> g[N][<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mprint</span><span class="params">(<span class="type">int</span> temp)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(flag) cout &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line">cout &lt;&lt; temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>); cin.<span class="built_in">tie</span>(<span class="number">0</span>); cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; p;</span><br><span class="line"><span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ ) &#123;</span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>, k = <span class="number">1</span>;</span><br><span class="line">cin &gt;&gt; str;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="built_in">strlen</span>(str) - <span class="number">1</span>, tj = <span class="number">0</span>; j &gt;= <span class="number">0</span> &amp;&amp; tj &lt; <span class="number">3</span>; j --, tj ++) &#123;</span><br><span class="line">x += (str[j] - <span class="string">&#x27;A&#x27;</span>) * k;</span><br><span class="line">k *= <span class="number">32</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 平方探测处理冲突</span></span><br><span class="line"><span class="type">int</span> t = x % p;</span><br><span class="line"><span class="keyword">if</span>(h[t] == <span class="number">-1</span>) &#123;</span><br><span class="line">h[t] = x;</span><br><span class="line"><span class="built_in">strcpy</span>(g[t], str);</span><br><span class="line"><span class="built_in">mprint</span>(t);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(h[t] == x) &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(g[t], str) == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">mprint</span>(t);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">k = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line"><span class="type">int</span> temp = (t + k * k) % p;</span><br><span class="line"><span class="keyword">if</span>(h[temp] == x) &#123;</span><br><span class="line"><span class="built_in">mprint</span>(temp);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(h[temp] == <span class="number">-1</span>) &#123;</span><br><span class="line">h[temp] = x;</span><br><span class="line"><span class="built_in">strcpy</span>(g[temp], str);</span><br><span class="line"><span class="built_in">mprint</span>(temp);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">temp = (t - k * k + p) % p;</span><br><span class="line"><span class="keyword">if</span>(h[temp] == x) &#123;</span><br><span class="line"><span class="built_in">mprint</span>(temp);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(h[temp] == <span class="number">-1</span>) &#123;</span><br><span class="line">h[temp] = x;</span><br><span class="line"><span class="built_in">strcpy</span>(g[temp], str);</span><br><span class="line"><span class="built_in">mprint</span>(temp);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">k ++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-75-航空公司VIP客户查询"><a href="#7-75-航空公司VIP客户查询" class="headerlink" title="7-75 航空公司VIP客户查询"></a>7-75 航空公司VIP客户查询</h3><p>不少航空公司都会提供优惠的会员服务，当某顾客飞行里程累积达到一定数量后，可以使用里程积分直接兑换奖励机票或奖励升舱等服务。现给定某航空公司全体会员的飞行记录，要求实现根据身份证号码快速查询会员里程积分的功能。</p><h4 id="输入格式-23"><a href="#输入格式-23" class="headerlink" title="输入格式:"></a>输入格式:</h4><p>输入首先给出两个正整数<em>N</em>（≤105）和<em>K</em>（≤500）。其中<em>K</em>是最低里程，即为照顾乘坐短程航班的会员,航空公司还会将航程低于<em>K</em>公里的航班也按<em>K</em>公里累积。随后<em>N</em>行，每行给出一条飞行记录。飞行记录的输入格式为：<code>18位身份证号码（空格）飞行里程</code>。其中身份证号码由17位数字加最后一位校验码组成，校验码的取值范围为0~9和x共11个符号；飞行里程单位为公里，是(0, 15 000]区间内的整数。然后给出一个正整数<em>M</em>（≤105），随后给出<em>M</em>行查询人的身份证号码。</p><h4 id="输出格式-23"><a href="#输出格式-23" class="headerlink" title="输出格式:"></a>输出格式:</h4><p>对每个查询人，给出其当前的里程累积值。如果该人不是会员，则输出<code>No Info</code>。每个查询结果占一行。</p><h4 id="输入样例-19"><a href="#输入样例-19" class="headerlink" title="输入样例:"></a>输入样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">4 500</span><br><span class="line">330106199010080419 499</span><br><span class="line">110108198403100012 15000</span><br><span class="line">120104195510156021 800</span><br><span class="line">330106199010080419 1</span><br><span class="line">4</span><br><span class="line">120104195510156021</span><br><span class="line">110108198403100012</span><br><span class="line">330106199010080419</span><br><span class="line">33010619901008041x</span><br></pre></td></tr></table></figure><h4 id="输出样例-19"><a href="#输出样例-19" class="headerlink" title="输出样例:"></a>输出样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">800</span><br><span class="line">15000</span><br><span class="line">1000</span><br><span class="line">No Info</span><br></pre></td></tr></table></figure><h4 id="思路：-46"><a href="#思路：-46" class="headerlink" title="思路："></a>思路：</h4><ul><li>把每个人按照身份证号和里程总数储存在map里。</li><li>如果里程数低于 k ，则计入里程 k。</li><li>map查询，ma.find() 找不到返回指向ma.end()的迭代器。</li></ul><h4 id="AC代码：-47"><a href="#AC代码：-47" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, k, m;</span><br><span class="line">string id;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line">map&lt;string, <span class="type">int</span>&gt; ma;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>); cin.<span class="built_in">tie</span>(<span class="number">0</span>); cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ ) &#123;</span><br><span class="line">cin &gt;&gt; id &gt;&gt; x;</span><br><span class="line"><span class="keyword">if</span>(x &lt; k) x = k;</span><br><span class="line">ma[id] += x;</span><br><span class="line">&#125;</span><br><span class="line">cin &gt;&gt; m;</span><br><span class="line"><span class="keyword">while</span>(m -- ) &#123;</span><br><span class="line">cin &gt;&gt; id;</span><br><span class="line"><span class="keyword">if</span>(ma.<span class="built_in">find</span>(id) == ma.<span class="built_in">end</span>()) </span><br><span class="line">cout &lt;&lt; <span class="string">&quot;No Info&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout &lt;&lt; ma[id] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="7-76-打印选课学生名单"><a href="#7-76-打印选课学生名单" class="headerlink" title="7-76 打印选课学生名单"></a>7-76 打印选课学生名单</h3><p>假设全校有最多40000名学生和最多2500门课程。现给出每个学生的选课清单，要求输出每门课的选课学生名单。</p><h4 id="输入格式-24"><a href="#输入格式-24" class="headerlink" title="输入格式:"></a>输入格式:</h4><p>输入的第一行是两个正整数：N（≤40000），为全校学生总数；K（≤2500），为总课程数。此后N行，每行包括一个学生姓名（3个大写英文字母+1位数字）、一个正整数C（≤20）代表该生所选的课程门数、随后是C个课程编号。简单起见，课程从1到K编号。</p><h4 id="输出格式-24"><a href="#输出格式-24" class="headerlink" title="输出格式:"></a>输出格式:</h4><p>顺序输出课程1到K的选课学生名单。格式为：对每一门课，首先在一行中输出课程编号和选课学生总数（之间用空格分隔），之后在第二行按字典序输出学生名单，每个学生名字占一行。</p><h4 id="输入样例-20"><a href="#输入样例-20" class="headerlink" title="输入样例:"></a>输入样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">10 5</span><br><span class="line">ZOE1 2 4 5</span><br><span class="line">ANN0 3 5 2 1</span><br><span class="line">BOB5 5 3 4 2 1 5</span><br><span class="line">JOE4 1 2</span><br><span class="line">JAY9 4 1 2 5 4</span><br><span class="line">FRA8 3 4 2 5</span><br><span class="line">DON2 2 4 5</span><br><span class="line">AMY7 1 5</span><br><span class="line">KAT3 3 5 4 2</span><br><span class="line">LOR6 4 2 4 1 5</span><br></pre></td></tr></table></figure><h4 id="输出样例-20"><a href="#输出样例-20" class="headerlink" title="输出样例:"></a>输出样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">1 4</span><br><span class="line">ANN0</span><br><span class="line">BOB5</span><br><span class="line">JAY9</span><br><span class="line">LOR6</span><br><span class="line">2 7</span><br><span class="line">ANN0</span><br><span class="line">BOB5</span><br><span class="line">FRA8</span><br><span class="line">JAY9</span><br><span class="line">JOE4</span><br><span class="line">KAT3</span><br><span class="line">LOR6</span><br><span class="line">3 1</span><br><span class="line">BOB5</span><br><span class="line">4 7</span><br><span class="line">BOB5</span><br><span class="line">DON2</span><br><span class="line">FRA8</span><br><span class="line">JAY9</span><br><span class="line">KAT3</span><br><span class="line">LOR6</span><br><span class="line">ZOE1</span><br><span class="line">5 9</span><br><span class="line">AMY7</span><br><span class="line">ANN0</span><br><span class="line">BOB5</span><br><span class="line">DON2</span><br><span class="line">FRA8</span><br><span class="line">JAY9</span><br><span class="line">KAT3</span><br><span class="line">LOR6</span><br><span class="line">ZOE1</span><br></pre></td></tr></table></figure><h4 id="思路：-47"><a href="#思路：-47" class="headerlink" title="思路："></a>思路：</h4><ul><li>用二维数组储存每门课程的选择人名，用数组下标表示课程编号。</li><li>题目最后一个点会卡时间，用cout输出会超时，用peintf不会。</li><li>调用函数c_str()，string类型返回字符串首指针。</li></ul><h4 id="AC代码：-48"><a href="#AC代码：-48" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">40010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, k, c, x;</span><br><span class="line">string name;</span><br><span class="line">vector&lt;string&gt; ve[<span class="number">2510</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);</span></span><br><span class="line">cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ ) &#123;</span><br><span class="line">cin &gt;&gt; name &gt;&gt; c;</span><br><span class="line"><span class="keyword">while</span>(c -- ) &#123;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line">ve[x].<span class="built_in">push_back</span>(name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; i ++ ) &#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; ve[i].<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"><span class="built_in">sort</span>(ve[i].<span class="built_in">begin</span>(), ve[i].<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; ve[i].<span class="built_in">size</span>(); j ++ ) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, ve[i][j].<span class="built_in">c_str</span>());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="7-77-打印学生选课清单"><a href="#7-77-打印学生选课清单" class="headerlink" title="7-77 打印学生选课清单"></a>7-77 打印学生选课清单</h3><p>假设全校有最多40000名学生和最多2500门课程。现给出每门课的选课学生名单，要求输出每个前来查询的学生的选课清单。</p><h4 id="输入格式-25"><a href="#输入格式-25" class="headerlink" title="输入格式:"></a>输入格式:</h4><p>输入的第一行是两个正整数：N（≤40000），为前来查询课表的学生总数；K（≤2500），为总课程数。此后顺序给出课程1到K的选课学生名单。格式为：对每一门课，首先在一行中输出课程编号（简单起见，课程从1到K编号）和选课学生总数（之间用空格分隔），之后在第二行给出学生名单，相邻两个学生名字用1个空格分隔。学生姓名由3个大写英文字母+1位数字组成。选课信息之后，在一行内给出了N个前来查询课表的学生的名字，相邻两个学生名字用1个空格分隔。</p><h4 id="输出格式-25"><a href="#输出格式-25" class="headerlink" title="输出格式:"></a>输出格式:</h4><p>对每位前来查询课表的学生，首先输出其名字，随后在同一行中输出一个正整数C，代表该生所选的课程门数，随后按递增顺序输出C个课程的编号。相邻数据用1个空格分隔，注意行末不能输出多余空格。</p><h4 id="输入样例-21"><a href="#输入样例-21" class="headerlink" title="输入样例:"></a>输入样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">10 5</span><br><span class="line">1 4</span><br><span class="line">ANN0 BOB5 JAY9 LOR6</span><br><span class="line">2 7</span><br><span class="line">ANN0 BOB5 FRA8 JAY9 JOE4 KAT3 LOR6</span><br><span class="line">3 1</span><br><span class="line">BOB5</span><br><span class="line">4 7</span><br><span class="line">BOB5 DON2 FRA8 JAY9 KAT3 LOR6 ZOE1</span><br><span class="line">5 9</span><br><span class="line">AMY7 ANN0 BOB5 DON2 FRA8 JAY9 KAT3 LOR6 ZOE1</span><br><span class="line">ZOE1 ANN0 BOB5 JOE4 JAY9 FRA8 DON2 AMY7 KAT3 LOR6</span><br></pre></td></tr></table></figure><h4 id="输出样例-21"><a href="#输出样例-21" class="headerlink" title="输出样例:"></a>输出样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ZOE1 2 4 5</span><br><span class="line">ANN0 3 1 2 5</span><br><span class="line">BOB5 5 1 2 3 4 5</span><br><span class="line">JOE4 1 2</span><br><span class="line">JAY9 4 1 2 4 5</span><br><span class="line">FRA8 3 2 4 5</span><br><span class="line">DON2 2 4 5</span><br><span class="line">AMY7 1 5</span><br><span class="line">KAT3 3 2 4 5</span><br><span class="line">LOR6 4 1 2 4 5</span><br></pre></td></tr></table></figure><h4 id="思路：-48"><a href="#思路：-48" class="headerlink" title="思路："></a>思路：</h4><ul><li>以名字为key，邻接表储存每个人选的课。</li><li>输出时排序一下选的课的顺序直接输出即可。</li></ul><h4 id="AC代码：-49"><a href="#AC代码：-49" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">40010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, k, c, x;</span><br><span class="line"><span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">map&lt;string, vector&lt;<span class="type">int</span>&gt; &gt; ma;</span><br><span class="line">map&lt;string, vector&lt;<span class="type">int</span>&gt; &gt;::iterator it;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);</span></span><br><span class="line">cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i ++ ) &#123;</span><br><span class="line">cin &gt;&gt; x &gt;&gt; c;</span><br><span class="line"><span class="keyword">while</span>(c -- ) &#123;</span><br><span class="line">cin &gt;&gt; name;</span><br><span class="line">ma[name].<span class="built_in">push_back</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ ) &#123;</span><br><span class="line">cin &gt;&gt; name;</span><br><span class="line"><span class="type">int</span> len = ma[name].<span class="built_in">size</span>();</span><br><span class="line">cout &lt;&lt; name &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; len;</span><br><span class="line"><span class="built_in">sort</span>(ma[name].<span class="built_in">begin</span>(), ma[name].<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; len; j ++ ) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; ma[name][j];</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="7-78-Perfect-Sequence"><a href="#7-78-Perfect-Sequence" class="headerlink" title="7-78 Perfect Sequence"></a>7-78 Perfect Sequence</h3><h4 id="题目大意：-13"><a href="#题目大意：-13" class="headerlink" title="题目大意："></a>题目大意：</h4><p>给定一个整数序列和一个数 p，从中选出一个子序列，如果该序列的最大值M小于等于最小值m乘p，则称他为完美序列。输出一个序列的完美子序列最长为多少。</p><p>Given a sequence of positive integers and another positive integer <em>p</em>. The sequence is said to be a “perfect sequence” if <em>M</em>≤<em>m</em>×<em>p</em> where <em>M</em> and <em>m</em> are the maximum and minimum numbers in the sequence, respectively.</p><p>Now given a sequence and a parameter <em>p</em>, you are supposed to find from the sequence as many numbers as possible to form a perfect subsequence.</p><h4 id="Input-Specification-13"><a href="#Input-Specification-13" class="headerlink" title="Input Specification:"></a>Input Specification:</h4><p>Each input file contains one test case. For each case, the first line contains two positive integers <code>N</code> and <code>p</code>, where <code>N</code> (≤105) is the number of integers in the sequence, and <code>p</code> (≤109) is the parameter. In the second line there are <code>N</code> positive integers, each is no greater than 109.</p><h4 id="Output-Specification-13"><a href="#Output-Specification-13" class="headerlink" title="Output Specification:"></a>Output Specification:</h4><p>For each test case, print in one line the maximum number of integers that can be chosen to form a perfect subsequence.</p><h4 id="Sample-Input-8"><a href="#Sample-Input-8" class="headerlink" title="Sample Input:"></a>Sample Input:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10 8</span><br><span class="line">2 3 20 4 5 1 6 7 8 9</span><br></pre></td></tr></table></figure><h4 id="Sample-Output-8"><a href="#Sample-Output-8" class="headerlink" title="Sample Output:"></a>Sample Output:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8</span><br></pre></td></tr></table></figure><h4 id="思路：-49"><a href="#思路：-49" class="headerlink" title="思路："></a>思路：</h4><ul><li>把读入的序列排序，从第一个数开始遍历，每次去找到小于等于该数p倍的最大的数的位置，与该数位置相减即为完美子序列的长度。</li><li>查找小于等于某数的最大的数用二分或者调用upper_bound(),lower_bound()。<ul><li>lower_bound(key) 返回 &gt;&#x3D;key值的第一个元素。</li><li>upper_bound(key) 返回 &gt;key 值的第一个元素。</li></ul></li></ul><h4 id="AC代码：-50"><a href="#AC代码：-50" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> p, x;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ve[N];</span><br><span class="line"><span class="comment">//vector&lt;long long&gt; ve;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">erf</span><span class="params">(<span class="type">int</span> i, <span class="type">long</span> <span class="type">long</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(ve[n - <span class="number">1</span>] &lt;= x)</span><br><span class="line"><span class="keyword">return</span> n;</span><br><span class="line"><span class="type">int</span> l = i + <span class="number">1</span>, r = n - <span class="number">1</span>, mid;</span><br><span class="line"><span class="keyword">while</span>(l &lt; r) &#123;</span><br><span class="line">mid = (l + r) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(ve[mid] &lt;= x) &#123;</span><br><span class="line">l = mid + <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">r = mid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>); cin.<span class="built_in">tie</span>(<span class="number">0</span>); cout.<span class="built_in">tie</span>(<span class="number">0</span>); </span><br><span class="line">cin &gt;&gt; n &gt;&gt; p;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ ) &#123;</span><br><span class="line">cin &gt;&gt; ve[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(ve, ve + n);</span><br><span class="line"><span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ ) &#123;</span><br><span class="line"><span class="type">int</span> j = <span class="built_in">erf</span>(i, ve[i] * p);</span><br><span class="line">res = <span class="built_in">max</span>(res, j - i);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-81-两个有序序列的中位数"><a href="#7-81-两个有序序列的中位数" class="headerlink" title="7-81 两个有序序列的中位数"></a>7-81 两个有序序列的中位数</h3><p>已知有两个等长的非降序序列S1, S2, 设计函数求S1与S2并集的中位数。有序序列<em>A</em>0,<em>A</em>1,⋯,<em>A**N</em>−1的中位数指<em>A</em>(<em>N</em>−1)&#x2F;2的值,即第⌊(<em>N</em>+1)&#x2F;2⌋个数（<em>A</em>0为第1个数）。</p><h4 id="输入格式-26"><a href="#输入格式-26" class="headerlink" title="输入格式:"></a>输入格式:</h4><p>输入分三行。第一行给出序列的公共长度N（0&lt;N≤100000），随后每行输入一个序列的信息，即N个非降序排列的整数。数字用空格间隔。</p><h4 id="输出格式-26"><a href="#输出格式-26" class="headerlink" title="输出格式:"></a>输出格式:</h4><p>在一行中输出两个输入序列的并集序列的中位数。</p><h4 id="输入样例1-3"><a href="#输入样例1-3" class="headerlink" title="输入样例1:"></a>输入样例1:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">1 3 5 7 9</span><br><span class="line">2 3 4 5 6</span><br></pre></td></tr></table></figure><h4 id="输出样例1-4"><a href="#输出样例1-4" class="headerlink" title="输出样例1:"></a>输出样例1:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><h4 id="输入样例2-3"><a href="#输入样例2-3" class="headerlink" title="输入样例2:"></a>输入样例2:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">-100 -10 1 1 1 1</span><br><span class="line">-50 0 2 3 4 5</span><br></pre></td></tr></table></figure><h4 id="输出样例2-4"><a href="#输出样例2-4" class="headerlink" title="输出样例2:"></a>输出样例2:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><h4 id="思路：-50"><a href="#思路：-50" class="headerlink" title="思路："></a>思路：</h4><ul><li>两个相等长度的有序序列，中位数即为两序列合并以后的第n个元素。</li><li>读入两个序列以后，用两个指针依次从0开始，循坏n次找到第n个数，直接输出即可。</li></ul><h4 id="AC代码：-51"><a href="#AC代码：-51" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N], b[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>); cin.<span class="built_in">tie</span>(<span class="number">0</span>); cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ ) &#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ ) &#123;</span><br><span class="line">cin &gt;&gt; b[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> res = a[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; n; k ++ ) &#123;</span><br><span class="line"><span class="keyword">if</span>(a[i] &lt;= b[j]) &#123;</span><br><span class="line">res = a[i];</span><br><span class="line">i ++ ;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">res = b[j];</span><br><span class="line">j ++ ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="7-83-顺序存储的二叉树的最近的公共祖先问题"><a href="#7-83-顺序存储的二叉树的最近的公共祖先问题" class="headerlink" title="7-83 顺序存储的二叉树的最近的公共祖先问题"></a>7-83 顺序存储的二叉树的最近的公共祖先问题</h3><p>设顺序存储的二叉树中有编号为<em>i</em>和<em>j</em>的两个结点，请设计算法求出它们最近的公共祖先结点的编号和值。</p><h4 id="输入格式-27"><a href="#输入格式-27" class="headerlink" title="输入格式:"></a>输入格式:</h4><p>输入第1行给出正整数<em>n</em>（≤1000），即顺序存储的最大容量；第2行给出<em>n</em>个非负整数，其间以空格分隔。其中0代表二叉树中的空结点（如果第1个结点为0，则代表一棵空树）；第3行给出一对结点编号<em>i</em>和<em>j</em>。</p><p>题目保证输入正确对应一棵二叉树，且1≤<em>i</em>,<em>j</em>≤<em>n</em>。</p><h4 id="输出格式-27"><a href="#输出格式-27" class="headerlink" title="输出格式:"></a>输出格式:</h4><p>如果<em>i</em>或<em>j</em>对应的是空结点，则输出<code>ERROR: T[x] is NULL</code>，其中<code>x</code>是<em>i</em>或<em>j</em>中先发现错误的那个编号；否则在一行中输出编号为<em>i</em>和<em>j</em>的两个结点最近的公共祖先结点的编号和值，其间以1个空格分隔。</p><h4 id="输入样例1：-1"><a href="#输入样例1：-1" class="headerlink" title="输入样例1："></a>输入样例1：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">15</span><br><span class="line">4 3 5 1 10 0 7 0 2 0 9 0 0 6 8</span><br><span class="line">11 4</span><br></pre></td></tr></table></figure><h4 id="输出样例1：-1"><a href="#输出样例1：-1" class="headerlink" title="输出样例1："></a>输出样例1：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 3</span><br></pre></td></tr></table></figure><h4 id="输入样例2：-1"><a href="#输入样例2：-1" class="headerlink" title="输入样例2："></a>输入样例2：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">15</span><br><span class="line">4 3 5 1 0 0 7 0 2 0 9 0 0 6 8</span><br><span class="line">12 8</span><br></pre></td></tr></table></figure><h4 id="输出样例2：-1"><a href="#输出样例2：-1" class="headerlink" title="输出样例2："></a>输出样例2：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR: T[12] is NULL</span><br></pre></td></tr></table></figure><h4 id="思路：-51"><a href="#思路：-51" class="headerlink" title="思路："></a>思路：</h4><ul><li>数组储存二叉树从1开始。</li><li>读入a，b两个结点的位置，下标大的肯于该小的结点不是同一个结点，开始循环找两个结点的父节点，如果相等则是答案，最后肯定会回到根节点。</li></ul><h4 id="AC代码：-52"><a href="#AC代码：-52" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, a, b;</span><br><span class="line"><span class="type">int</span> T[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>); cin.<span class="built_in">tie</span>(<span class="number">0</span>); cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T[i]);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(T[a] == <span class="number">0</span> || T[b] == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(!T[a]) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ERROR: T[%d] is NULL&quot;</span>, a);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ERROR: T[%d] is NULL&quot;</span>, b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(a &gt; b) &#123;</span><br><span class="line"><span class="keyword">while</span>(a &gt; b) &#123;</span><br><span class="line">a /= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(a == b) <span class="keyword">break</span>;</span><br><span class="line">b /= <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(a == b) <span class="keyword">break</span>;</span><br><span class="line">a /= <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(a == b) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(a &lt; b) &#123;</span><br><span class="line"><span class="keyword">while</span>(a &lt; b) &#123;</span><br><span class="line">b /= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(a == b) <span class="keyword">break</span>;</span><br><span class="line">a /= <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(a == b) <span class="keyword">break</span>;</span><br><span class="line">b /= <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(a == b) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>, a, T[a]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/05/30/ble3wXi1r8MsfCL.png&quot; alt=&quot;wallhaven-z8p9rj_1920x1080&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;L2难度&quot;&gt;&lt;a href=&quot;#L2难度&quot; class=&quot;headerlink&quot; title=&quot;L2难度&quot;&gt;&lt;/a&gt;L2难度&lt;/h1&gt;&lt;h3 id=&quot;7-14-集合相似度&quot;&gt;&lt;a href=&quot;#7-14-集合相似度&quot; class=&quot;headerlink&quot; title=&quot;7-14 集合相似度&quot;&gt;&lt;/a&gt;7-14 集合相似度&lt;/h3&gt;&lt;p&gt;给定两个整数集合，它们的相似度定义为：&lt;em&gt;N**c&lt;/em&gt;&amp;#x2F;&lt;em&gt;N**t&lt;/em&gt;×100%。其中&lt;em&gt;N**c&lt;/em&gt;是两个集合都有的不相等整数的个数，&lt;em&gt;N**t&lt;/em&gt;是两个集合一共有的不相等整数的个数。你的任务就是计算任意一对给定集合的相似度。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="https://weienhua.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="竞赛" scheme="https://weienhua.github.io/categories/%E7%AE%97%E6%B3%95/%E7%AB%9E%E8%B5%9B/"/>
    
    
    <category term="PTA" scheme="https://weienhua.github.io/tags/PTA/"/>
    
    <category term="C/C++" scheme="https://weienhua.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="https://weienhua.github.io/2022/05/22/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>https://weienhua.github.io/2022/05/22/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</id>
    <published>2022-05-22T10:01:49.000Z</published>
    <updated>2022-05-30T10:09:42.374Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/05/30/K3ktcoNbYWwnmQl.jpg" alt="好年 新年 孔明灯 女孩 4k动漫壁纸_彼岸图网"></p><p>哈哈哈哈，明天回家，激动！！！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/05/30/K3ktcoNbYWwnmQl.jpg&quot; alt=&quot;好年 新年 孔明灯 女孩 4k动漫壁纸_彼岸图网&quot;&gt;&lt;/p&gt;
&lt;p&gt;哈哈哈哈，明天回家，激动！！！&lt;/p&gt;
</summary>
      
    
    
    
    <category term="日常" scheme="https://weienhua.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
  </entry>
  
</feed>
