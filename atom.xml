<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>欢迎来到后花园</title>
  
  
  <link href="https://weienhua.github.io/atom.xml" rel="self"/>
  
  <link href="https://weienhua.github.io/"/>
  <updated>2023-07-28T08:46:48.920Z</updated>
  <id>https://weienhua.github.io/</id>
  
  <author>
    <name>weienhua</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>视辰信息科技（上海）有限公司面试</title>
    <link href="https://weienhua.github.io/2023/07/28/%E8%A7%86%E8%BE%B0%E4%BF%A1%E6%81%AF%E7%A7%91%E6%8A%80%EF%BC%88%E4%B8%8A%E6%B5%B7%EF%BC%89%E6%9C%89%E9%99%90%E5%85%AC%E5%8F%B8%E9%9D%A2%E8%AF%95/"/>
    <id>https://weienhua.github.io/2023/07/28/%E8%A7%86%E8%BE%B0%E4%BF%A1%E6%81%AF%E7%A7%91%E6%8A%80%EF%BC%88%E4%B8%8A%E6%B5%B7%EF%BC%89%E6%9C%89%E9%99%90%E5%85%AC%E5%8F%B8%E9%9D%A2%E8%AF%95/</id>
    <published>2023-07-28T08:23:40.000Z</published>
    <updated>2023-07-28T08:46:48.920Z</updated>
    
    <content type="html"><![CDATA[<h3 id="视辰信息科技（上海）有限公司面试"><a href="#视辰信息科技（上海）有限公司面试" class="headerlink" title="视辰信息科技（上海）有限公司面试"></a>视辰信息科技（上海）有限公司面试</h3><p>boss直聘投简历，前端实习生，投过去等了两天，然后回复问了一下可以实习多久，然后就约了第二天面试。面完之后说是主要做小程序的。</p><span id="more"></span><h4 id="一面（2023-07-28）"><a href="#一面（2023-07-28）" class="headerlink" title="一面（2023-07-28）"></a>一面（2023-07-28）</h4><p>这个算是技术面吧，从开始到结束大概有40分钟左右，考察的方面感觉比较多方位了。流程大概就下面这些。</p><ul><li>自我介绍+项目介绍</li><li>你认为项目中比较困难的点或者说开发时遇到的难点有什么</li><li>为什么用opencv，有其他可以替代的技术吗（项目中有监控模块提到了opencv读取视频流，所以面试官就提到了）</li><li>小程序开发了解吗</li><li>看你简历上写会用nodejs</li><li>前端的布局</li><li>js数组有哪些方法</li><li>js逻辑问题<ul><li>给定两个数组，怎么去求两个数组的交集</li></ul></li><li>微信小程序做过的项目介绍一下</li><li>vue组件间的通信</li><li>你能接受微信小程序开发这个方向吗</li></ul><p>大概就这么多，完事之后就是等通知。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;视辰信息科技（上海）有限公司面试&quot;&gt;&lt;a href=&quot;#视辰信息科技（上海）有限公司面试&quot; class=&quot;headerlink&quot; title=&quot;视辰信息科技（上海）有限公司面试&quot;&gt;&lt;/a&gt;视辰信息科技（上海）有限公司面试&lt;/h3&gt;&lt;p&gt;boss直聘投简历，前端实习生，投过去等了两天，然后回复问了一下可以实习多久，然后就约了第二天面试。面完之后说是主要做小程序的。&lt;/p&gt;</summary>
    
    
    
    <category term="面试" scheme="https://weienhua.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="前端" scheme="https://weienhua.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>上海梭翱信息技术有限公司面试</title>
    <link href="https://weienhua.github.io/2023/07/28/%E4%B8%8A%E6%B5%B7%E6%A2%AD%E7%BF%B1%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF%E6%9C%89%E9%99%90%E5%85%AC%E5%8F%B8%E9%9D%A2%E8%AF%95/"/>
    <id>https://weienhua.github.io/2023/07/28/%E4%B8%8A%E6%B5%B7%E6%A2%AD%E7%BF%B1%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF%E6%9C%89%E9%99%90%E5%85%AC%E5%8F%B8%E9%9D%A2%E8%AF%95/</id>
    <published>2023-07-28T03:02:32.000Z</published>
    <updated>2023-07-28T08:51:44.645Z</updated>
    
    <content type="html"><![CDATA[<h3 id="上海梭翱信息技术有限公司面试"><a href="#上海梭翱信息技术有限公司面试" class="headerlink" title="上海梭翱信息技术有限公司面试"></a>上海梭翱信息技术有限公司面试</h3><p>其实在这次面试前，boss直聘上的面试官给打电话了，电话是说了大概的薪资待遇，因为这边是在郑州，然后去上海工作一个人过去，面试官说上海的租房有点贵，得两千，然后住和吃下来估计就把工资花完了。让我考虑好之后跟他约面试，想了想要不还是先面试吧，过了再考虑去不去，别决定要去了，然后面试没过，所以就有了下面的技术面。</p><span id="more"></span><h4 id="一面（2023-07-28）"><a href="#一面（2023-07-28）" class="headerlink" title="一面（2023-07-28）"></a>一面（2023-07-28）</h4><p>这次算是技术面吧，在腾讯会议面的，面试官是公司的前端开发，问了一下比较基础的问题。</p><ul><li>自我介绍+项目介绍</li><li>你在项目中负责什么</li><li>在项目开发中遇到的最不好解决的问题是什么</li><li>css如何实现垂直居中</li><li>了解防抖和节流吗</li><li>浏览器储存信息的方式有什么</li><li>react组件间传递信息</li><li>react组件生命周期</li></ul><p>面试完之后就是说等通知。</p><h4 id="通过"><a href="#通过" class="headerlink" title="通过"></a>通过</h4><p>上午面的技术面，中午一点半打电话说面试通过了，然后让好好考虑一下，上海租房成本比较高，所以hr也让好好想想，毕竟一天200，确实不多。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;上海梭翱信息技术有限公司面试&quot;&gt;&lt;a href=&quot;#上海梭翱信息技术有限公司面试&quot; class=&quot;headerlink&quot; title=&quot;上海梭翱信息技术有限公司面试&quot;&gt;&lt;/a&gt;上海梭翱信息技术有限公司面试&lt;/h3&gt;&lt;p&gt;其实在这次面试前，boss直聘上的面试官给打电话了，电话是说了大概的薪资待遇，因为这边是在郑州，然后去上海工作一个人过去，面试官说上海的租房有点贵，得两千，然后住和吃下来估计就把工资花完了。让我考虑好之后跟他约面试，想了想要不还是先面试吧，过了再考虑去不去，别决定要去了，然后面试没过，所以就有了下面的技术面。&lt;/p&gt;</summary>
    
    
    
    <category term="面试" scheme="https://weienhua.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="前端" scheme="https://weienhua.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>霖客达面试</title>
    <link href="https://weienhua.github.io/2023/07/28/%E9%9C%96%E5%AE%A2%E8%BE%BE%E9%9D%A2%E8%AF%95/"/>
    <id>https://weienhua.github.io/2023/07/28/%E9%9C%96%E5%AE%A2%E8%BE%BE%E9%9D%A2%E8%AF%95/</id>
    <published>2023-07-28T00:55:55.000Z</published>
    <updated>2023-07-28T08:52:15.120Z</updated>
    
    <content type="html"><![CDATA[<h3 id="霖客达面试"><a href="#霖客达面试" class="headerlink" title="霖客达面试"></a>霖客达面试</h3><h4 id="一面（2023-07-27）"><a href="#一面（2023-07-27）" class="headerlink" title="一面（2023-07-27）"></a>一面（2023-07-27）</h4><p>面试是在boss直聘上投的，本来以为不会回复了，因为也没读，前天晚上忽然回复了，问可以实习多久，说公司准备直接签三年，一下子有点懵，这是不是骗大学生的，后面回复他可以长期实习，如果毕业之后可以留公司继续那肯定也是可以的，然后就约了第二天面试，怎么说呢，感觉自己的实力有点差，后来又想，面试就面试吧，如果看上了那肯定很好，没看上也没什么，接着学习就可以了。</p><span id="more"></span><p>面试是在boss直聘上进行的，在线视频面试，流程大概就下面这些：</p><ul><li>自我介绍</li><li>讲一下自己觉得做的最好的一个项目</li><li>还记得一些排序算法吗</li><li>讲一下快排吧</li><li>设计模式记得几种（这个之前没有学习过，面试官大概说了几个，听到了单例模式，想起来之前用过单例模式在监控分析程序上）</li><li>讲了一下自己之前用过的一个单例模式</li><li>结束，说这两天还会安排第二次面试</li></ul><p>面试完之后说等通知吧，这两天可能还会有人联系找你面试。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;霖客达面试&quot;&gt;&lt;a href=&quot;#霖客达面试&quot; class=&quot;headerlink&quot; title=&quot;霖客达面试&quot;&gt;&lt;/a&gt;霖客达面试&lt;/h3&gt;&lt;h4 id=&quot;一面（2023-07-27）&quot;&gt;&lt;a href=&quot;#一面（2023-07-27）&quot; class=&quot;headerlink&quot; title=&quot;一面（2023-07-27）&quot;&gt;&lt;/a&gt;一面（2023-07-27）&lt;/h4&gt;&lt;p&gt;面试是在boss直聘上投的，本来以为不会回复了，因为也没读，前天晚上忽然回复了，问可以实习多久，说公司准备直接签三年，一下子有点懵，这是不是骗大学生的，后面回复他可以长期实习，如果毕业之后可以留公司继续那肯定也是可以的，然后就约了第二天面试，怎么说呢，感觉自己的实力有点差，后来又想，面试就面试吧，如果看上了那肯定很好，没看上也没什么，接着学习就可以了。&lt;/p&gt;</summary>
    
    
    
    <category term="面试" scheme="https://weienhua.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="前端" scheme="https://weienhua.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>链表中环的入口结点</title>
    <link href="https://weienhua.github.io/2023/07/25/%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%8E%AF%E7%9A%84%E5%85%A5%E5%8F%A3%E7%BB%93%E7%82%B9/"/>
    <id>https://weienhua.github.io/2023/07/25/%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%8E%AF%E7%9A%84%E5%85%A5%E5%8F%A3%E7%BB%93%E7%82%B9/</id>
    <published>2023-07-25T03:57:00.000Z</published>
    <updated>2023-07-25T04:11:47.841Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链表中环的入口结点"><a href="#链表中环的入口结点" class="headerlink" title="链表中环的入口结点"></a>链表中环的入口结点</h3><p>题目来自acwing</p><h4 id="题目（点击跳转）"><a href="#题目（点击跳转）" class="headerlink" title="题目（点击跳转）"></a><a href="https://www.acwing.com/problem/content/86/">题目（点击跳转）</a></h4><p>给定一个链表，若其中包含环，则输出环的入口节点。</p><p>若其中不包含环，则输出<code>null</code>。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>节点 val 值取值范围 [1,1000]。</p><p>节点 val 值各不相同。 </p><p>链表长度 [0,500]。</p><h4 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h4><p><img src="https://www.acwing.com/media/article/image/2018/12/02/19_69ba6d14f5-QQ%E6%88%AA%E5%9B%BE20181202023846.png" alt="QQ截图20181202023846.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">给定如上所示的链表：</span><br><span class="line">[1, 2, 3, 4, 5, 6]</span><br><span class="line">2</span><br><span class="line">注意，这里的2表示编号是2的节点，节点编号从0开始。所以编号是2的节点就是val等于3的节点。</span><br><span class="line"></span><br><span class="line">则输出环的入口节点3.</span><br></pre></td></tr></table></figure><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p>双指针实现，定义两个指针，first和second，同时从链表头部开始走，first每次走一步，second每次走两步，当second遇到NULL时代表链表走到尽头，即没有环。当两个指针第一次相遇时，将first重置为头节点的位置，second位置不变，这时让两个指针都已每次一步的距离开始走，当两个指针再次相遇时，这个点就是环的入口。</p><p><img src="https://www.acwing.com/media/article/image/2019/01/06/1_54311a0411-QQ%E5%9B%BE%E7%89%8720180531162503.png"></p><p>证明：假设b点为环的起点，当first和second从a开始出发，当first走到b时，first走了距离<code>x</code>，second走过了first两倍的路程，即为<code>2x</code>，second可能在环上已经走过一圈以上，这次加入first再走<code>y</code>距离与second相遇，那么second走的距离即为<code>2y</code>，也就是说当first在b时，second与b的距离为<code>y</code>，那当second走出了b点距离为<code>y</code>时，在环上再走距离<code>x</code>必定可以回到b点，那么将first从头节点开始走<code>x</code>，此时与second第二次相遇即为环的开始节点。</p><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">entryNodeOfLoop</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head || !head-&gt;next) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">auto</span> first = head, second = head;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(first &amp;&amp; second) &#123;</span><br><span class="line">            first = first-&gt;next;</span><br><span class="line">            second = second-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(second) second = second-&gt;next;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">            <span class="keyword">if</span>(first == second)&#123;</span><br><span class="line">                first = head;</span><br><span class="line">                <span class="keyword">while</span>(first != second)&#123;</span><br><span class="line">                    first = first-&gt;next;</span><br><span class="line">                    second = second-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> first;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;链表中环的入口结点&quot;&gt;&lt;a href=&quot;#链表中环的入口结点&quot; class=&quot;headerlink&quot; title=&quot;链表中环的入口结点&quot;&gt;&lt;/a&gt;链表中环的入口结点&lt;/h3&gt;&lt;p&gt;题目来自acwing&lt;/p&gt;
&lt;h4 id=&quot;题目（点击跳转）&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="算法" scheme="https://weienhua.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="笔试" scheme="https://weienhua.github.io/categories/%E7%AE%97%E6%B3%95/%E7%AC%94%E8%AF%95/"/>
    
    
    <category term="c/c++" scheme="https://weienhua.github.io/tags/c-c/"/>
    
  </entry>
  
  <entry>
    <title>包含min函数的栈</title>
    <link href="https://weienhua.github.io/2023/07/25/%E5%8C%85%E5%90%ABmin%E5%87%BD%E6%95%B0%E7%9A%84%E6%A0%88/"/>
    <id>https://weienhua.github.io/2023/07/25/%E5%8C%85%E5%90%ABmin%E5%87%BD%E6%95%B0%E7%9A%84%E6%A0%88/</id>
    <published>2023-07-25T03:50:19.000Z</published>
    <updated>2023-07-25T03:56:37.263Z</updated>
    
    <content type="html"><![CDATA[<h3 id="包含min函数的栈"><a href="#包含min函数的栈" class="headerlink" title="包含min函数的栈"></a>包含min函数的栈</h3><p>题目来自acwing</p><h4 id="题目（点击跳转）"><a href="#题目（点击跳转）" class="headerlink" title="题目（点击跳转）"></a><a href="https://www.acwing.com/problem/content/90/">题目（点击跳转）</a></h4><p>设计一个支持push，pop，top等操作并且可以在O(1)时间内检索出最小元素的堆栈。</p><span id="more"></span><ul><li>push(x)–将元素x插入栈中</li><li>pop()–移除栈顶元素</li><li>top()–得到栈顶元素</li><li>getMin()–得到栈中最小元素</li></ul><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>操作命令总数 [0,100]。</p><h4 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MinStack minStack = new MinStack();</span><br><span class="line">minStack.push(-1);</span><br><span class="line">minStack.push(3);</span><br><span class="line">minStack.push(-4);</span><br><span class="line">minStack.getMin();   --&gt; Returns -4.</span><br><span class="line">minStack.pop();</span><br><span class="line">minStack.top();      --&gt; Returns 3.</span><br><span class="line">minStack.getMin();   --&gt; Returns -1.</span><br></pre></td></tr></table></figure><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p>题目要求实现一个随时可以获取所有元素中最小值的栈，这里需要维护一个单调栈</p><ul><li>也就是当对栈进行压栈操作时，判断一下单调栈是否为空或者单调栈栈顶元素是否大于要压入的元素，如果满足则将该元素也同步压入单调栈中，当要去最小值时直接将单调栈的栈顶元素取出即可。</li><li>当进行弹出栈顶元素时，判断一下栈顶元素是否与单调栈栈顶元素相同，如果相同那么代表栈中该元素弹出，两个栈中都弹出。</li></ul><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MinStack</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/** initialize your data structure here. */</span></span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; stackValue;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; stackMin;</span><br><span class="line">    <span class="built_in">MinStack</span>() &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        stackValue.<span class="built_in">push</span>(x);</span><br><span class="line">        <span class="keyword">if</span>(stackMin.<span class="built_in">empty</span>() || stackMin.<span class="built_in">top</span>() &gt;= x)</span><br><span class="line">            stackMin.<span class="built_in">push</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(stackValue.<span class="built_in">top</span>() == stackMin.<span class="built_in">top</span>())</span><br><span class="line">            stackMin.<span class="built_in">pop</span>();</span><br><span class="line">        stackValue.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stackValue.<span class="built_in">top</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stackMin.<span class="built_in">top</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MinStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MinStack obj = new MinStack();</span></span><br><span class="line"><span class="comment"> * obj.push(x);</span></span><br><span class="line"><span class="comment"> * obj.pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj.top();</span></span><br><span class="line"><span class="comment"> * int param_4 = obj.getMin();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;包含min函数的栈&quot;&gt;&lt;a href=&quot;#包含min函数的栈&quot; class=&quot;headerlink&quot; title=&quot;包含min函数的栈&quot;&gt;&lt;/a&gt;包含min函数的栈&lt;/h3&gt;&lt;p&gt;题目来自acwing&lt;/p&gt;
&lt;h4 id=&quot;题目（点击跳转）&quot;&gt;&lt;a href=&quot;#题目（点击跳转）&quot; class=&quot;headerlink&quot; title=&quot;题目（点击跳转）&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.acwing.com/problem/content/90/&quot;&gt;题目（点击跳转）&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;设计一个支持push，pop，top等操作并且可以在O(1)时间内检索出最小元素的堆栈。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="https://weienhua.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="笔试" scheme="https://weienhua.github.io/categories/%E7%AE%97%E6%B3%95/%E7%AC%94%E8%AF%95/"/>
    
    
    <category term="c/c++" scheme="https://weienhua.github.io/tags/c-c/"/>
    
  </entry>
  
  <entry>
    <title>鸡蛋的硬度</title>
    <link href="https://weienhua.github.io/2023/07/25/%E9%B8%A1%E8%9B%8B%E7%9A%84%E7%A1%AC%E5%BA%A6/"/>
    <id>https://weienhua.github.io/2023/07/25/%E9%B8%A1%E8%9B%8B%E7%9A%84%E7%A1%AC%E5%BA%A6/</id>
    <published>2023-07-25T00:50:23.000Z</published>
    <updated>2023-07-25T01:30:04.800Z</updated>
    
    <content type="html"><![CDATA[<h3 id="鸡蛋的硬度"><a href="#鸡蛋的硬度" class="headerlink" title="鸡蛋的硬度"></a>鸡蛋的硬度</h3><p>题目来自acwing</p><h4 id="题目（点击跳转）"><a href="#题目（点击跳转）" class="headerlink" title="题目（点击跳转）"></a><a href="https://www.acwing.com/problem/content/1050/">题目（点击跳转）</a></h4><p>最近XX公司举办了一个奇怪的比赛：鸡蛋硬度之王争霸赛。</p><p>参赛者是来自世界各地的母鸡，比赛的内容是看谁下的蛋最硬，更奇怪的是XX公司并不使用什么精密仪器来测量蛋的硬度，他们采用了一种最老土的办法–从高度扔鸡蛋–来测试鸡蛋的硬度，如果一次母鸡下的蛋从高楼的第a层摔下来没摔破，但是从a+1层摔下来时摔破了，那么就说这只母鸡的鸡蛋的硬度是a。</p><span id="more"></span><p>你当然可以找出各种理由说明这种方法不科学，比如同一只母鸡下的蛋硬度可能不一样等等，但是这不影响XX公司的争霸赛，因为他们只是为了吸引大家的眼球，一个个鸡蛋从100 层的高楼上掉下来的时候，这情景还是能吸引很多人驻足观看的，当然，XX公司也绝不会忘记在高楼上挂一条幅，写上“XX公司”的字样–这比赛不过是XX公司的一个另类广告而已。</p><p>勤于思考的小A总是能从一件事情中发现一个数学问题，这件事也不例外。</p><p>“假如有很多同样硬度的鸡蛋，那么我可以用二分的办法用最少的次数测出鸡蛋的硬度”，小A对自己的这个结论感到很满意，不过很快麻烦来了，“但是，假如我的鸡蛋不够用呢，比如我只有1个鸡蛋，那么我就不得不从第1层楼开始一层一层的扔，最坏情况下我要扔100次。如果有2个鸡蛋，那么就从2层楼开始的地方扔……等等，不对，好像应该从1&#x2F;3的地方开始扔才对，嗯，好像也不一定啊……3个鸡蛋怎么办，4个，5个，更多呢……”，和往常一样，小A又陷入了一个思维僵局，与其说他是勤于思考，不如说他是喜欢自找麻烦。</p><p>好吧，既然麻烦来了，就得有人去解决，小A的麻烦就靠你来解决了。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入包括多组数据，每组数据一行，包含两个正整数 n 和 m，其中 n 表示楼的高度，m 表示你现在拥有的鸡蛋个数，这些鸡蛋硬度相同（即它们从同样高的地方掉下来要么都摔碎要么都不碎），并且小于等于 n。</p><p>你可以假定硬度为 x 的鸡蛋从高度小于等于 x 的地方摔无论如何都不会碎（没摔碎的鸡蛋可以继续使用），而只要从比 x 高的地方扔必然会碎。</p><p>对每组输入数据，你可以假定鸡蛋的硬度在 0 至 n 之间，即在 n+1 层扔鸡蛋一定会碎。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>对于每一组输入，输出一个整数，表示使用最优策略在最坏情况下所需要的扔鸡蛋次数。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤100<br>1≤m≤10</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">100 1</span><br><span class="line">100 2</span><br></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">100</span><br><span class="line">14</span><br></pre></td></tr></table></figure><h4 id="样例解释"><a href="#样例解释" class="headerlink" title="样例解释"></a>样例解释</h4><p>最优策略指在最坏情况下所需要的扔鸡蛋次数最少的策略。</p><p>如果只有一个鸡蛋，你只能从第一层开始扔，在最坏的情况下，鸡蛋的硬度是100，所以需要扔100次。如果采用其他策略，你可能无法测出鸡蛋的硬度(比如你第一次在第二层的地方扔,结果碎了,这时你不能确定硬度是0还是1)，即在最坏情况下你需要扔无限次，所以第一组数据的答案是100。</p><h4 id="思路一："><a href="#思路一：" class="headerlink" title="思路一："></a>思路一：</h4><p>$$<br>时间复杂度O(n^2m)<br>$$</p><ul><li>状态表示<ul><li>集合：<code>f[i][j]</code>表示所有测量区间长度为<code>i</code>且用了<code>j</code>个鸡蛋的测量次数的集合</li><li>属性：最坏情况下的最小值</li></ul></li><li>状态计算<ul><li>最后一个鸡蛋没有用到：<code>f[i][j] = f[i-1][j]</code></li><li>最后一个鸡蛋用了，这里分多种情况，看最后一个鸡蛋在那个点用的，需要循环遍历一遍<code>1-i</code>，假设在第k个位置用了第 j 个鸡蛋，那么有两种情况<ul><li>鸡蛋碎了，则<code>f[i][j] = f[k-1][j-1]</code></li><li>鸡蛋没碎，则<code>f[i][j] = f[i-k][j-1]</code></li></ul></li><li>那鸡蛋碎和不碎是一个不确定事件，所以这里要去两者的最大值，然后再加一，因为第k层测试了一次。</li><li>所以状态计算为：<code>f[i][j] = max(f[k-1][j-1], f[i-k][j-1]) + 1</code></li></ul></li><li>最后得到两种情况状态计算，再求最小值即可。</li><li><code>f[i][j] = min(f[i-1][j], max(f[k-1][j-1], f[i-k][j-1]) + 1)</code></li></ul><h4 id="代码一："><a href="#代码一：" class="headerlink" title="代码一："></a>代码一：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>, M = <span class="number">11</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> f[N][M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m))&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) f[i][<span class="number">1</span>] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i ++ ) f[<span class="number">1</span>][i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i ++ ) </span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">2</span>; j &lt;= m; j ++ )&#123;</span><br><span class="line">                f[i][j] = f[i][j - <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>; k &lt;= i; k ++ ) </span><br><span class="line">                    f[i][j] = <span class="built_in">min</span>(f[i][j], <span class="built_in">max</span>(f[k - <span class="number">1</span>][j - <span class="number">1</span>], f[i - k][j]) + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        cout &lt;&lt; f[n][m] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="思路二："><a href="#思路二：" class="headerlink" title="思路二："></a>思路二：</h4><p>$$<br>时间复杂度O(nm)<br>$$</p><ul><li>状态表示<ul><li>集合：所有使用<code>j</code>个鸡蛋，测量次数为<code>i</code>的区间长度的集合</li><li>属性：最大值</li></ul></li><li>状态计算<ul><li>第<code>j</code>个鸡蛋使用位置为高度，假设为<code>k</code><ul><li>鸡蛋碎了，高度在<code>k</code>下边，<code>f[i-1][j-1]</code></li><li>鸡蛋没碎，高度在<code>k</code>上边，<code>f[i-1][j]</code></li></ul></li><li>那么能测量区间的最大值就是<code>f[i][j] = f[i-1][j-1] + f[i-1][j] + 1</code></li></ul></li></ul><h4 id="代码二："><a href="#代码二：" class="headerlink" title="代码二："></a>代码二：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>, M = <span class="number">11</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> f[N][M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; n &gt;&gt; m) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j ++ )</span><br><span class="line">                f[i][j] = f[i - <span class="number">1</span>][j] + f[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(f[i][m] &gt;= n)&#123;</span><br><span class="line">                cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;鸡蛋的硬度&quot;&gt;&lt;a href=&quot;#鸡蛋的硬度&quot; class=&quot;headerlink&quot; title=&quot;鸡蛋的硬度&quot;&gt;&lt;/a&gt;鸡蛋的硬度&lt;/h3&gt;&lt;p&gt;题目来自acwing&lt;/p&gt;
&lt;h4 id=&quot;题目（点击跳转）&quot;&gt;&lt;a href=&quot;#题目（点击跳转）&quot; class=&quot;headerlink&quot; title=&quot;题目（点击跳转）&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.acwing.com/problem/content/1050/&quot;&gt;题目（点击跳转）&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;最近XX公司举办了一个奇怪的比赛：鸡蛋硬度之王争霸赛。&lt;/p&gt;
&lt;p&gt;参赛者是来自世界各地的母鸡，比赛的内容是看谁下的蛋最硬，更奇怪的是XX公司并不使用什么精密仪器来测量蛋的硬度，他们采用了一种最老土的办法–从高度扔鸡蛋–来测试鸡蛋的硬度，如果一次母鸡下的蛋从高楼的第a层摔下来没摔破，但是从a+1层摔下来时摔破了，那么就说这只母鸡的鸡蛋的硬度是a。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="https://weienhua.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="笔试" scheme="https://weienhua.github.io/categories/%E7%AE%97%E6%B3%95/%E7%AC%94%E8%AF%95/"/>
    
    
    <category term="c/c++" scheme="https://weienhua.github.io/tags/c-c/"/>
    
  </entry>
  
  <entry>
    <title>寻找矩阵的极小值</title>
    <link href="https://weienhua.github.io/2023/07/24/%E5%AF%BB%E6%89%BE%E7%9F%A9%E9%98%B5%E7%9A%84%E6%9E%81%E5%B0%8F%E5%80%BC/"/>
    <id>https://weienhua.github.io/2023/07/24/%E5%AF%BB%E6%89%BE%E7%9F%A9%E9%98%B5%E7%9A%84%E6%9E%81%E5%B0%8F%E5%80%BC/</id>
    <published>2023-07-24T12:44:49.000Z</published>
    <updated>2023-07-24T13:08:11.584Z</updated>
    
    <content type="html"><![CDATA[<h3 id="寻找矩阵的极小值"><a href="#寻找矩阵的极小值" class="headerlink" title="寻找矩阵的极小值"></a>寻找矩阵的极小值</h3><p>题目来自acwing</p><h4 id="题目（点击跳转）"><a href="#题目（点击跳转）" class="headerlink" title="题目（点击跳转）"></a><a href="https://www.acwing.com/problem/content/1454/">题目（点击跳转）</a></h4><p>给定一个 n×n的矩阵，矩阵中包含 n×n个 <strong>互不相同</strong> 的整数。</p><p>定义极小值：如果一个数的值比与它相邻的所有数字的值都小，则这个数值就被称为极小值。</p><span id="more"></span><p>一个数的相邻数字是指其上下左右四个方向相邻的四个数字，另外注意，处于边界或角落的数的相邻数字可能少于四个。</p><p>要求在 O(nlogn) 的时间复杂度之内找出任意一个极小值的位置，并输出它在第几行第几列。</p><p>本题中矩阵是隐藏的，你可以通过我们预设的 int 函数 query来获得矩阵中某个位置的数值是多少。</p><p>例如，query(a,b) 即可获得矩阵中第 a行第 b 列的位置的数值。</p><p><strong>注意：</strong></p><ol><li>矩阵的行和列均从 00 开始编号。</li><li><code>query()</code>函数的调用次数不能超过 (n+2)×⌈log2n⌉+n。</li><li>答案不唯一，输出任意一个极小值的位置即可。</li></ol><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤300，矩阵中的整数在<code>int</code>范围内。</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[1, 2, 3], [4, 5, 6], [7, 8, 9]]</span><br></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[0, 0]</span><br></pre></td></tr></table></figure><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p><strong>二分</strong></p><p>题目的意思是一个n*n的矩阵，里面每一个数都是互不相同的且都在int范围内，要找到一个极小值（这里答案不唯一），任意一个合法答案即可。这里极小值的定义就是小于和它相邻的任意一个数，如果在边上，那就是小于其他的数。</p><p>解法的话，就是使用二分，对矩阵的列进行二分，首先取出中间的一列，从上到小遍历出这一列的最小值，找到这个位置后，取出它左边和右边相邻的元素，然后进行比较</p><ul><li>如果左边和右边的元素都大于它，那么这个位置就是一个合法的答案。</li><li>如果左边小于它，那么在左边的区域肯定可以找到一个合法的答案。<ul><li>这里可以描述一下，就是中间一列的最小值，然后左边的元素小于它，那么就可以顺着左侧元素开始找，不管如何找，不会穿过中间这一列到右边，所以左侧一定可以找到一个答案，那同理，右侧也是一样的。</li></ul></li><li>如果右边小于它，那么在右边的区域肯定也可以找到一个合法的答案。</li></ul><p>假设这里左侧元素小，那么将左侧的二分之n列再进行二分，重复上面的操作，又可以将二分之n列分为二分之一，最后找到一列，在这一列上找到最小的值就是合法的极小值。</p><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Forward declaration of queryAPI.</span></span><br><span class="line"><span class="comment">// int query(int x, int y);</span></span><br><span class="line"><span class="comment">// return int means matrix[x][y].</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">getMinimumValue</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line">        <span class="comment">// 定义左边界和右边界</span></span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = n - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 定义一个最大的数，方便在一列中寻找最小值时对变量进行初始化</span></span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">        <span class="comment">// 二分列</span></span><br><span class="line">        <span class="keyword">while</span>(l &lt; r) &#123;</span><br><span class="line">            <span class="comment">// 取出列的中间一列,然后循环找到这一列的最小值</span></span><br><span class="line">            <span class="type">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">            <span class="type">int</span> k;</span><br><span class="line">            <span class="type">int</span> val = INF;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ ) &#123;</span><br><span class="line">                <span class="type">int</span> t = <span class="built_in">query</span>(i, mid);</span><br><span class="line">                <span class="keyword">if</span>(val &gt; t) &#123;</span><br><span class="line">                    val = t;</span><br><span class="line">                    k = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 找到最小值即为[k,mid]，取出左右两边的元素，如果出界就为INF</span></span><br><span class="line">            <span class="type">int</span> left = mid ? <span class="built_in">query</span>(k, mid - <span class="number">1</span>) : INF;</span><br><span class="line">            <span class="type">int</span> right = mid + <span class="number">1</span> &lt; n ? <span class="built_in">query</span>(k, mid + <span class="number">1</span>) : INF;</span><br><span class="line">            <span class="comment">// 进行比较</span></span><br><span class="line">            <span class="keyword">if</span>(val &lt; left &amp;&amp; val &lt; right) <span class="keyword">return</span> &#123;k, mid&#125;;</span><br><span class="line">            <span class="keyword">if</span>(val &gt; left) r = mid - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 次数L = R，也就是找到了答案所在的一列，进行遍历比较得出最小的数即为一个合法答案</span></span><br><span class="line">        <span class="type">int</span> k;</span><br><span class="line">        <span class="type">int</span> val = INF;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ ) &#123;</span><br><span class="line">            <span class="type">int</span> t = <span class="built_in">query</span>(i, r);</span><br><span class="line">            <span class="keyword">if</span>(val &gt; t) &#123;</span><br><span class="line">                val = t;</span><br><span class="line">                k = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;k, r&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;寻找矩阵的极小值&quot;&gt;&lt;a href=&quot;#寻找矩阵的极小值&quot; class=&quot;headerlink&quot; title=&quot;寻找矩阵的极小值&quot;&gt;&lt;/a&gt;寻找矩阵的极小值&lt;/h3&gt;&lt;p&gt;题目来自acwing&lt;/p&gt;
&lt;h4 id=&quot;题目（点击跳转）&quot;&gt;&lt;a href=&quot;#题目（点击跳转）&quot; class=&quot;headerlink&quot; title=&quot;题目（点击跳转）&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.acwing.com/problem/content/1454/&quot;&gt;题目（点击跳转）&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;给定一个 n×n的矩阵，矩阵中包含 n×n个 &lt;strong&gt;互不相同&lt;/strong&gt; 的整数。&lt;/p&gt;
&lt;p&gt;定义极小值：如果一个数的值比与它相邻的所有数字的值都小，则这个数值就被称为极小值。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="https://weienhua.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="笔试" scheme="https://weienhua.github.io/categories/%E7%AE%97%E6%B3%95/%E7%AC%94%E8%AF%95/"/>
    
    
    <category term="c/c++" scheme="https://weienhua.github.io/tags/c-c/"/>
    
  </entry>
  
  <entry>
    <title>vue实战项目1</title>
    <link href="https://weienhua.github.io/2023/07/23/vue%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE1/"/>
    <id>https://weienhua.github.io/2023/07/23/vue%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE1/</id>
    <published>2023-07-23T12:17:32.000Z</published>
    <updated>2023-07-24T00:20:32.973Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vue实战项目1"><a href="#vue实战项目1" class="headerlink" title="vue实战项目1"></a>vue实战项目1</h3><p>vue实战项目学习第一天，尚硅谷实战课程尚品汇项目。</p><p>项目开始，主要做的是配置环境和开始开发。今天配置了项目的脚手架，代理（跨域问题），vuex，vue-router，axios二次封装，nprogress进度条的安装，防抖和节流（Lodash.js）</p><p>以下是个人理解，如有错误请指正。</p><span id="more"></span><h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><p>首先是配置脚手架创建项目</p><p>这里用到的是vue-cli脚手架，直接进入cmd使用命令即可创建项目</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create [project-name]</span><br></pre></td></tr></table></figure><p>创建成功之后可以进入项目目录，运行<code>npm run serve</code>查看项目是否创建完成。</p><p>项目目录结构：</p><p>project</p><p>– node_modules 项目的依赖包安装目录</p><p>– public 项目的静态文件目录</p><p>– src 项目代码目录</p><p>—— assets 代码中用到的一些静态文件</p><p>—— components 组件目录（静态组件或者全局组件）</p><p>—— App.vue 所有组件的父组件</p><p>—— main.js 项目的入口文件</p><p>– .gitignore git仓库的一些忽略文件配置</p><p>– babel.config.js babel的配置文件</p><p>– jsconfig.json 配置文件</p><p>– package-lock.json 依赖包的缓存文件</p><p>– package.json 项目信息和依赖包配置</p><p>– README.md 项目文档</p><p>– vue.config.js vue和webpack配置</p><p>上面是通过脚手架创建的项目初始目录结构，主要开发是在src目录下进行的，今天的学习中src创建了其他的一些目录。</p><p>– api 对项目api统一管理的目录</p><p>– pages 路由组件放置的目录</p><p>– router vue-router的配置目录</p><p>– store vuex的配置目录</p><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>对于尚品汇项目，首先是对项目的页面进行了大致的分析，结构分离出了Header组件和Footer组件，由于两个组件在多个页面中使用同时也没有变化，所以将两个创建为非路由组件放在components目录下。</p><h5 id="拆分组件"><a href="#拆分组件" class="headerlink" title="拆分组件"></a>拆分组件</h5><p>拆分组件要注意的是将组件的结构和样式要一起拿走，同时还有组件用到的静态文件比如图片之类的，创建Header和Footer目录在components目录下，将组件写在index.vue文件中，将图片信息放在images目录下，这里将结构拿过来的时候要注意图片的路径可能会改变，所以要注意检查修改。</p><p><img src="https://s2.loli.net/2023/07/23/15aOMGRVYvQCATt.png" alt="image-20230723204004036"></p><p>在两个组件拆分完之后在App.vue里面去注册组件并将组件使用到页面上，检查一下组件的结构和样式是否有bug。</p><p>Header组件和Footer组件拆分完之后剩下的中间的即为Home组件，这里在Header中测试暂时发现了四个路由组件，也就是Home，Search这两个用到了Header和Footer组件，还有Login，Register这两个组件只用到了Header组件。</p><p>故路由组件中先创建了四个，今天做了Home组件的拆分，在拆分Home之前先将四个路由组件的跳转配置了一下。</p><h5 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h5><p>这里使用的是vue-router来进行路由管理，下面是配置中的routes项，这里配置的即是网站上的路由，首页上暂时配置了四个，即首页home，搜索search，登录login，注册register，在这四个下面配置了一个重定向，就是在刚进入是默认展示首页home。可以看到meta路由元信息中配置了一个属性，这个属性是决定Footer组件·是否展示的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/home&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line">            <span class="attr">meta</span>:&#123;<span class="attr">show</span>:<span class="literal">true</span>&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;search&#x27;</span>,</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/search/&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Search</span>,</span><br><span class="line">            <span class="attr">meta</span>:&#123;<span class="attr">show</span>:<span class="literal">true</span>&#125;,</span><br><span class="line">            <span class="comment">// 布尔值,只能传递params</span></span><br><span class="line">            <span class="comment">// props:true</span></span><br><span class="line">            <span class="comment">// 对象：额外的给路由传递props参数</span></span><br><span class="line">            <span class="comment">// props:&#123;a:1,b:2&#125;</span></span><br><span class="line">            <span class="comment">// 函数写法：可以params,query，传递给props</span></span><br><span class="line">            <span class="comment">// props($route)&#123;</span></span><br><span class="line">            <span class="comment">//     return &#123;keyword:$route.params.keyword, k:$route.query.k&#125;</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/login&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Login</span>,</span><br><span class="line">            <span class="attr">meta</span>:&#123;<span class="attr">show</span>:<span class="literal">false</span>&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/register&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Register</span>,</span><br><span class="line">            <span class="attr">meta</span>:&#123;<span class="attr">show</span>:<span class="literal">false</span>&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 重定向，在项目跑起来的时候，访问/,立马定向到首页</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">            <span class="attr">redirect</span>:<span class="string">&#x27;/home&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><p>路由配置完之后需要将原先的a标签跳转修改为router-link来完成声明式路由导航的功能，由于搜索是通过按钮来进行跳转的，只能使用函数式路由导航。</p><h6 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h6><p>在路由跳转时就引出了路由传参，路由传参可以通过query和params，还有一个是上面代码配置中注释的一部分，传递props参数，有三种方法来传递</p><ul><li>布尔值，只能传递params参数，将params传递的参数通过props形式传递给组件，组件中要用props接收</li><li>对象，额外给组件传递固定的值到props</li><li>函数写法，可以传递query和params，函数接收一个$route，然后可以通过$route.query或者$route.params取到参数，在返回一个对象传递到props中</li></ul><p><font color="red">注意：</font> 如果传递params参数在代码中调用时用到对象形式时要用name属性，所以在这里配置时一般会给配置好name属性。</p><h5 id="Home组件内容"><a href="#Home组件内容" class="headerlink" title="Home组件内容"></a>Home组件内容</h5><p>上面配置好可以使用了，接下来是home组件的内容拆分，很容易可以将组件拆分出来，这里有一个三级菜单，是不随着路由跳转的，也就是非路由组件，所以将三级菜单放到components中，其他的路由组件放到pages的Home目录下。</p><p><img src="https://s2.loli.net/2023/07/23/Wi1FzU3L9o2fQkK.png" alt="image-20230723211402268"></p><h5 id="axios二次封装"><a href="#axios二次封装" class="headerlink" title="axios二次封装"></a>axios二次封装</h5><p>要用到axios发送请求，获取数据，这里将axios进行二次封装，方便开发，首先是安装axios，直接<code>npm i axios</code>就可，创建api目录来将项目中需要用到的与后端联系的api进行统一管理，方便后期修改。</p><p>requests中用axios的create方法创建实例，并创建了两个拦截器，可以在拦截器中写一些逻辑，这里给项目添加了进度条的效果，用到了nprogress库。</p><p>requests.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对于axios进行二次封装</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="comment">// 引入进度条</span></span><br><span class="line"><span class="keyword">import</span> nprogress <span class="keyword">from</span> <span class="string">&quot;nprogress&quot;</span>;</span><br><span class="line"><span class="comment">// 引入进度条样式</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;nprogress/nprogress.css&#x27;</span>;</span><br><span class="line"><span class="comment">// start 进度条开始，done进度条结束</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1：利用axios对象的方法create，去创建一个axios实例</span></span><br><span class="line"><span class="keyword">const</span> requests = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="comment">// 配置对象</span></span><br><span class="line">    <span class="comment">// 基础路径</span></span><br><span class="line">    <span class="attr">baseURL</span>: <span class="string">&quot;/api&quot;</span>,</span><br><span class="line">    <span class="comment">// 请求超时的时间</span></span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">5000</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">requests.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// config：配置对象，对象里有一个属性很重要，header请求头</span></span><br><span class="line">    nprogress.<span class="title function_">start</span>();</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">requests.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 服务器成功回调</span></span><br><span class="line">    nprogress.<span class="title function_">done</span>();</span><br><span class="line">    <span class="keyword">return</span> res.<span class="property">data</span>;</span><br><span class="line">&#125;, <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 响应失败回调</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;faile&#x27;</span>));</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> requests;</span><br></pre></td></tr></table></figure><p>index文件将项目用到的api接口封装为函数，调用函数就可以拿到返回结果。</p><p>index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// API进行统一管理</span></span><br><span class="line"><span class="keyword">import</span> requests <span class="keyword">from</span> <span class="string">&quot;./requests&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 三级联动接口</span></span><br><span class="line"><span class="comment">// http://gmall-h5-api.atguigu.cn/api/product/getBaseCategoryList</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 发请求 返回结果为Promise对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">reqCategoryList</span> = (<span class="params"></span>) =&gt; <span class="title function_">requests</span>(&#123; <span class="attr">url</span>: <span class="string">&#x27;/product/getBaseCategoryList&#x27;</span>, <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span> &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="vuex配置"><a href="#vuex配置" class="headerlink" title="vuex配置"></a>vuex配置</h5><p>配置vuex集中管理状态，这里用到了模块化管理，将各组件的数据分模块储存，方便管理条理清晰。</p><p><img src="https://s2.loli.net/2023/07/23/OsgTRleGQMJaiHr.png" alt="image-20230723212511360"></p><p>store中有每个模块的仓库，每个模块中又都有独立的actions，mutations，state，这里需要注意模块化要在每个模块中打开namespaced命名空间，设定为true。</p><p>index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>);</span><br><span class="line"><span class="comment">// 引入小仓库</span></span><br><span class="line"><span class="keyword">import</span> home <span class="keyword">from</span> <span class="string">&#x27;./home&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> search <span class="keyword">from</span> <span class="string">&quot;./search&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    <span class="comment">// 实现vuex仓库模块化开发存储数据</span></span><br><span class="line">    <span class="attr">modules</span>:&#123;</span><br><span class="line">        home,</span><br><span class="line">        search</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="TypeNav数据获取"><a href="#TypeNav数据获取" class="headerlink" title="TypeNav数据获取"></a>TypeNav数据获取</h5><p>调用封装的api函数接口，拿到数据，这里将数据用vuex来管理储存，将后端返回的数据储存到vuex中，组件使用mapState将数据读取出来放到计算属性中。这里因为store是用模块化管理的，所以应该在mapState获取数据的参数加上第一个参数是模块的命名，或者直接使用回调函数，将state下的命名空间内的数据返回，除state之外，其他的actions，mutations，getters都要加上命名空间，而这些的命名空间与state不同，这些是在原先的命名前加上命名空间，例如原本是categoryList，添加命名空间之后为home&#x2F;categoryList。</p><h5 id="TypeNav数据动态展示"><a href="#TypeNav数据动态展示" class="headerlink" title="TypeNav数据动态展示"></a>TypeNav数据动态展示</h5><p>数据获取到之后就是展示数据了，菜单是一个三级菜单，也就是说获取到的数组也是三级的，通过v-for来进行循环，展示每一层的数据即可。</p><p>数据动态展示之后，有一个鼠标放上背景变色的特效这里用鼠标事件<code>@mouseenter</code>事件来触发，当鼠标放到h3上时将index记录下来，给父元素盒子添加一个动态class属性，当记录的currentIndex值与一级菜单的index相等时给盒子添加一个cur属性，而cur在style中写的即为将背景设置为高亮。这里需要在组件中创建一个data就是currentIndex来储存当前鼠标的index值。</p><p>鼠标进入高亮做完了，发现移出时会取消高亮，这里用到@mouseleave事件，鼠标移出时将高亮取消，也就是将组件数据中记录的currentIndex设置为-1，表示没有鼠标移入。细节就是当鼠标在全部商品分类的标题上时还是会有高亮效果，而此时鼠标已经不在一级标题上，这里实现用到了事件委派，将取消高亮的鼠标离开事件放在父元素身上，当鼠标离开父元素之后再将currentIndex值置为-1，这样就实现了高亮取消的效果。</p><h5 id="TypeNav点击导航路由传值"><a href="#TypeNav点击导航路由传值" class="headerlink" title="TypeNav点击导航路由传值"></a>TypeNav点击导航路由传值</h5><p>这里如果直接将三级导航的每一个a标签替换为router-link也可以实现效果，但是这里三级导航循环之后可能有很多的标签，所以用router-link会导致效率问题，这里只能用编程式导航并将触发回调放在父元素上，这样就只有一个事件渲染，可是还需要实现点击标签然后将name和id传入，通过event点击事件可以获得标签是什么，在a标签上添加data-categoryName属性，在函数中通过event.target.dataset可以获得标签中的data传值，这样就可以通过categoryname来确定是否是要跳转的a标签，在a标签中也传入不同级标题的id这样就可以拿到标题的id经过判断就可以进行向search路由跳转，同时携带query参数。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;vue实战项目1&quot;&gt;&lt;a href=&quot;#vue实战项目1&quot; class=&quot;headerlink&quot; title=&quot;vue实战项目1&quot;&gt;&lt;/a&gt;vue实战项目1&lt;/h3&gt;&lt;p&gt;vue实战项目学习第一天，尚硅谷实战课程尚品汇项目。&lt;/p&gt;
&lt;p&gt;项目开始，主要做的是配置环境和开始开发。今天配置了项目的脚手架，代理（跨域问题），vuex，vue-router，axios二次封装，nprogress进度条的安装，防抖和节流（Lodash.js）&lt;/p&gt;
&lt;p&gt;以下是个人理解，如有错误请指正。&lt;/p&gt;</summary>
    
    
    
    <category term="工程" scheme="https://weienhua.github.io/categories/%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="前端" scheme="https://weienhua.github.io/categories/%E5%B7%A5%E7%A8%8B/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="vue" scheme="https://weienhua.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue-router安装配置和使用</title>
    <link href="https://weienhua.github.io/2023/07/20/vue-router%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>https://weienhua.github.io/2023/07/20/vue-router%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BD%BF%E7%94%A8/</id>
    <published>2023-07-20T09:55:19.000Z</published>
    <updated>2023-07-21T01:34:15.849Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vue-router安装配置和使用"><a href="#vue-router安装配置和使用" class="headerlink" title="vue-router安装配置和使用"></a>vue-router安装配置和使用</h3><p>学习vue的第六天，学到了用插件vue-router来实现vue单页面应用的开发，实现页面的路由跳转。</p><p>以下是个人理解，如有错误请指正。</p><span id="more"></span><p>vue-router是vue官方的一个路由管理插件，用于实现页面上的路由跳转，可以很方便的实现单页面应用的开发。</p><h4 id="vue-router安装和配置"><a href="#vue-router安装和配置" class="headerlink" title="vue-router安装和配置"></a>vue-router安装和配置</h4><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>直接使用npm命令安装就可以了，这里有一个点是如果使用的是vue2那么应该安装vue-router3版本，后面的vue-router4版本是为vue3准备的，如果强行安装的话会出现报错。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-router@<span class="number">3</span></span><br></pre></td></tr></table></figure><p>安装速度挺快的，那么既然说是vue的一个插件也就是说应该是跟vuex差不多，需要用vue.use将插件使用到vue上。</p><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>首先在src文件夹下面创建router文件夹，为了编写路由的配置，在router文件加下创建index.js文件，直接在index.js文件中编写即可。</p><p>首先将下载的vue-router引入，通过new方法创建一个VueRouter的对象，创建时传入的是一个对象参数，对象中是要用的配置信息，创建完毕之后将实例export暴露出即可。</p><ul><li>mode：这个参数配置是设置路由使用hash模式还是history模式。<ul><li>hash模式：在url路径中会出现一个&#x2F;#&#x2F;这样的符号，前端的路由跳转都写在了这个符号后面，像后端请求的时候不会将&#x2F;#&#x2F;后面的内容发出去。最直接的就是当看到页面的某个地方时点击了浏览器的刷新，hash模式会成功刷新并展示页面，而history模式会出现url请求错误。</li><li>history模式：url直接展示，当向后端发送请求时会将全部的url发送。解决方法，需要后端协助解决，判断请求的url是否属于前端。</li></ul></li><li>routes：这个就是最主要的配置，也就是配置页面上路由跳转的配置项。<ul><li>routes的value是一个数组，数组中是每一个路由规则的对象。</li><li>对象中可以配置的选项：<ul><li>path：写的是跳转的路由，也就是在url中拼接的部分</li><li>component：当跳转这个路由时会展示的组件，填写的是组件的name</li><li>name：这个是给路由命名，在router-link标签中的to属性中可以通过name来寻找到这个特定的路由。</li><li>children：子路由，该路由下的一些子路由，在url上的体现就是在该路由的path下再拼接一个path，这里要注意的是，只有一级路由的path要加<code>/</code>，子路由中的path项都不需要加<code>/</code>。</li></ul></li></ul></li></ul><p>router&#x2F;index.js文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 该文件专门用于创建整个应用的路由器</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&quot;../pages/About&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&quot;../pages/Home&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">News</span> <span class="keyword">from</span> <span class="string">&quot;../pages/News&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个路由器</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&quot;hash&quot;</span>,</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;about&#x27;</span>,</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line">            <span class="attr">children</span>:[</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">name</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>:<span class="title class_">News</span>,</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p>创建完router文件夹并编写完配置文件之后，需要在main.js中将router插件加载到vue上。这里有一个点是router在Vue创建时传入对象中时只能用router来命名，是官方固定的，如果写其他命名就会无效。</p><p>main.js文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="comment">// 引入router</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="comment">// 关闭生产提示</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    router,</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>配置完启动项目，在浏览器进去8080后url会自动加上一个&#x2F;#&#x2F;符号，就说明路由已经配置完成。</p><p><img src="https://s2.loli.net/2023/07/20/RZPsjB12XqDb5FJ.png" alt="image-20230720195604228"></p><h4 id="vue-router使用"><a href="#vue-router使用" class="headerlink" title="vue-router使用"></a>vue-router使用</h4><p>使用vue-router首先应该是将组件的路由转发规则配置好，也就是在router文件下的index.js文件中，在routes的配置数组中写的每一个对象就是每一条路由规则，如上面示例的index.js文件中，创建了两个一级路由，一个二级路由。</p><p>下方是App.vue中将配置的路由应用到组件中，使用的是<code>router-link</code>标签，标签中有一个to属性，填的就是路由文件中配置的path，也可以写成<code>:to</code>属性，然后传入对象，对象中可以传路由中的name值找到相应的路由。这里router-link应该和router-view一起用，前者是跳转路由，后者是路由指向的组件展示的地方，有点类似与插槽。</p><p>App.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;router-link to=&quot;/about&quot; &gt;About&lt;/router-link&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">    &lt;router-link to=&quot;/home&quot; &gt;Home&lt;/router-link&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import About from &#x27;./pages/About&#x27;;</span><br><span class="line">    import Home from &#x27;./pages/Home&#x27;;</span><br><span class="line"></span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;App&quot;,</span><br><span class="line">        components:&#123;</span><br><span class="line">          About,</span><br><span class="line">          Home</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><p>keep-alive标签</p><ul><li><p>组件间通过路由切换之后会自动销毁，考虑到有些组件可能会频繁的切换所以可以通过一个标签将标签包裹之后可以实现组件切换之后不被销毁，下次激活时仍然可以使用同时不需要再次挂载。</p></li><li><p>include属性：属性可以传递一个字符串，就是表明当跳转后该组件不会被销毁，也可以传递一个数组，表示数组中的组件都不会销毁，当然如果不传递参数，或者说不指定include那么就是所有的组件都不会销毁。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive include=<span class="string">&quot;News&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line">&lt;/keep-alive&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">:include</span>=<span class="string">&quot;[&#x27;News&#x27;, &#x27;Messages&#x27;]&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>router-view标签</p><ul><li>展示router-link路由链接的组件的位置，类似于插槽，提前占位。</li></ul></li><li><p>router-link标签：</p><ul><li><p>replace属性，布尔类型：</p><ul><li><p>默认为false，设置replace属性之后会默认调用router.replace()方法而不是router.push()，不会留下history历史记录。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:to=<span class="string">&quot;&#123;</span></span><br><span class="line"><span class="string">    path:&#x27;/home&#x27;,</span></span><br><span class="line"><span class="string">    replace,</span></span><br><span class="line"><span class="string">&#125;&quot;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>active-class属性，string类型：</p><ul><li><p>设置当链接激活时要添加到标签上的css类名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">:to=<span class="string">&quot;&#123;</span></span><br><span class="line"><span class="string">    path:&#x27;/home&#x27;,</span></span><br><span class="line"><span class="string">    replace,</span></span><br><span class="line"><span class="string">    active-class=&#x27;active&#x27;,</span></span><br><span class="line"><span class="string">&#125;&quot;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>to属性（string类型）指定点击之后要跳转的路由</p><ul><li><p>简单的路由跳转，不传参</p><ul><li><p>字符串写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">to=<span class="string">&quot;/home&quot;</span></span><br><span class="line">to=<span class="string">&quot;/home/news&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>对象写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传path</span></span><br><span class="line">:to=<span class="string">&quot;&#123;</span></span><br><span class="line"><span class="string">    path:&#x27;/home&#x27;,</span></span><br><span class="line"><span class="string">&#125;&quot;</span></span><br><span class="line"><span class="comment">// 传name</span></span><br><span class="line">:to=<span class="string">&quot;&#123;</span></span><br><span class="line"><span class="string">    name:&#x27;home&#x27;,</span></span><br><span class="line"><span class="string">&#125;&quot;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>传递query参数，在组件中可以通过<code>this.$route.query</code>拿到数据</p><ul><li><p>字符串写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:to=<span class="string">&quot;`/home/messages/detail?id=$&#123;m.id&#125;&amp;title=$&#123;m.title&#125;`&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>对象写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 也可以通过name来寻找路由替换path。</span></span><br><span class="line">:to=<span class="string">&quot;&#123;</span></span><br><span class="line"><span class="string">    path:&#x27;/home/messages/detail&#x27;,</span></span><br><span class="line"><span class="string">    query:&#123;</span></span><br><span class="line"><span class="string">        id: m.id,</span></span><br><span class="line"><span class="string">        title: m.title</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;&quot;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>传递params参数，在组件中可以通过<code>this.$route.params</code>拿到数据</p><ul><li><p>字符串写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:to=<span class="string">&quot;`/home/messages/detail/$&#123;m.id&#125;/$&#123;m.title&#125;`&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>对象写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传递params参数必须用name属性</span></span><br><span class="line">:to=<span class="string">&quot;&#123;</span></span><br><span class="line"><span class="string">    name:&#x27;detail&#x27;,</span></span><br><span class="line"><span class="string">    params:&#123;</span></span><br><span class="line"><span class="string">        id: m.id,</span></span><br><span class="line"><span class="string">        title: m.title</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;&quot;</span></span><br><span class="line"><span class="comment">// router中的配置需要将path修改，添加占位符</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;detail/:id/:title&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">Detail</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li><li><p>router&#x2F;index.js配置</p><ul><li><p>通过配置项将参数以props形式传递，在组件中只需要通过props方式接收传递的参数即可，与组件间props传参接收一样。</p><ul><li><p>第一种，props值为对象，该对象中的key-value最终都会以props形式传到Detail组件中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">Detail</span>,</span><br><span class="line">        </span><br><span class="line">    <span class="attr">props</span>:&#123;<span class="attr">id</span>:<span class="string">&#x27;666&#x27;</span>, <span class="attr">title</span>:<span class="string">&#x27;888&#x27;</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>第二种，props值为布尔值，如果为真，会将收到的params参数以props形式传到Detail组件中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">    <span class="comment">//params传参需要配置path占位</span></span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;detail/:id/:title&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">Detail</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">props</span>:<span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>第三种，props为函数，函数有一个接收参数就是<code>$route</code>，该函数返回值对象中每一组key-value都会以props形式传到Detail组件中，这里可以用query传参，也可以用params传参（注意params传参要修改path占位），最后props会将数据处理传递到组件的props属性中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">Detail</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">props</span>(<span class="params">$route</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="attr">id</span>:$route.<span class="property">query</span>.<span class="property">id</span>,<span class="attr">title</span>:$route.<span class="property">query</span>.<span class="property">title</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>编程式路由导航</p><ul><li><p>由于在程序编写中触发路由跳转的位置不一定每次都可以写<code>route-link</code>标签，可能也是个按钮点击之后跳转路由，下面的编程式路由导航就是方便自定义编写。</p></li><li><p>这里用到两个router上的函数触发跳转，以按钮点击跳转为例</p><ul><li><p>push，即保存浏览器history历史记录，点击触发回调函数，函数中可以通过this找到<code>$router</code>中有一个push方法，这个方法就是触发路由跳转，传入参数为一个对象，可以理解为与router-link中的to传入对象一致。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">pushShow</span>(<span class="params">m</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">      <span class="attr">name</span>:<span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">      <span class="attr">query</span>:&#123;</span><br><span class="line">        <span class="attr">id</span>: m.<span class="property">id</span>,</span><br><span class="line">        <span class="attr">title</span>: m.<span class="property">title</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>replace，即不保存浏览器history历史记录，点击出发回调函数，函数中可以通过this找到<code>$router</code>中有一个raplace方法，这个方法就是触发路由跳转，传入参数为一个对象，可以理解为与router-link中的to传入对象一致。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">replaceShow</span>(<span class="params">m</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(&#123;</span><br><span class="line">      <span class="attr">name</span>:<span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">      <span class="attr">query</span>:&#123;</span><br><span class="line">        <span class="attr">id</span>: m.<span class="property">id</span>,</span><br><span class="line">        <span class="attr">title</span>: m.<span class="property">title</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>两个生命周期钩子</p><ul><li>当组件通过路由跳转后，原先展示的组件就会自动销毁，所以上方提到了keep-alive标签，可以保证组件在路由跳转之后不被销毁，这样就可能会出现一些问题，当组件中创建了计时器，调用生命周期钩子<code>beforeDestroy</code>时将计时器销毁，可是当在keep-alive中组件不会销毁，这时销毁的生命周期构子就不会被调用，可是计时器应该在组件不展示时取消掉，否则在后台会一直占用资源，这里就引出了下面的两个生命周期钩子用来解决这个问题。<ul><li><code>activated()</code>这个会在组件激活时调用也就是组件从消失状态—&gt;用户眼前时。</li><li><code>deactivated()</code>这个会在组件失火时调用也就是组件从用户眼前—&gt;消失状态时。</li></ul></li></ul></li><li><p>路由守卫</p><ul><li><p>全局路由守卫</p><p>全局路由守卫有两个，当路由跳转时会自动触发。</p><ul><li><p>全局前置路由守卫：在路由跳转之前调用，如果回调函数中自己写的校验逻辑未通过则可以不调用next函数向下跳转，即不允许跳转。</p></li><li><p>接收为一个回调函数，回调函数中接收三个参数，to：要跳转向哪个路由，from：从哪个路由跳转来，next：一个函数，当调用next时路由会正常像下一步跳转，这里可以做一些路由检测工作，如果检测未通过就不调用next，不允许跳转。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;beforeEach&quot;</span>);</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>全局后置路由守卫：在路由跳转之后调用，也就是此时已经跳转完毕，组件也已经展示了，这时可以做一些跳转之后的逻辑，比如页签图标什么的。</p></li><li><p>接收为一个回调函数，回调函数中接收两个参数，to：要跳转向哪个路由，from：从哪个路由跳转来，没有next函数了，因为路由已经跳转完毕。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;afterEach&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>独享路由守卫</p><ul><li><p>只有一个，在routes配置中编写，独享路由守卫也是在路由跳转之前调用，不过是在全局前置路由守卫之后调用，作用可以和全局前置路由守卫一样，不过独享路由守卫只有配置过的路由在跳转的时候才会调用。</p></li><li><p>接收为一个回调函数，回调函数中接收三个参数，to：要跳转向哪个路由，from：从哪个路由跳转来，next：一个函数，当调用next时路由会正常像下一步跳转，这里可以做一些路由检测工作，如果检测未通过就不调用next，不允许跳转。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">beforeEnter</span>:<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;beforeEnter&quot;</span>);</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>组件内路由守卫：组件内路由守卫写在组件中。</p><ul><li><p>组件进入前守卫：当点击路由跳转时会调用该守卫，如果前面的守卫都有写的话，调用顺序是在独享路由守卫之后。</p></li><li><p>接收为一个回调函数，回调函数中接收三个参数，to：要跳转向哪个路由，from：从哪个路由跳转来，next：一个函数，当调用next时路由会正常像下一步跳转，这里可以做一些路由检测工作，如果检测未通过就不调用next，不允许跳转。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">beforeRouteEnter</span>(<span class="params">to, <span class="keyword">from</span>, next</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;beforeRouteEnter&quot;</span>);</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>组件离开前守卫：该守卫与其他守卫不太一样，该守卫的调用时机是：当前组件在展示，点击路由要跳转其他组件离开时会调用该组件，该组件也可以阻止跳转，因为接收了next参数。</p></li><li><p>接收为一个回调函数，回调函数中接收三个参数，to：要跳转向哪个路由，from：从哪个路由跳转来，next：一个函数，当调用next时路由会正常像下一步跳转。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">beforeRouteLeave</span>(<span class="params">to, <span class="keyword">from</span>, next</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;beforeRouteLeave&quot;</span>);</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>当五个路由守卫都写的时候调用顺序如下：</p><p><img src="https://s2.loli.net/2023/07/21/QtIVH91Ac3MCnwi.png" alt="image-20230721091557845"></p><p>两个全局守卫会在每次路由跳转时都会调用。</p></li></ul></li><li><p>路由元信息<code>$route.meta</code></p><ul><li><p>可以在定义路由时在对象中增加meta参数，参数传递为一个对象，对象中可以是一些认证信息等 ，当用户点击跳转路由时可以在守卫中取出meta中的信息与用户localstorage中的信息对比，如果认证通过则可以完成路由跳转。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">News</span>,</span><br><span class="line">    <span class="attr">meta</span>:&#123;<span class="attr">token</span>:<span class="string">&#x27;11111&#x27;</span>&#125;,</span><br><span class="line">    <span class="comment">// 独享路由守卫，在全局前置后，全局后置前调用</span></span><br><span class="line">    <span class="attr">beforeEnter</span>:<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;beforeEnter&quot;</span>);</span><br><span class="line">        <span class="title function_">next</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;vue-router安装配置和使用&quot;&gt;&lt;a href=&quot;#vue-router安装配置和使用&quot; class=&quot;headerlink&quot; title=&quot;vue-router安装配置和使用&quot;&gt;&lt;/a&gt;vue-router安装配置和使用&lt;/h3&gt;&lt;p&gt;学习vue的第六天，学到了用插件vue-router来实现vue单页面应用的开发，实现页面的路由跳转。&lt;/p&gt;
&lt;p&gt;以下是个人理解，如有错误请指正。&lt;/p&gt;</summary>
    
    
    
    <category term="工程" scheme="https://weienhua.github.io/categories/%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="前端" scheme="https://weienhua.github.io/categories/%E5%B7%A5%E7%A8%8B/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="vue" scheme="https://weienhua.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>使用vuex实现任意组件间通信</title>
    <link href="https://weienhua.github.io/2023/07/19/%E4%BD%BF%E7%94%A8vuex%E5%AE%9E%E7%8E%B0%E4%BB%BB%E6%84%8F%E7%BB%84%E4%BB%B6%E9%97%B4%E9%80%9A%E4%BF%A1/"/>
    <id>https://weienhua.github.io/2023/07/19/%E4%BD%BF%E7%94%A8vuex%E5%AE%9E%E7%8E%B0%E4%BB%BB%E6%84%8F%E7%BB%84%E4%BB%B6%E9%97%B4%E9%80%9A%E4%BF%A1/</id>
    <published>2023-07-19T07:51:54.000Z</published>
    <updated>2023-07-19T09:04:00.728Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用vuex实现任意组件间通信"><a href="#使用vuex实现任意组件间通信" class="headerlink" title="使用vuex实现任意组件间通信"></a>使用vuex实现任意组件间通信</h3><p>学习vue的第五天，学到了用插件vuex来实现vue任意组件之间的通信。</p><p>以下是个人理解，如有错误请指正。</p><span id="more"></span><h4 id="vuex描述"><a href="#vuex描述" class="headerlink" title="vuex描述"></a>vuex描述</h4><p>Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式 + 库</strong>。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p><p>vuex实现了共享数据的功能，当一个组件想要获取数据时直接向vuex发送请求即可，当一个组件想修改vuex中的数据时可以通过显式调用dispatch和commit来对vuex管理的状态进行修改。</p><p><img src="https://s2.loli.net/2023/07/19/Nj1wcCeq2VDKmT4.png" alt="image-20230719155810712"></p><p>这个图片vuex官网贴的一张vuex内部逻辑图片，左边绿色的是组件</p><ul><li>当一个组件想要修改vuex管理的数据（state）时，可以 通过调用dispatch方法，需要传递两个参数，第一个是string类型的传入的是Actions中的方法名，第二个是要向方法中传递的参数value。</li><li>当Actions接收到一个dispatch时，会向自身去寻找是否有第一个参数的方法名，如果没有就提示错误，找到之后就将第二个参数传入该方法。在Actions中的方法一般有两个参数，第一个是context也就是将vuex本身的一些方法包括（commit、state、dispatch······）这些传给方法，方便在逻辑处理之后进行下一步操作，第二个参数就是value，也就是用户传入的数据，如果是单数据就可以直接用，多数据的话可以传对象。</li><li>在Actions中处理逻辑之后一方面可以再次调用dispatch进行下一个阶段的逻辑处理，另一个是直接调用commit将操作发送到Mutations中。当然组件也可以直接通过commit方法向Mutations传。这里有两个参数，第一个是Mutations中的方法名（string），第二个是要操作的数据。</li><li>Mutations中的方法在检测到有调用时会收到两个参数，第一个是state，也就是vuex储存的数据，第二个是组件要传入的数据。这时就可以进行操作将state中的数据进行更新。</li><li>当state中的数据更新后，用到数据的组件也会进行重新的渲染。</li></ul><p>由于整个流程中只有Mutations中的方法在真正的操作state中的数据，所以vue开发者工具的监测只针对Mutations。在Actions中可以进行一些复杂的逻辑操作，也可以向其他的服务器发送信息等来验证自己的数据是否合理。</p><h4 id="vuex安装配置"><a href="#vuex安装配置" class="headerlink" title="vuex安装配置"></a>vuex安装配置</h4><p>上面整理完vuex的工作流程，这里是vuex的安装。</p><p>通过<code>npm install vuex@3</code>进行安装即可，这里有一个点是如果使用的是vue2.0的版本，那么vuex就应该下载3.0版本，因为vuex的4.0版本是为vue3.0服务的，所以在npm安装的时候要注意一下选择版本号。</p><p>安装完成之后就可以开始配置了。</p><p>因为vuex是一个全局的状态管理，有点类似全局事件总线，所以应该将vuex安装在vue实例对象身上，这样任意组件都可以访问到vuex。vuex在vue的配置中叫<code>store</code>，在创建vue实例的时候将其配置到对象中即可。</p><p><img src="https://s2.loli.net/2023/07/19/cG4rHRvmJ5uLzfg.png" alt="image-20230719162032157"></p><p>可以看到这里有一个store是通过外部引入的，这个就是vuex的配置文件，在src下创建一个<code>store</code>文件夹，文件夹里创建一个<code>index.js</code>文件用来写vuex的配置。</p><p>插件的安装需要用到Vue.use()，方法，所以在这个文件中也要引入vue。引入vuex之后，可以开始配置了。</p><p>上面图中看到vuex的store中有三个主要的内容也可以说是配置对象，就是actions、mutations、state，在文件中创建三个对象</p><ul><li>actions中要写的是用于响应组件中的动作回调函数，组件通过dispatch方法调用actions中的方法，回调函数接收到的参数有两个（context, value），可以完成一些逻辑，然后将操作传向mutations。</li><li>mutations中写的是操作state的函数，会被actions和组件通过commit调用，回调函数接收到的参数有两个（state, value）。</li><li>state中写的就是储存的数据。</li><li>下面代码也提到了getters配置项，它就像组件中的computed计算属性，将一些计算后的数据返回，组件可以通过getters点得到想要的内容。</li></ul><p>写完配置项之后就可以创建store也就vuex实例了，调用Vuex的Store方法，传入前面写好的四个配置项，然后将new出来的store默认暴露即可，之后在main.js中配置到Vue实例对象上，就可以发现实例对象身上出现了一个<code>$store</code>的值，打开之后就是vuex的方法和state数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store/index.js内容</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 引入vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">// 使用vuex插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 准备actions----用于响应组件中的动作</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="title function_">incrementOdd</span>(<span class="params">context, value</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(context.<span class="property">state</span>.<span class="property">sum</span> % <span class="number">2</span>) &#123;</span><br><span class="line">            context.<span class="title function_">commit</span>(<span class="string">&#x27;INCREMENT&#x27;</span>, value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">incrementWait</span>(<span class="params">context, value</span>)&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            context.<span class="title function_">commit</span>(<span class="string">&#x27;INCREMENT&#x27;</span>, value)</span><br><span class="line">        &#125;, <span class="number">500</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">addWangStudent</span>(<span class="params">context, value</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(value.<span class="property">name</span>[<span class="number">0</span>]!==<span class="string">&#x27;王&#x27;</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;请添加姓王的同学&#x27;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            context.<span class="title function_">commit</span>(<span class="string">&#x27;ADDSTUDENT&#x27;</span>, value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 准备mutations----用于操作数据（state）</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="title function_">INCREMENT</span>(<span class="params">state, value</span>)&#123;</span><br><span class="line">        state.<span class="property">sum</span> += value</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">DECREMENT</span>(<span class="params">state, value</span>)&#123;</span><br><span class="line">        state.<span class="property">sum</span> -= value</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">ADDSTUDENT</span>(<span class="params">state, value</span>) &#123;</span><br><span class="line">        state.<span class="property">students</span>.<span class="title function_">unshift</span>(value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 准备state----用于储存数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">    <span class="attr">sum</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="attr">students</span>:[</span><br><span class="line">        &#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>, <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>&#125;</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 准备getters----用于将state中的数据进行加工</span></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">    <span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    actions,</span><br><span class="line">    mutations,</span><br><span class="line">    state,</span><br><span class="line">    getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="vuex使用"><a href="#vuex使用" class="headerlink" title="vuex使用"></a>vuex使用</h4><h5 id="单模块"><a href="#单模块" class="headerlink" title="单模块"></a>单模块</h5><p>配置完之后就可以使用了，在组件中通过<code>$store</code>拿到vuex的数据。</p><ul><li><p>拿到state数据中的sum数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">sum</span></span><br></pre></td></tr></table></figure></li><li><p>拿到getters中的数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>.<span class="property">bigSum</span></span><br></pre></td></tr></table></figure></li><li><p>向actions发送</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;incrementOdd&#x27;</span>, <span class="variable language_">this</span>.<span class="property">n</span>)</span><br></pre></td></tr></table></figure></li><li><p>向mutations发送</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;DECREMENT&#x27;</span>,<span class="variable language_">this</span>.<span class="property">n</span>)</span><br></pre></td></tr></table></figure></li></ul><p>上面是最基本的拿到store中的数据。</p><p>下面是去拿这些数据的简写方法也就是vuex的一些封装好的方法</p><ul><li><p>导入方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mapState, mapGetters, mapMutations, mapActions&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>拿state和getters数据（将数据通过计算属性拿到之后就可以在模板中直接调用），这里mapState和mapGetters拿到的数据是函数对象，通过…将对象展开到计算属性中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">// 借助mapState生成计算属性，从state中读取数据。（对象写法）</span></span><br><span class="line">    <span class="comment">// ...mapState(&#123;sum:&#x27;sum&#x27;&#125;)</span></span><br><span class="line">    <span class="comment">// 借助mapState生成计算属性，从state中读取数据。（数组写法）</span></span><br><span class="line">    ...<span class="title function_">mapState</span>([<span class="string">&#x27;sum&#x27;</span>]),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 借助mapGetters生成计算属性，从getters中读取数据。（对象写法）</span></span><br><span class="line">    <span class="comment">// ...mapGetters(&#123;bigSum:&#x27;bigSum&#x27;&#125;)</span></span><br><span class="line">    <span class="comment">// 借助mapGetters生成计算属性，从getters中读取数据。（数组写法）</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>([<span class="string">&#x27;bigSum&#x27;</span>])</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>通过mapMutations和mapActions生成调用函数，这里生成的函数可以有传参，不过需要在标签调用时直接传入，否则会将事件event传入。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="comment">// 自己写的方法调用commit</span></span><br><span class="line">    <span class="comment">// increment()&#123;</span></span><br><span class="line">    <span class="comment">//     this.$store.commit(&#x27;INCREMENT&#x27;,this.n)</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="comment">// decrement()&#123;</span></span><br><span class="line">    <span class="comment">//     this.$store.commit(&#x27;DECREMENT&#x27;,this.n)</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 借助mapMutations生成对应的方法，方法会调用commit方法联系mutations（对象写法）</span></span><br><span class="line">    <span class="comment">// 需要调用时传参value，否则传参为event</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>(&#123;<span class="attr">increment</span>:<span class="string">&#x27;INCREMENT&#x27;</span>, <span class="attr">decrement</span>:<span class="string">&#x27;DECREMENT&#x27;</span>&#125;),</span><br><span class="line">    <span class="comment">// 借助mapMutations生成对应的方法，方法会调用commit方法联系mutations（数组写法）</span></span><br><span class="line">    <span class="comment">// ...mapMutations([&#x27;INCREMENT&#x27;,&#x27;DECREMENT&#x27;])</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自己写的方法调用dispatch</span></span><br><span class="line">    <span class="comment">// incrementOdd()&#123;</span></span><br><span class="line">    <span class="comment">//     this.$store.dispatch(&#x27;incrementOdd&#x27;, this.n)</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="comment">// incrementWait()&#123;</span></span><br><span class="line">    <span class="comment">//     this.$store.dispatch(&#x27;incrementWait&#x27;, this.n)</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="comment">// 借助mapActions生成对应的方法，方法会调用dispatch方法联系actions（对象写法）</span></span><br><span class="line">    <span class="comment">// 需要调用时传参value，否则传参为event</span></span><br><span class="line">    <span class="comment">// ...mapActions(&#123;incrementOdd:&#x27;incrementOdd&#x27;, incrementWait:&#x27;incrementWait&#x27;&#125;),</span></span><br><span class="line">    <span class="comment">// 借助mapActions生成对应的方法，方法会调用dispatch方法联系actions（数组写法）</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>([<span class="string">&#x27;incrementOdd&#x27;</span>,<span class="string">&#x27;incrementWait&#x27;</span>])</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ul><h5 id="多模块"><a href="#多模块" class="headerlink" title="多模块"></a>多模块</h5><p>上面的store配置是单模块的，如果多人开发，就会出现冲突问题，下面通过命名空间多模块，来解决。</p><p>index.js中</p><ul><li>将两个组件的数据分别配置在两个对象中，打开namespaced配置为true，在下面new store时传入模块。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 引入vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">// 使用vuex插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> countOptions = &#123;</span><br><span class="line">    <span class="attr">namespaced</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">actions</span>:&#123;</span><br><span class="line">        <span class="title function_">incrementOdd</span>(<span class="params">context, value</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(context.<span class="property">state</span>.<span class="property">sum</span> % <span class="number">2</span>) &#123;</span><br><span class="line">                context.<span class="title function_">commit</span>(<span class="string">&#x27;INCREMENT&#x27;</span>, value)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">incrementWait</span>(<span class="params">context, value</span>)&#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                context.<span class="title function_">commit</span>(<span class="string">&#x27;INCREMENT&#x27;</span>, value)</span><br><span class="line">            &#125;, <span class="number">500</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>:&#123;</span><br><span class="line">        <span class="title function_">INCREMENT</span>(<span class="params">state, value</span>)&#123;</span><br><span class="line">            state.<span class="property">sum</span> += value</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">DECREMENT</span>(<span class="params">state, value</span>)&#123;</span><br><span class="line">            state.<span class="property">sum</span> -= value</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">state</span>:&#123;</span><br><span class="line">        <span class="attr">sum</span>:<span class="number">0</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>:&#123;</span><br><span class="line">        <span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> studentOptions = &#123;</span><br><span class="line">    <span class="attr">namespaced</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">actions</span>:&#123;</span><br><span class="line">        <span class="title function_">addWangStudent</span>(<span class="params">context, value</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(value.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;王&#x27;</span>)===<span class="number">0</span>)&#123;</span><br><span class="line">                context.<span class="title function_">commit</span>(<span class="string">&#x27;ADDSTUDENT&#x27;</span>, value)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&#x27;请添加姓王的同学&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>:&#123;</span><br><span class="line">        <span class="title function_">ADDSTUDENT</span>(<span class="params">state, value</span>) &#123;</span><br><span class="line">            state.<span class="property">students</span>.<span class="title function_">unshift</span>(value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">state</span>:&#123;</span><br><span class="line">        <span class="attr">students</span>:[</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>, <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>&#125;</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>:&#123;</span><br><span class="line">        <span class="title function_">firstStudentName</span>(<span class="params">state</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> state.<span class="property">students</span>[<span class="number">0</span>].<span class="property">name</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    <span class="attr">modules</span>: &#123;</span><br><span class="line">        countOptions,</span><br><span class="line">        studentOptions</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>组件中调用时</p><ul><li><p>简写方式，在mapState函数中传入第一个参数，也就是模块的命名名称。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...<span class="title function_">mapState</span>(<span class="string">&#x27;countOptions&#x27;</span>,[<span class="string">&#x27;sum&#x27;</span>]),</span><br><span class="line">...<span class="title function_">mapGetters</span>(<span class="string">&#x27;countOptions&#x27;</span>,[<span class="string">&#x27;bigSum&#x27;</span>]),</span><br><span class="line">...<span class="title function_">mapMutations</span>(<span class="string">&#x27;countOptions&#x27;</span>,&#123;<span class="attr">increment</span>:<span class="string">&#x27;INCREMENT&#x27;</span>, <span class="attr">decrement</span>:<span class="string">&#x27;DECREMENT&#x27;</span>&#125;),</span><br><span class="line">...<span class="title function_">mapActions</span>(<span class="string">&#x27;countOptions&#x27;</span>,[<span class="string">&#x27;incrementOdd&#x27;</span>,<span class="string">&#x27;incrementWait&#x27;</span>]),</span><br></pre></td></tr></table></figure></li><li><p>未简写方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取state中的数据时需要先获取命名对象，再获取想要的数据</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">countOptions</span>.<span class="property">sum</span></span><br><span class="line"><span class="comment">// 获取getters时需要在getters的对象名称前加上命名名称/</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>[<span class="string">&#x27;studentOptions/firstStudentName&#x27;</span>]</span><br><span class="line"><span class="comment">// 向actions和mutations传时需要修改传入的第一个参数，在方法名前加上命名名称/</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;studentOptions/ADDSTUDENT&#x27;</span>, studentObj)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;studentOptions/addWangStudent&#x27;</span>, studentObj)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;使用vuex实现任意组件间通信&quot;&gt;&lt;a href=&quot;#使用vuex实现任意组件间通信&quot; class=&quot;headerlink&quot; title=&quot;使用vuex实现任意组件间通信&quot;&gt;&lt;/a&gt;使用vuex实现任意组件间通信&lt;/h3&gt;&lt;p&gt;学习vue的第五天，学到了用插件vuex来实现vue任意组件之间的通信。&lt;/p&gt;
&lt;p&gt;以下是个人理解，如有错误请指正。&lt;/p&gt;</summary>
    
    
    
    <category term="工程" scheme="https://weienhua.github.io/categories/%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="前端" scheme="https://weienhua.github.io/categories/%E5%B7%A5%E7%A8%8B/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="vue" scheme="https://weienhua.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue组件之间的数据传递</title>
    <link href="https://weienhua.github.io/2023/07/18/vue%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%92/"/>
    <id>https://weienhua.github.io/2023/07/18/vue%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%92/</id>
    <published>2023-07-18T11:17:32.000Z</published>
    <updated>2023-07-18T13:03:56.820Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vue组件之间的数据传递"><a href="#vue组件之间的数据传递" class="headerlink" title="vue组件之间的数据传递"></a>vue组件之间的数据传递</h3><p>学习vue的第四天学到了组件之间的数据传递，具体有一下几种需求：</p><ul><li>父组件-&gt;子组件</li><li>子组件-&gt;父组件</li><li>兄弟组件之间、任意组件之间</li></ul><span id="more"></span><p>实现的方法有如下几种：</p><ul><li>props传值</li><li>自定义事件</li><li>事件总线</li><li>消息订阅与发布（pubsub-js）</li></ul><p>以下是个人理解，如有错误请指正。</p><h4 id="props传值"><a href="#props传值" class="headerlink" title="props传值"></a>props传值</h4><p>props传值只能实现父组件向子组件传值或者子组件向父组件传值，无法实现兄弟组件之间直接传值，不过这个也是可以实现的，只不过实现起来有点麻烦，需要将数据的状态提升到共同的父组件，再通过层层传递。</p><p>所以用到props时一般都是实现的父组件向子组件传值。</p><h5 id="父组件-gt-子组件"><a href="#父组件-gt-子组件" class="headerlink" title="父组件-&gt;子组件"></a>父组件-&gt;子组件</h5><p>在vue中父组件向子组件传值非常的方便，父组件只需要将要传递的数据写在组件上，子组件在props属性中接收即可拿到传递的数据，接收之后就可以在this对象中访问到，也就是说可以像访问data中的数据一样进行访问。</p><p>示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 父组件传值</span><br><span class="line">&lt;MyList :todos=&quot;todos&quot; /&gt;</span><br><span class="line"></span><br><span class="line">// 子组件接收，在</span><br><span class="line">export default &#123;</span><br><span class="line">    props:[&#x27;todos&#x27;],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="子组件-gt-父组件"><a href="#子组件-gt-父组件" class="headerlink" title="子组件-&gt;父组件"></a>子组件-&gt;父组件</h5><p>利用props最基本的方式，也就是父组件定义一个函数，将函数通过props的方式传递给子组件，这时子组件通过props就可以接收该函数，当子组件想给父组件传递数据的时候直接调用这个函数就可以通过函数参数将数据传递给父组件的函数中，这是父组件拿到了数据，就可以进行下一步的数据处理了。</p><p>示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">//父组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">    &lt;MyHeader :handleEnterTodo=&quot;handleEnterTodo&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import MyHeader from &#x27;./components/MyHeader&#x27;</span><br><span class="line"></span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;App&#x27;,</span><br><span class="line">        components:&#123;MyHeader&#125;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return&#123;</span><br><span class="line">                todos:[</span><br><span class="line">                    &#123;id:&#x27;1&#x27;, title:&#x27;抽烟&#x27;, done:false&#125;,</span><br><span class="line">                    &#123;id:&#x27;2&#x27;, title:&#x27;喝酒&#x27;, done:false&#125;,</span><br><span class="line">                    &#123;id:&#x27;3&#x27;, title:&#x27;烫头&#x27;, done:true&#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            //添加todo</span><br><span class="line">            handleEnterTodo(title)&#123;</span><br><span class="line">                let id = (this.todos.length + 1).toString()</span><br><span class="line">                let todoObj = &#123;id:id,title:title,done:false&#125;</span><br><span class="line">                this.todos.unshift(todoObj)</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">// 子组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; placeholder=&quot;请输入你的任务名称，按回车键确认&quot; v-model=&quot;title&quot; @keyup.enter=&quot;handleEnter&quot; &gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;MyHeader&#x27;,</span><br><span class="line">        props:[&#x27;handleEnterTodo&#x27;],</span><br><span class="line">        data()&#123;</span><br><span class="line">          return&#123;</span><br><span class="line">            title:&#x27;&#x27;,</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">          handleEnter()&#123;</span><br><span class="line">            if(this.title.trim() === &#x27;&#x27;)&#123;</span><br><span class="line">              alert(&quot;请输入任务&quot;)</span><br><span class="line">              return</span><br><span class="line">            &#125;</span><br><span class="line">            this.handleEnterTodo(this.title)</span><br><span class="line">            this.title = &#x27;&#x27;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>上面父组件向子组件传递了一个函数，这个函数接收一个title参数，然后将title包装成一个对象储存到todos中，子组件通过props接收到函数，当要添加一条信息的时候，将title作为参数传入到的父组件函数中，这时父组件就接收到该值，下面就可以完成添加的需求。</p><h4 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h4><p>自定义事件可以实现子组件向父组件传值。</p><h5 id="子组件-gt-父组件-1"><a href="#子组件-gt-父组件-1" class="headerlink" title="子组件-&gt;父组件"></a>子组件-&gt;父组件</h5><p>父组件调用子组件时通过定义一个事件传入子组件，事件不需要子组件去接收什么的，只需要子组件在想调用的时候通过<code>$emit()</code>去出发事件即可。这里涉及到父组件定义事件回调函数、将事件与组件绑定和事件与组件的解绑。</p><ul><li><p>定义回调函数</p><p>自定义一个事件需要创建一个回调函数，当然也可以直接写在绑定事件与组件时的参数中，这里以自定义回调函数为例。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//在methods中定义一个回调函数</span><br><span class="line">handleCheckAllTodo(done)&#123;</span><br><span class="line">    this.todos.forEach((todo)=&gt;&#123;</span><br><span class="line">        todo.done = done</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>绑定事件</p><p>当事件创建完成之后需要与组件绑定才可以获取到子组件触发事件。绑定事件有两种方式，这里以第一种为例，也就是直接在组件标签中去写。通过<code>v-on:handleCheckAllTodo=&quot;handleCheckAllTodo&quot;</code>的方式来绑定一个自定义事件（<code>v-on:</code>可以简写为<code>@</code>符号），引号中的内容为上一步创建的回调函数的名，等号前为自定义事件的名称，也就是在子组件中触发事件时的事件名称。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;MyFooter</span><br><span class="line">:todos=&quot;todos&quot;</span><br><span class="line">    @handleCheckAllTodo=&quot;handleCheckAllTodo&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure></li><li><p>触发事件</p><p>事件绑定在那个组件中就应该去那个组件中触发，这里到子组件中去触发组件，调用<code>this.$emit(&#39;handleCheckAllTodo&#39;, data)</code>方法来触发自定义组件，传入的第一个参数时自定义事件的名称，后面跟的参数为事件触发传的参数，也就是传入了父组件的回调函数的参数中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">handleCheckAll(e)&#123;</span><br><span class="line">    this.$emit(&#x27;handleCheckAllTodo&#x27;, e.target.checked)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ul><p>上面事件绑定提到还有第二种方法，也就是通过<code>$on()</code>方法来绑定事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 首先给要绑定事件的组件添加ref属性，为了下面绑定事件时选择组件</span><br><span class="line">&lt;MyHeader ref=&quot;myheader&quot; /&gt;</span><br><span class="line">// 自定义事件绑定一般都在组件挂载完毕之后添加</span><br><span class="line">// 通过this.$refs.myheader选中组件，再用$on()绑定事件</span><br><span class="line">// $on()传第一个参数是自定义事件的名称，第二个参数是回调函数</span><br><span class="line">// 也就是在回调函数这里可以直接传一个箭头函数</span><br><span class="line">mounted() &#123;</span><br><span class="line">    this.$refs.myheader.$on(&quot;handleEnterTodo&quot;, this.handleEnterTodo)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是第二种自定义事件的绑定方法，如果想要事件只调用一次就失效可以使用<code>$once()</code>传参和<code>$on()</code>一样。</p><ul><li><p>事件的解绑</p><p>当不在用到这个事件时，可以将事件与组件解绑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 第一种方法，单事件解绑</span><br><span class="line">this.$refs.myheader.$off(&#x27;handleEnterTodo&#x27;)</span><br><span class="line">// 第二种方法，多事件解绑</span><br><span class="line">this.$refs.myheader.$off([&#x27;handleEnterTodo2&#x27;,&#x27;&#x27;handleEnterTodo2&#x27;&#x27;])</span><br><span class="line">// 也可以不穿off里的参数，那就是把所有myheader组件的事件都解绑</span><br></pre></td></tr></table></figure></li></ul><p>由于事件是绑定在组件上为了子组件与父组件传值，那么当父组件销毁后，这里的自定义组件也就都自动销毁了。</p><h4 id="事件总线"><a href="#事件总线" class="headerlink" title="事件总线"></a>事件总线</h4><p>前面提到的props和自定义事件两个都只适用于父子组件之间传值，那如果我需要在兄弟之间或者爷孙组件之间传值呢？这里就引出了事件总线，与自定义事件的方法差不多，只不过是在vm创建的时候也就是<code>beforeCreate()</code>中给vue实例对象上添加一个“傀儡的组件”，这个“傀儡组件”需要有<code>$on(),$once(),$off()</code>这三个方法，来创建和销毁自定义事件，同时这个“傀儡组件”也可以被所有的组件访问到，那就是说所有组件都可以操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">    el: &quot;#app&quot;,</span><br><span class="line">    render: h =&gt; h(App),</span><br><span class="line">    beforeCreate() &#123;</span><br><span class="line">        // 安装全局事件总线</span><br><span class="line">        Vue.prototype.$bus = this</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>安装完全局事件总线之后就可以实现任意组件之间传递数据了。</p><ul><li><p>创建事件绑定</p><p>事件一般都在组件挂载完之后加也就是在<code>mounted()</code>生命周期中，这里<code>$bus</code>是在vm中安装事件总线时定义的一个名字。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">    this.$bus.$on(&#x27;handleDeleteTodo&#x27;, this.handleDeleteTodo)</span><br><span class="line">// 这里可以把回调参数写成箭头函数</span><br><span class="line">this.$bus.$on(&#x27;handleDeleteTodo2&#x27;, ()=&gt;&#123;&#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>触发事件</p><p>当A组件在事件总线上创建一个事件后，B组件就可以触发事件将数据传递给A组件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$bus.$emit(&#x27;handleCheckTodo&#x27;, id)</span><br></pre></td></tr></table></figure></li><li><p>销毁事件</p><p>由于事件现在都在事件总线上绑定了，一方面需要注意事件的名称不能重复，另一方面考虑到如果绑定事件过多可能会影响效率。所以当一个在销毁之前，应该将自己创建的事件给取消绑定，这里在生命周期钩子<code>beforeDestory()</code>中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">beforeDestroy() &#123;</span><br><span class="line">    this.$bus.$off(&#x27;handleCheckTodo&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>这样事件总线就实现了任意组件之间的通信。</p><h4 id="消息订阅与发布（pubsub-js）"><a href="#消息订阅与发布（pubsub-js）" class="headerlink" title="消息订阅与发布（pubsub-js）"></a>消息订阅与发布（pubsub-js）</h4><p>消息订阅与发布与事件总线差不多都是实现任意组件之间的通信，这里是通过第三方js库来实现的，npm安装<code>pubsub-js</code>库，这个库实现了消息订阅与发布的完整功能，只需要导入调用即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 导入直接通过import就可，导入之后得到一个对象</span><br><span class="line">import pubsub from &#x27;pubsub-js&#x27;</span><br><span class="line"></span><br><span class="line">// 创建消息订阅，调用subscribe方法</span><br><span class="line">// 有两个参数，第一个是消息名称，第二个回调函数，返回值为该消息订阅的id</span><br><span class="line">// 消息名称用来发布消息是用的</span><br><span class="line">// 回调函数是消息发布之后的逻辑实现，会有两个参数传入</span><br><span class="line">// 第一个是消息名称（固定），第二个是后续传入的参数（也就是消息发布携带的数据）</span><br><span class="line">this.pubId = pubsub.subscribe(&#x27;handleDeleteTodo&#x27;, (msgName,obj)=&gt;&#123;</span><br><span class="line">    this.handleDeleteTodo(obj)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 消息发布，调用publish方法</span><br><span class="line">// 参数第一个是消息名称，第二个即携带的数据</span><br><span class="line">// 可以将携带的数据设定为对象，这样数据传递方便</span><br><span class="line">pubsub.publish(&#x27;handleDeleteTodo&#x27;,obj)</span><br><span class="line"></span><br><span class="line">// 消息的退订，调用unsubscribe方法</span><br><span class="line">// 方法需要传入消息订阅的id</span><br><span class="line">pubsub.unsubscribe(this.pubId)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;vue组件之间的数据传递&quot;&gt;&lt;a href=&quot;#vue组件之间的数据传递&quot; class=&quot;headerlink&quot; title=&quot;vue组件之间的数据传递&quot;&gt;&lt;/a&gt;vue组件之间的数据传递&lt;/h3&gt;&lt;p&gt;学习vue的第四天学到了组件之间的数据传递，具体有一下几种需求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;父组件-&amp;gt;子组件&lt;/li&gt;
&lt;li&gt;子组件-&amp;gt;父组件&lt;/li&gt;
&lt;li&gt;兄弟组件之间、任意组件之间&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="工程" scheme="https://weienhua.github.io/categories/%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="前端" scheme="https://weienhua.github.io/categories/%E5%B7%A5%E7%A8%8B/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="vue" scheme="https://weienhua.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>单链表快速排序</title>
    <link href="https://weienhua.github.io/2023/07/18/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    <id>https://weienhua.github.io/2023/07/18/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</id>
    <published>2023-07-18T01:06:37.000Z</published>
    <updated>2023-07-18T02:11:19.831Z</updated>
    
    <content type="html"><![CDATA[<h3 id="单链表快速排序"><a href="#单链表快速排序" class="headerlink" title="单链表快速排序"></a>单链表快速排序</h3><p>题目来自acwing</p><h4 id="题目（点击跳转）"><a href="#题目（点击跳转）" class="headerlink" title="题目（点击跳转）"></a><a href="https://www.acwing.com/problem/content/1453/">题目（点击跳转）</a></h4><p>给定一个单链表，请使用快速排序算法对其排序。</p><p>要求：期望平均时间复杂度为 O(nlogn)，期望额外空间复杂度为 O(logn)。</p><p><strong>思考题：</strong> 如果只能改变链表结构，不能修改每个节点的val值该如何做呢？</p><span id="more"></span><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>链表中的所有数大小均在 int范围内，链表长度在 [0,10000]。<br>本题数据完全随机生成。</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[5, 3, 2]</span><br></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2, 3, 5]</span><br></pre></td></tr></table></figure><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p>单链表的快排比数组的快排要好一点，边界问题不用处理。</p><ul><li>进入排序算法，先判断链表是否有值，如果没有值或者只有一个值，直接<code>return</code>即可</li><li>申请三个链表头节点分别是<code>left, mid, right</code>，用来将链表进行排序，申请三个尾结点<code>ltail, mtail, rtail</code>，初始化为每个节点本身，创建一个<code>val</code>，即每次排序选择的一个标杆。</li><li>遍历单链表（这里循环结束之后要把链表尾部置空，让链表知道结束的位置）<ul><li>如果当前节点的值小于<code>val</code>就将节点连入left链表，即<code>ltail-&gt;next = p; ltail = p;</code>，这里尾结点next赋值之后要向后移动一位，即指向链表的尾部。</li><li>如果当前节点的值等于<code>val</code>就将节点连入mid链表，即<code>mtail-&gt;next = p; mtail = p;</code></li><li>如果当前节点的值大于<code>val</code>就将节点连入right链表，即<code>rtail-&gt;next = p; rtail = p;</code></li></ul></li><li>处理完之后可以得到三个链表，这是如果left和right两个链表有序之后，将三个链表连接一下就是最后的结果。<ul><li>递归处理left链表，left-&gt;next即链表的值</li><li>递归处理right链表，right-&gt;next即链表的值</li></ul></li><li>这里实现一个<code>get_tail()</code>方法，获取传入链表的尾结点。</li><li>最后将三个链表连接到一起即可。<ul><li>这里有一个细节是，mid链表可能没有值，所以连接完mid之后接着去找到left的尾结点去连接right链表。</li></ul></li></ul><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">get_tail</span><span class="params">(ListNode* head)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(head-&gt;next) head = head-&gt;next;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ListNode* <span class="title">quickSortList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head || !head-&gt;next) <span class="keyword">return</span> head;</span><br><span class="line">        <span class="keyword">auto</span> left = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>), mid = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>), right = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">auto</span> ltail = left, mtail = mid, rtail = right;</span><br><span class="line">        <span class="type">int</span> val = head-&gt;val;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> p = head; p; p = p-&gt;next) &#123;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;val &lt; val) &#123;ltail-&gt;next = p; ltail = p;&#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p-&gt;val == val) &#123;mtail-&gt;next = p; mtail = p;&#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;rtail-&gt;next = p; rtail = p;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ltail-&gt;next = mtail-&gt;next = rtail-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        left-&gt;next = <span class="built_in">quickSortList</span>(left-&gt;next);</span><br><span class="line">        right-&gt;next = <span class="built_in">quickSortList</span>(right-&gt;next);</span><br><span class="line">        <span class="built_in">get_tail</span>(left)-&gt;next = mid-&gt;next;</span><br><span class="line">        <span class="built_in">get_tail</span>(left)-&gt;next = right-&gt;next;</span><br><span class="line">        <span class="keyword">return</span> left-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;单链表快速排序&quot;&gt;&lt;a href=&quot;#单链表快速排序&quot; class=&quot;headerlink&quot; title=&quot;单链表快速排序&quot;&gt;&lt;/a&gt;单链表快速排序&lt;/h3&gt;&lt;p&gt;题目来自acwing&lt;/p&gt;
&lt;h4 id=&quot;题目（点击跳转）&quot;&gt;&lt;a href=&quot;#题目（点击跳转）&quot; class=&quot;headerlink&quot; title=&quot;题目（点击跳转）&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.acwing.com/problem/content/1453/&quot;&gt;题目（点击跳转）&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;给定一个单链表，请使用快速排序算法对其排序。&lt;/p&gt;
&lt;p&gt;要求：期望平均时间复杂度为 O(nlogn)，期望额外空间复杂度为 O(logn)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;思考题：&lt;/strong&gt; 如果只能改变链表结构，不能修改每个节点的val值该如何做呢？&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="https://weienhua.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="笔试" scheme="https://weienhua.github.io/categories/%E7%AE%97%E6%B3%95/%E7%AC%94%E8%AF%95/"/>
    
    
    <category term="c/c++" scheme="https://weienhua.github.io/tags/c-c/"/>
    
  </entry>
  
  <entry>
    <title>蛇形矩阵</title>
    <link href="https://weienhua.github.io/2023/07/18/%E8%9B%87%E5%BD%A2%E7%9F%A9%E9%98%B5/"/>
    <id>https://weienhua.github.io/2023/07/18/%E8%9B%87%E5%BD%A2%E7%9F%A9%E9%98%B5/</id>
    <published>2023-07-18T00:41:17.000Z</published>
    <updated>2023-07-18T02:11:09.187Z</updated>
    
    <content type="html"><![CDATA[<h3 id="蛇形矩阵"><a href="#蛇形矩阵" class="headerlink" title="蛇形矩阵"></a>蛇形矩阵</h3><p>题目来之acwing</p><h4 id="题目（点击跳转）"><a href="#题目（点击跳转）" class="headerlink" title="题目（点击跳转）"></a><a href="https://www.acwing.com/problem/content/758/">题目（点击跳转）</a></h4><p>输入两个整数 n 和 m，输出一个 n 行 m 列的矩阵，将数字1到 n×m 按照回字蛇形填充至矩阵中。</p><p>具体矩阵形式可参考样例。</p><span id="more"></span><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入共一行，包含两个整数 n 和 m。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出满足要求的矩阵。</p><p>矩阵占 n 行，每行包含 m 个空格隔开的整数。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n,m≤100</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 3</span><br></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 2 3</span><br><span class="line">8 9 4</span><br><span class="line">7 6 5</span><br></pre></td></tr></table></figure><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p>这个题目是一个模拟填数的题目，将数字从1开始依次按照回字规则填入n*m的矩阵中，解题的思路是模拟数字的方向，当一个方向走不通时按照顺时针旋转一下方向，这样就可以接着走了，填完之后将数组打印即可。</p><p>这边使用一个偏移量来控制方向（x轴的正方向是向下，y轴的正方形是向右）</p><ul><li>最开始肯定是从（0，0）开始y轴正方向走的，这时偏移量为<code>(0,1)</code></li><li>当向右走出界或者碰到已经填过的位置时，这时需要顺时针旋转方向，也就是向下即x轴的正方向走，这时偏移量为<code>(1,0)</code></li><li>当向下走出界或者碰到已经填过的位置时，这时需要顺时针旋转方向，也就是向左即y轴的负方向走，这时偏移量为<code>(0,-1)</code></li><li>当向左走出界或者碰到已经填过的位置时，这时需要顺时针旋转方向，也就是向上即x轴的负方向走，这时偏移量为<code>(-1,0)</code></li><li>当向上走出界或者碰到已经填过的位置时，这时需要顺时针旋转方向，也就是向右即y轴的正方向走，这是偏移量为<code>(0,1)</code></li></ul><p>可以发现，当方向旋转四次后，就会有一次循环，这是可以定义两个数组维护这个偏移量，即<code>dx和dy</code>。</p><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> res[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="comment">// 定义四个方向的偏移量，向右即为(dx[0],dy[0])</span></span><br><span class="line">    <span class="type">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;, dy[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>, k = <span class="number">1</span>, d = <span class="number">0</span>; k &lt;= n*m; k ++) &#123;</span><br><span class="line">        res[x][y] = k;</span><br><span class="line">        <span class="comment">// 计算下一个位置的坐标</span></span><br><span class="line">        <span class="type">int</span> a = x + dx[d], b = y + dy[d];</span><br><span class="line">        <span class="comment">// 判断下一个位置是否出界或者是否已经填值</span></span><br><span class="line">        <span class="keyword">if</span>(a&lt;<span class="number">0</span> || a&gt;=n || b&lt;<span class="number">0</span> || b&gt;=m || res[a][b])&#123;</span><br><span class="line"><span class="comment">// 如果已经出界，就将方向旋转，这里d+1就是将方向旋转</span></span><br><span class="line">            <span class="comment">// 对4取模是当最后一个方向时，加一就会超出数组下标，同时也为了实现循环数组</span></span><br><span class="line">            d = (d + <span class="number">1</span>) % <span class="number">4</span>;</span><br><span class="line">            a = x + dx[d], b = y + dy[d];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 最后将下一个位置赋值给x, y</span></span><br><span class="line">        x = a, y = b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 打印结果</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j ++ )&#123;</span><br><span class="line">            cout &lt;&lt; res[i][j] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;蛇形矩阵&quot;&gt;&lt;a href=&quot;#蛇形矩阵&quot; class=&quot;headerlink&quot; title=&quot;蛇形矩阵&quot;&gt;&lt;/a&gt;蛇形矩阵&lt;/h3&gt;&lt;p&gt;题目来之acwing&lt;/p&gt;
&lt;h4 id=&quot;题目（点击跳转）&quot;&gt;&lt;a href=&quot;#题目（点击跳转）&quot; class=&quot;headerlink&quot; title=&quot;题目（点击跳转）&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.acwing.com/problem/content/758/&quot;&gt;题目（点击跳转）&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;输入两个整数 n 和 m，输出一个 n 行 m 列的矩阵，将数字1到 n×m 按照回字蛇形填充至矩阵中。&lt;/p&gt;
&lt;p&gt;具体矩阵形式可参考样例。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="https://weienhua.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="笔试" scheme="https://weienhua.github.io/categories/%E7%AE%97%E6%B3%95/%E7%AC%94%E8%AF%95/"/>
    
    
    <category term="c/c++" scheme="https://weienhua.github.io/tags/c-c/"/>
    
  </entry>
  
  <entry>
    <title>harbor搭建镜像仓库</title>
    <link href="https://weienhua.github.io/2023/06/22/harbor%E6%90%AD%E5%BB%BA%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/"/>
    <id>https://weienhua.github.io/2023/06/22/harbor%E6%90%AD%E5%BB%BA%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/</id>
    <published>2023-06-22T07:38:09.000Z</published>
    <updated>2023-07-18T00:33:19.189Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2023/06/22/P4t29RwuJ3ZgcaU.png" alt="wallhaven-6k3oox_1920x1080"></p><h3 id="harbor搭建镜像仓库（v2-7-2-docker-v19-03-0-docker-composr-v2-17-2）"><a href="#harbor搭建镜像仓库（v2-7-2-docker-v19-03-0-docker-composr-v2-17-2）" class="headerlink" title="harbor搭建镜像仓库（v2.7.2+docker v19.03.0+docker-composr v2.17.2）"></a>harbor搭建镜像仓库（v2.7.2+docker v19.03.0+docker-composr v2.17.2）</h3><p>考虑到镜像下载可能因为网络问题出现下载失败和之后需要部署的项目镜像下载，这边通过服务器搭建一个harbor镜像储存仓库，之后可以通过push和pull命令对镜像进行上传和下载。</p><span id="more"></span><p>首先是创建虚拟机，这里参考k8s搭建的<a href="https://weienhua.github.io/2023/06/21/kubernetes%E5%AE%89%E8%A3%85%E5%92%8C%E8%B0%83%E8%AF%95%EF%BC%881-20-9-docker19-03-0-weave%EF%BC%89/">文章</a>，虚拟机的ip设置为：172.31.0.66。</p><h4 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h4><p>这里选择docker的版本为19.03.0，与k8s集群中的docker版本一致，因为之后是和集群一起使用的，这里的版本一致可以避免一些问题。</p><p>移除系统自带的docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br><span class="line">                  </span><br></pre></td></tr></table></figure><p>配置yum源，镜像用的是阿里云</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils</span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">--add-repo \</span><br><span class="line">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>安装指定版本的docker并启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y docker-ce-19.03.0 docker-ce-cli-19.03.0  containerd.io-1.4.6</span><br><span class="line">systemctl enable docker --now</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置加速</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker       # 创建文件夹</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [</span><br><span class="line">        &quot;https://dockerproxy.com&quot;,</span><br><span class="line">        &quot;https://hub-mirror.c.163.com&quot;,</span><br><span class="line">        &quot;https://mirror.baidubce.com&quot;,</span><br><span class="line">        &quot;https://ccr.ccs.tencentyun.com&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;insecure-registries&quot;: [&quot;172.31.0.66:8088&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>至此docker就安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><p>查看docker版本。</p><h4 id="docker-compose安装"><a href="#docker-compose安装" class="headerlink" title="docker-compose安装"></a>docker-compose安装</h4><p>因为网络问题，这里选择手动下载安装。</p><p>到官网上下载，导入centos中&#x2F;usr&#x2F;local&#x2F;bin<br><a href="https://github.com/docker/compose/releases">https://github.com/docker/compose/releases</a></p><p>之后给文件加上可执行权限即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加可执行权限</span></span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看版本</span></span><br><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure><h4 id="harbor安装"><a href="#harbor安装" class="headerlink" title="harbor安装"></a>harbor安装</h4><p>到官方发布页面下载harbor离线安装包。</p><p><a href="https://github.com/goharbor/harbor/releases">https://github.com/goharbor/harbor/releases</a></p><p><img src="https://s2.loli.net/2023/06/22/aGsUkYKVmqi5SLC.png" alt="image-20230622155858278"></p><p>下载完成之后上传到服务器，我这边上传的是用户目录（~），用命令解压文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -zxf harbor-offline-installer-v2.7.2.tgz</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入harbor路径下</span></span><br><span class="line">cd harbor</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/06/22/gsf2EJiT4XjBw31.png" alt="image-20230622160227581"></p><p>可以看到一些文件，复制<code>harbor.yml.tmpl</code>文件为<code>harbor.yml</code>，即创建一份配置文件。<code>install.sh</code>是安装文件，设置好配置文件之后直接运行就可以了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制并重命名一份新的配置文件</span></span><br><span class="line">cp harbor.yml.tmpl harbor.yml</span><br><span class="line">vim harbor.yml</span><br></pre></td></tr></table></figure><p>下面是需要修改的一些配置的解释</p><p><img src="https://img2022.cnblogs.com/blog/1736726/202207/1736726-20220709225854984-959413141.png" alt="img"></p><p><code>harbor.yml</code>示例模板（直接复制替换即可，需要修改hostname和端口号）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Configuration file of Harbor</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">The IP address or hostname to access admin UI and registry service.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">DO NOT use localhost or 127.0.0.1, because Harbor needs to be accessed by external clients.</span></span><br><span class="line">hostname: 172.31.0.66</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">http related config</span></span><br><span class="line">http:</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">port <span class="keyword">for</span> http, default is 80. If https enabled, this port will redirect to https port</span></span><br><span class="line">  port: 8088</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">不使用HTTPS</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https related config</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https:</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">https port <span class="keyword">for</span> harbor, default is 443</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">port: 443</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">The path of cert and key files <span class="keyword">for</span> nginx</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">certificate: /your/certificate/path</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">private_key: /your/private/key/path</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="comment"># Uncomment following will enable tls communication between all harbor components</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">internal_tls:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  <span class="comment"># set enabled to true means internal tls is enabled</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  enabled: <span class="literal">true</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  <span class="comment"># put your cert and key files on dir</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  <span class="built_in">dir</span>: /etc/harbor/tls/internal</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Uncomment external_url <span class="keyword">if</span> you want to <span class="built_in">enable</span> external proxy</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">And when it enabled the hostname will no longer used</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">external_url: https://reg.mydomain.com:8433</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">The initial password of Harbor admin</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">It only works <span class="keyword">in</span> first time to install harbor</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Remember Change the admin password from UI after launching Harbor.</span></span><br><span class="line">harbor_admin_password: admin</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Harbor DB configuration</span></span><br><span class="line">database:</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">The password <span class="keyword">for</span> the root user of Harbor DB. Change this before any production use.</span></span><br><span class="line">  password: 123456</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">The maximum number of connections <span class="keyword">in</span> the idle connection pool. If it &lt;=0, no idle connections are retained.</span></span><br><span class="line">  max_idle_conns: 100</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">The maximum number of open connections to the database. If it &lt;= 0, <span class="keyword">then</span> there is no <span class="built_in">limit</span> on the number of open connections.</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">Note: the default number of connections is 1024 <span class="keyword">for</span> postgres of harbor.</span></span><br><span class="line">  max_open_conns: 900</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">The default data volume</span></span><br><span class="line">data_volume: /mnt/harbor/data</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Harbor Storage settings by default is using /data <span class="built_in">dir</span> on <span class="built_in">local</span> filesystem</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Uncomment storage_service setting If you want to using external storage</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">storage_service:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  <span class="comment"># ca_bundle is the path to the custom root ca certificate, which will be injected into the truststore</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  <span class="comment"># of registry&#x27;s and chart repository&#x27;s containers.  This is usually needed when the user hosts a internal storage with self signed certificate.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  ca_bundle:</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  <span class="comment"># storage backend, default is filesystem, options include filesystem, azure, gcs, s3, swift and oss</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  <span class="comment"># for more info about this configuration please refer https://docs.docker.com/registry/configuration/</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  filesystem:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    maxthreads: 100</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  <span class="comment"># set disable to true when you want to disable registry redirect</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  redirect:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    disabled: <span class="literal">false</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Trivy configuration</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Trivy DB contains vulnerability information from NVD, Red Hat, and many other upstream vulnerability databases.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">It is downloaded by Trivy from the GitHub release page https://github.com/aquasecurity/trivy-db/releases and cached</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">in</span> the <span class="built_in">local</span> file system. In addition, the database contains the update timestamp so Trivy can detect whether it</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">should download a newer version from the Internet or use the cached one. Currently, the database is updated every</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">12 hours and published as a new release to GitHub.</span></span><br><span class="line">trivy:</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">ignoreUnfixed The flag to display only fixed vulnerabilities</span></span><br><span class="line">  ignore_unfixed: false</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">skipUpdate The flag to <span class="built_in">enable</span> or <span class="built_in">disable</span> Trivy DB downloads from GitHub</span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">  <span class="comment"># You might want to enable this flag in test or CI/CD environments to avoid GitHub rate limiting issues.</span></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">If the flag is enabled you have to download the `trivy-offline.tar.gz` archive manually, extract `trivy.db` and</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">`metadata.json` files and mount them <span class="keyword">in</span> the `/home/scanner/.cache/trivy/db` path.</span></span><br><span class="line">  skip_update: false</span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">  <span class="comment"># The offline_scan option prevents Trivy from sending API requests to identify dependencies.</span></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">Scanning JAR files and pom.xml may require Internet access <span class="keyword">for</span> better detection, but this option tries to avoid it.</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">For example, the offline mode will not try to resolve transitive dependencies <span class="keyword">in</span> pom.xml when the dependency doesn<span class="string">&#x27;t</span></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash"><span class="string">exist in the local repositories. It means a number of detected vulnerabilities might be fewer in offline mode.</span></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash"><span class="string">It would work if all the dependencies are in local.</span></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash"><span class="string">This option doesn’t affect DB download. You need to specify &quot;skip-update&quot; as well as &quot;offline-scan&quot; in an air-gapped environment.</span></span></span><br><span class="line">  offline_scan: false</span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash">  # insecure The flag to skip verifying registry certificate</span></span></span><br><span class="line">  insecure: false</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash"><span class="string">github_token The GitHub access token to download Trivy DB</span></span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash">  # Anonymous downloads from GitHub are subject to the limit of 60 requests per hour. Normally such rate limit is enough</span></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash"><span class="string">for production operations. If, for any reason, it&#x27;</span>s not enough, you could increase the rate <span class="built_in">limit</span> to 5000</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">requests per hour by specifying the GitHub access token. For more details on GitHub rate limiting please consult</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">https://developer.github.com/v3/<span class="comment">#rate-limiting</span></span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">  <span class="comment"># You can create a GitHub token by following the instructions in</span></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line</span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">  <span class="comment"># github_token: xxx</span></span></span><br><span class="line"></span><br><span class="line">jobservice:</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">Maximum number of job workers <span class="keyword">in</span> job service</span></span><br><span class="line">  max_job_workers: 10</span><br><span class="line"></span><br><span class="line">notification:</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">Maximum retry count <span class="keyword">for</span> webhook job</span></span><br><span class="line">  webhook_job_max_retry: 10</span><br><span class="line"></span><br><span class="line">chart:</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">Change the value of absolute_url to enabled can <span class="built_in">enable</span> absolute url <span class="keyword">in</span> chart</span></span><br><span class="line">  absolute_url: disabled</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Log configurations</span></span><br><span class="line">log:</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">options are debug, info, warning, error, fatal</span></span><br><span class="line">  level: info</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">configs <span class="keyword">for</span> logs <span class="keyword">in</span> <span class="built_in">local</span> storage</span></span><br><span class="line">  local:</span><br><span class="line">    # Log files are rotated log_rotate_count times before being removed. If count is 0, old versions are removed rather than rotated.</span><br><span class="line">    rotate_count: 50</span><br><span class="line">    # Log files are rotated only if they grow bigger than log_rotate_size bytes. If size is followed by k, the size is assumed to be in kilobytes.</span><br><span class="line">    # If the M is used, the size is in megabytes, and if G is used, the size is in gigabytes. So size 100, size 100k, size 100M and size 100G</span><br><span class="line">    # are all valid.</span><br><span class="line">    rotate_size: 200M</span><br><span class="line">    # The directory on your host that store log</span><br><span class="line">    location: /var/log/harbor</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">Uncomment following lines to <span class="built_in">enable</span> external syslog endpoint.</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">external_endpoint:</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">  <span class="comment"># protocol used to transmit log to external endpoint, options is tcp or udp</span></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">  protocol: tcp</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">  <span class="comment"># The host of external endpoint</span></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">  host: localhost</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">  <span class="comment"># Port of external endpoint</span></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">  port: 5140</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">This attribute is <span class="keyword">for</span> migrator to detect the version of the .cfg file, DO NOT MODIFY!</span></span><br><span class="line">_version: 2.5.0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Uncomment external_database <span class="keyword">if</span> using external database.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">external_database:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  harbor:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    host: harbor_db_host</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    port: harbor_db_port</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    db_name: harbor_db_name</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    username: harbor_db_username</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    password: harbor_db_password</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    ssl_mode: <span class="built_in">disable</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    max_idle_conns: 2</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    max_open_conns: 0</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  notary_signer:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    host: notary_signer_db_host</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    port: notary_signer_db_port</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    db_name: notary_signer_db_name</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    username: notary_signer_db_username</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    password: notary_signer_db_password</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    ssl_mode: <span class="built_in">disable</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  notary_server:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    host: notary_server_db_host</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    port: notary_server_db_port</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    db_name: notary_server_db_name</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    username: notary_server_db_username</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    password: notary_server_db_password</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    ssl_mode: <span class="built_in">disable</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Uncomment external_redis <span class="keyword">if</span> using external Redis server</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">external_redis:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  <span class="comment"># support redis, redis+sentinel</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  <span class="comment"># host for redis: &lt;host_redis&gt;:&lt;port_redis&gt;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  <span class="comment"># host for redis+sentinel:</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  <span class="comment">#  &lt;host_sentinel1&gt;:&lt;port_sentinel1&gt;,&lt;host_sentinel2&gt;:&lt;port_sentinel2&gt;,&lt;host_sentinel3&gt;:&lt;port_sentinel3&gt;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  host: redis:6379</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  password:</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  <span class="comment"># sentinel_master_set must be set to support redis+sentinel</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  <span class="comment">#sentinel_master_set:</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  <span class="comment"># db_index 0 is for core, it&#x27;s unchangeable</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  registry_db_index: 1</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  jobservice_db_index: 2</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  chartmuseum_db_index: 3</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  trivy_db_index: 5</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  idle_timeout_seconds: 30</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Uncomment uaa <span class="keyword">for</span> trusting the certificate of uaa instance that is hosted via self-signed cert.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">uaa:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  ca_file: /path/to/ca</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Global proxy</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Config http proxy <span class="keyword">for</span> components, e.g. http://my.proxy.com:3128</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Components doesn<span class="string">&#x27;t need to connect to each others via http proxy.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Remove component from `components` array if want disable proxy</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">for it. If you want use proxy for replication, MUST enable proxy</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">for core and jobservice, and set `http_proxy` and `https_proxy`.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Add domain to the `no_proxy` field, when you want disable proxy</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">for some special registry.</span></span></span><br><span class="line">proxy:</span><br><span class="line">  http_proxy:</span><br><span class="line">  https_proxy:</span><br><span class="line">  no_proxy:</span><br><span class="line">  components:</span><br><span class="line">    - core</span><br><span class="line">    - jobservice</span><br><span class="line">    - trivy</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">metric:</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  enabled: false</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  port: 9090</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  path: /metrics</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Trace related config</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">only can enable one trace provider(jaeger or otel) at the same time,</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">and when using jaeger as provider, can only enable it with agent mode or collector mode.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">if using jaeger collector mode, uncomment endpoint and uncomment username, password if needed</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">if using jaeger agetn mode uncomment agent_host and agent_port</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">trace:</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  enabled: true</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  # set sample_rate to 1 if you wanna sampling 100% of trace data; set 0.5 if you wanna sampling 50% of trace data, and so forth</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  sample_rate: 1</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  # # namespace used to differenciate different harbor services</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  # namespace:</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  # # attributes is a key value dict contains user defined attributes used to initialize trace provider</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  # attributes:</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  #   application: harbor</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  # # jaeger should be 1.26 or newer.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  # jaeger:</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  #   endpoint: http://hostname:14268/api/traces</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  #   username:</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  #   password:</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  #   agent_host: hostname</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  #   # export trace data by jaeger.thrift in compact mode</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  #   agent_port: 6831</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  # otel:</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  #   endpoint: hostname:4318</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  #   url_path: /v1/traces</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  #   compression: false</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  #   insecure: true</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  #   timeout: 10s</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">enable purge _upload directories</span></span></span><br><span class="line">upload_purging:</span><br><span class="line">  enabled: true</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash"><span class="string">remove files in _upload directories which exist for a period of time, default is one week.</span></span></span><br><span class="line">  age: 168h</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash"><span class="string">the interval of the purge operations</span></span></span><br><span class="line">  interval: 24h</span><br><span class="line">  dryrun: false</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改完成之后运行安装文件即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装</span></span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure><p>当看见successfully时表示安装完成</p><p>之后就可以通过yml文件中的ip和端口号访问了</p><p><img src="https://s2.loli.net/2023/06/22/mgvtI3AWNx4dnbh.png" alt="image-20230622165945928"></p><h4 id="配置docker通过harbor下载"><a href="#配置docker通过harbor下载" class="headerlink" title="配置docker通过harbor下载"></a>配置docker通过harbor下载</h4><p>找到docker 的 <code>daemon.json</code> 配置文件，CentOS 7 的路径：<code>/etc/docker/daemon.json</code>，如果路径下没有这个文件自己<strong>创建</strong>即可。然后再配置文件里加上：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker       # 创建文件夹</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [</span><br><span class="line">        &quot;https://dockerproxy.com&quot;,</span><br><span class="line">        &quot;https://hub-mirror.c.163.com&quot;,</span><br><span class="line">        &quot;https://mirror.baidubce.com&quot;,</span><br><span class="line">        &quot;https://ccr.ccs.tencentyun.com&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;insecure-registries&quot;: [&quot;172.31.0.66:8088&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p>在命令行窗口用docker登录harbor</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">登录harbor</span><br><span class="line">docker login -u admin -p admin 172.3.0.66:8088</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>harbor的启动和停止</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//切换到harbor安装包目录</span><br><span class="line">docker-compose stop   //停止Harbor</span><br><span class="line">docker-compose start  //启动Harbor</span><br><span class="line">重启服务器后会启动失败，下面是启动harbor的命令</span><br><span class="line">1、进入harbor路径</span><br><span class="line">cd harbor</span><br><span class="line">2、启动</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><p><a href="https://www.cnblogs.com/young-q/p/16462210.html">第一篇</a></p><p><a href="https://blog.csdn.net/Liu__sir__/article/details/130360950">第二篇</a></p><h4 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h4><p><a href="https://www.aliyundrive.com/s/ikAqQb5KjbC">docker-compose</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2023/06/22/P4t29RwuJ3ZgcaU.png&quot; alt=&quot;wallhaven-6k3oox_1920x1080&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;harbor搭建镜像仓库（v2-7-2-docker-v19-03-0-docker-composr-v2-17-2）&quot;&gt;&lt;a href=&quot;#harbor搭建镜像仓库（v2-7-2-docker-v19-03-0-docker-composr-v2-17-2）&quot; class=&quot;headerlink&quot; title=&quot;harbor搭建镜像仓库（v2.7.2+docker v19.03.0+docker-composr v2.17.2）&quot;&gt;&lt;/a&gt;harbor搭建镜像仓库（v2.7.2+docker v19.03.0+docker-composr v2.17.2）&lt;/h3&gt;&lt;p&gt;考虑到镜像下载可能因为网络问题出现下载失败和之后需要部署的项目镜像下载，这边通过服务器搭建一个harbor镜像储存仓库，之后可以通过push和pull命令对镜像进行上传和下载。&lt;/p&gt;</summary>
    
    
    
    <category term="工程" scheme="https://weienhua.github.io/categories/%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="镜像仓库" scheme="https://weienhua.github.io/categories/%E5%B7%A5%E7%A8%8B/%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/"/>
    
    
    <category term="CentOS7" scheme="https://weienhua.github.io/tags/CentOS7/"/>
    
    <category term="harbor" scheme="https://weienhua.github.io/tags/harbor/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes安装和调试（1.20.9+docker19.03.0+weave）</title>
    <link href="https://weienhua.github.io/2023/06/21/kubernetes%E5%AE%89%E8%A3%85%E5%92%8C%E8%B0%83%E8%AF%95%EF%BC%881-20-9-docker19-03-0-weave%EF%BC%89/"/>
    <id>https://weienhua.github.io/2023/06/21/kubernetes%E5%AE%89%E8%A3%85%E5%92%8C%E8%B0%83%E8%AF%95%EF%BC%881-20-9-docker19-03-0-weave%EF%BC%89/</id>
    <published>2023-06-21T01:28:52.000Z</published>
    <updated>2023-06-27T10:49:16.762Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2023/06/21/9nOytEYu8XBaLd2.jpg" alt="好年 新年 孔明灯 女孩 4k动漫壁纸_彼岸图网"></p><h3 id="kubernetes安装和调试（1-20-9-docker19-03-0-weave）"><a href="#kubernetes安装和调试（1-20-9-docker19-03-0-weave）" class="headerlink" title="kubernetes安装和调试（1.20.9+docker19.03.0+weave）"></a>kubernetes安装和调试（1.20.9+docker19.03.0+weave）</h3><p>学习kubernetes来对项目进行容器化部署。这里使用了VMware创建虚拟机来搭建k8s集群。</p><p>VMware:16.1.2，CentOS7，docker:19.03.0，kubeadm:1.20.9，kubectl:1.20.9，kubelet:1.20.9，weave。</p><span id="more"></span><h4 id="CentOS安装"><a href="#CentOS安装" class="headerlink" title="CentOS安装"></a>CentOS安装</h4><h5 id="镜像下载"><a href="#镜像下载" class="headerlink" title="镜像下载"></a>镜像下载</h5><ul><li>CentOS7下载地址：<a href="http://mirrors.aliyun.com/centos/7.9.2009/isos/x86_64/">CentOS 7.9</a></li></ul><p><img src="https://s2.loli.net/2023/06/21/WE7gHS3LfoNZrz8.png" alt="image-20230621094637921"></p><h5 id="虚拟机创建"><a href="#虚拟机创建" class="headerlink" title="虚拟机创建"></a>虚拟机创建</h5><p>下载完成之后打开虚拟机进行安装即可。</p><p><img src="https://s2.loli.net/2023/06/21/pOLhH23vQmkFRTB.png" alt="image-20230621094846813"></p><p><img src="https://s2.loli.net/2023/06/21/7NMVygB3nvlsAQE.png" alt="image-20230621094921378"></p><p><img src="https://s2.loli.net/2023/06/21/yKounIj8Qg6MkNd.png" alt="image-20230621094946819"></p><p><img src="https://s2.loli.net/2023/06/21/RLKoa5qV9tlWGDx.png" alt="image-20230621095009505"></p><p><img src="https://s2.loli.net/2023/06/21/JfV75zDa2oIQ9NH.png" alt="image-20230621095031008"></p><p><img src="https://s2.loli.net/2023/06/21/e9CVHUtm4DWIYul.png" alt="image-20230621095128572"></p><p><img src="https://s2.loli.net/2023/06/21/X9mIaK6GbQnh1J2.png" alt="image-20230621095227845"></p><p><img src="https://s2.loli.net/2023/06/21/EUzC2n6gSifTD5A.png" alt="image-20230621095249962"></p><p><img src="https://s2.loli.net/2023/06/21/Mmzo763YrCcswpi.png" alt="image-20230621095315555"></p><p><img src="https://s2.loli.net/2023/06/21/mr4XVKzNhuAUJbl.png" alt="image-20230621095334696"></p><p><img src="https://s2.loli.net/2023/06/21/5ioftLAaVSlnjJZ.png" alt="image-20230621095350888"></p><p><img src="https://s2.loli.net/2023/06/21/zef32N1JLMWb9Ew.png" alt="image-20230621095407927"></p><p><img src="https://s2.loli.net/2023/06/21/zTSh96sGRDXmLlF.png" alt="image-20230621095420022"></p><p><img src="https://s2.loli.net/2023/06/21/uvwHO9Btce5iIqd.png" alt="image-20230621095432344"></p><p><img src="https://s2.loli.net/2023/06/21/WXSVL41aNIxAqn3.png" alt="image-20230621095446745"></p><p><img src="https://s2.loli.net/2023/06/21/dbVGxKg8mDR4Wn7.png" alt="image-20230621095530687"></p><p><img src="https://s2.loli.net/2023/06/21/eaHF9P6nSd7mUYI.png" alt="image-20230621095541376"></p><p>到这儿就已经把虚拟机创建完成了，但是还需要配置网络和进行安装。</p><h5 id="VMware网络配置"><a href="#VMware网络配置" class="headerlink" title="VMware网络配置"></a>VMware网络配置</h5><p>我的设置：</p><ul><li>master节点IP： 172.31.0.3</li><li>node01节点IP：172.31.0.4</li><li>node02节点IP：172.31.0.5</li><li>子网掩码：255.255.0.0</li><li>网关：172.31.0.2</li><li>DNS:114.114.114.114</li></ul><p>首先是在VMware中设置。</p><p>主页—&gt;编辑—&gt;虚拟网络编辑器</p><p><img src="https://s2.loli.net/2023/06/21/cgZTbx1aVWXYHit.png" alt="image-20230621100402357"></p><p><img src="https://s2.loli.net/2023/06/21/EMZ3G9iYXeV8jk2.png" alt="image-20230621100454415"></p><p>需要设置为静态的ip，所以在这儿取消勾选DHCP服务。</p><p><img src="https://s2.loli.net/2023/06/21/RcZEAKkOedtbr48.png" alt="image-20230621100701320"></p><p>至此就设置完VMware了。</p><h5 id="CentOS镜像安装"><a href="#CentOS镜像安装" class="headerlink" title="CentOS镜像安装"></a>CentOS镜像安装</h5><p><img src="https://s2.loli.net/2023/06/21/KuPgdr3lhwsnIFk.png" alt="image-20230621100846635"></p><p><img src="https://s2.loli.net/2023/06/21/QajkG7IuZMLY9eK.png" alt="image-20230621100923402"></p><p><img src="https://s2.loli.net/2023/06/21/AbeilJfWKaukFzm.png" alt="image-20230621101224940"></p><p><img src="https://s2.loli.net/2023/06/21/oiP851ZqwrU6nHM.png" alt="image-20230621101342608"></p><p><img src="https://s2.loli.net/2023/06/21/MYzHWIFio1qDg5s.png" alt="image-20230621101320589"></p><p><img src="https://s2.loli.net/2023/06/21/eKf2zMUbAcawCSu.png" alt="image-20230621101408307"></p><p><img src="https://s2.loli.net/2023/06/21/PHfXIcakSFuVT4w.png" alt="image-20230621101459131"></p><p><img src="https://s2.loli.net/2023/06/21/9XdDLvaujfW3bpr.png" alt="image-20230621101557774"></p><p><img src="https://s2.loli.net/2023/06/21/MA1dHDeViwxvjQ6.png" alt="image-20230621101706341"></p><p><img src="https://s2.loli.net/2023/06/21/xSBWPyeUnYoDjKN.png" alt="image-20230621101731384"></p><p><img src="https://s2.loli.net/2023/06/21/TrOXxcEPD2qg9kZ.png" alt="image-20230621101826851"></p><p><img src="https://s2.loli.net/2023/06/21/vdDhMBZpQekt2m8.png" alt="image-20230621101805221"></p><p>等待安装完成重启即可。</p><p>启动之后可以通过命令查看一下虚拟机的ip是否设置正确。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/06/21/Y5LQtxTWdHmPa9l.png" alt="image-20230621102211920"></p><p>测试一下网络通不通</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/06/21/m1h7Y68zrugFHcb.png" alt="image-20230621102320183"></p><p>可以看到已经ping通了，所以网络没问题，搭建k8s集群需要有master节点和node节点，这次创建了一个master节点，两个node节点。上述演示了创建master节点的过程，node节点的创建同上，记得把ip修改一下。</p><h4 id="kuberbetes安装"><a href="#kuberbetes安装" class="headerlink" title="kuberbetes安装"></a>kuberbetes安装</h4><h5 id="简单的设置"><a href="#简单的设置" class="headerlink" title="简单的设置"></a>简单的设置</h5><p>安装所需工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y install vim</span><br><span class="line">sudo yum -y install wget</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>安装并配置 ntpdate，同步时间</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y install ntpdate</span><br><span class="line">sudo ntpdate ntp1.aliyun.com</span><br><span class="line">sudo systemctl status ntpdate</span><br><span class="line">sudo systemctl start ntpdate</span><br><span class="line">sudo systemctl status ntpdate</span><br><span class="line">sudo systemctl enable ntpdate</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将主机名加入hosts文件中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/hosts</span><br></pre></td></tr></table></figure><p>在文件最后加入下面的配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">172.31.0.3  master</span><br><span class="line">172.31.0.4  node01</span><br><span class="line">172.31.0.5  node02</span><br></pre></td></tr></table></figure><p>设置安装的基础环境，比如需要关闭防火墙，关闭交换空间，关闭selinux等</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 SELinux 设置为 permissive 模式（相当于将其禁用）</span></span><br><span class="line">sudo setenforce 0</span><br><span class="line">sudo sed -i &#x27;s/^SELINUX=enforcing$/SELINUX=permissive/&#x27; /etc/selinux/config</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">关闭swap</span></span><br><span class="line">swapoff -a  </span><br><span class="line">sed -ri &#x27;s/.*swap.*/#&amp;/&#x27; /etc/fstab</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">允许 iptables 检查桥接流量</span></span><br><span class="line">cat &lt;&lt;EOF | sudo tee /etc/modules-load.d/k8s.conf</span><br><span class="line">br_netfilter</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF | sudo tee /etc/sysctl.d/k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br><span class="line">sudo sysctl --system</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>关闭防火墙，或者开通指定端口（这个可以参考这篇☞<a href="https://www.yuque.com/xuxiaowei-com-cn/gitlab-k8s/k8s-install">文章</a>）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop firewalld.service </span><br><span class="line">sudo systemctl disable firewalld.service</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>或者用下面命令打开指定端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">控制面板</span></span><br><span class="line">firewall-cmd --zone=public --add-port=6443/tcp --permanent # Kubernetes API server所有</span><br><span class="line">firewall-cmd --zone=public --add-port=2379/tcp --permanent # etcd server client APIkube-apiserver, etcd</span><br><span class="line">firewall-cmd --zone=public --add-port=2380/tcp --permanent # etcd server client APIkube-apiserver, etcd</span><br><span class="line">firewall-cmd --zone=public --add-port=10250/tcp --permanent # Kubelet API自身, 控制面</span><br><span class="line">firewall-cmd --zone=public --add-port=10259/tcp --permanent # kube-scheduler自身</span><br><span class="line">firewall-cmd --zone=public --add-port=10257/tcp --permanent # kube-controller-manager自身</span><br><span class="line">firewall-cmd --zone=trusted --add-source=172.31.0.3 --permanent # 信任集群中各个节点的IP</span><br><span class="line">firewall-cmd --zone=trusted --add-source=172.31.0.4 --permanent # 信任集群中各个节点的IP</span><br><span class="line">firewall-cmd --zone=trusted --add-source=172.31.0.5 --permanent # 信任集群中各个节点的IP</span><br><span class="line">firewall-cmd --add-masquerade --permanent # 端口转发</span><br><span class="line">firewall-cmd --reload</span><br><span class="line">firewall-cmd --list-all</span><br><span class="line">firewall-cmd --list-all --zone=trusted</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">工作节点</span></span><br><span class="line">firewall-cmd --zone=public --add-port=10250/tcp --permanent # Kubelet API自身, 控制面</span><br><span class="line">firewall-cmd --zone=public --add-port=30000-32767/tcp --permanent # NodePort Services†所有</span><br><span class="line">firewall-cmd --zone=trusted --add-source=172.31.0.3 --permanent # 信任集群中各个节点的IP</span><br><span class="line">firewall-cmd --zone=trusted --add-source=172.31.0.4 --permanent # 信任集群中各个节点的IP</span><br><span class="line">firewall-cmd --zone=trusted --add-source=172.31.0.5 --permanent # 信任集群中各个节点的IP</span><br><span class="line">firewall-cmd --add-masquerade --permanent # 端口转发</span><br><span class="line">firewall-cmd --reload</span><br><span class="line">firewall-cmd --list-all</span><br><span class="line">firewall-cmd --list-all --zone=trusted</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h5><p>移除系统自带的docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br><span class="line">                  </span><br></pre></td></tr></table></figure><p>配置yum源，镜像用的是阿里云</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils</span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">--add-repo \</span><br><span class="line">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>安装指定版本的docker并启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y docker-ce-19.03.0 docker-ce-cli-19.03.0  containerd.io-1.4.6</span><br><span class="line">systemctl enable docker --now</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置加速</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker       # 创建文件夹</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [</span><br><span class="line">        &quot;https://dockerproxy.com&quot;,</span><br><span class="line">        &quot;https://hub-mirror.c.163.com&quot;,</span><br><span class="line">        &quot;https://mirror.baidubce.com&quot;,</span><br><span class="line">        &quot;https://ccr.ccs.tencentyun.com&quot;,</span><br><span class="line">        &quot;https://zv1b39f5.mirror.aliyuncs.com&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;insecure-registries&quot;: [&quot;172.31.0.66:8088&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>至此docker就安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><p>查看docker版本。</p><h5 id="kubeadm安装"><a href="#kubeadm安装" class="headerlink" title="kubeadm安装"></a>kubeadm安装</h5><p>安装kubelet、kubeadm、kubectl</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置k8s 下载的地址</span></span><br><span class="line">cat &lt;&lt;EOF | sudo tee /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span><br><span class="line">   http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">exclude=kubelet kubeadm kubectl</span><br><span class="line">EOF</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装3大件</span></span><br><span class="line">sudo yum install -y kubelet-1.20.9 kubeadm-1.20.9 kubectl-1.20.9 --disableexcludes=kubernetes</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动kubelet</span></span><br><span class="line">sudo systemctl enable --now kubelet</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="构建集群"><a href="#构建集群" class="headerlink" title="构建集群"></a>构建集群</h5><p>下载镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将所需镜像加入txt文件中</span></span><br><span class="line">kubeadm config images list | grep &#x27;^k8s.gcr&#x27; &gt;imglist.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">由于镜像是国外网站，创建shell脚本将镜像下载并用tag命名为原名称</span></span><br><span class="line">vi pull.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">for image in $(cat imglist.txt)</span><br><span class="line">do</span><br><span class="line">imagename=$(echo $image | awk -F &#x27;/&#x27; &#x27;&#123;print$NF&#125;&#x27;)</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/$imagename</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/$imagename $image</span><br><span class="line">done</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行脚本下载镜像</span></span><br><span class="line">bash pull.sh</span><br></pre></td></tr></table></figure><p>主节点初始化，只需要在master节点运行即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init \</span><br><span class="line">--apiserver-advertise-address=172.31.0.3 \</span><br><span class="line">--control-plane-endpoint=master \</span><br><span class="line">--image-repository registry.cn-hangzhou.aliyuncs.com/lfy_k8s_images \</span><br><span class="line">--kubernetes-version v1.20.9 \</span><br><span class="line">--service-cidr=10.96.0.0/16 \</span><br><span class="line">--pod-network-cidr=192.168.0.0/16</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以下是各个命令的备注不需要执行</span></span><br><span class="line">kubeadm init \</span><br><span class="line">--apiserver-advertise-address=172.31.0.3 \   # master 节点ip</span><br><span class="line">--control-plane-endpoint=master \  # 域名值</span><br><span class="line">--image-repository registry.cn-hangzhou.aliyuncs.com/lfy_k8s_images \   # 镜像仓库</span><br><span class="line">--kubernetes-version v1.20.9 \  # k8s 版本 </span><br><span class="line">--service-cidr=10.96.0.0/16 \     # 网络范围  一般不用改   网络范围不重叠</span><br><span class="line">--pod-network-cidr=192.168.0.0/16   # k8s 给pod分配网络ip的范围   一般不用改</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">所有网络范围不重叠</span></span><br></pre></td></tr></table></figure><p>出现下面的结果即为成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">我自己的运行结果</span></span><br><span class="line"></span><br><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">组建集群 需要执行以下命令</span></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">  mkdir -p $HOME/.kube</span><br><span class="line">  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">  sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class="line"></span><br><span class="line">Alternatively, if you are the root user, you can run:</span><br><span class="line"></span><br><span class="line">  export KUBECONFIG=/etc/kubernetes/admin.conf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">部署pod网络插件    连接k8s所有网络</span></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"></span><br><span class="line">You can now join any number of control-plane nodes by copying certificate authorities</span><br><span class="line">and service account keys on each node and then running the following as root:</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">加入master节点</span></span><br><span class="line">  kubeadm join cluster-endpoint:6443 --token uu0mpy.fdsjy3wojwwpatyj \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:3d0c32c41667faf5424f6a3506e330bdaa57edda63c3d0f09bb4346c0b7c5b4f \</span><br><span class="line">    --control-plane </span><br><span class="line"></span><br><span class="line">Then you can join any number of worker nodes by running the following on each as root:</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">加入工作node节点</span></span><br><span class="line">kubeadm join cluster-endpoint:6443 --token uu0mpy.fdsjy3wojwwpatyj \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:3d0c32c41667faf5424f6a3506e330bdaa57edda63c3d0f09bb4346c0b7c5b4f</span><br></pre></td></tr></table></figure><h5 id="设置-kube-x2F-config"><a href="#设置-kube-x2F-config" class="headerlink" title="设置.kube&#x2F;config"></a>设置.kube&#x2F;config</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p $HOME/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用下面命令可以查看所有pod状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod --all-namespaces -o wide</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由于网络插件还没安装会有两个pod一直在pending</p><h5 id="安装网络插件（weave）"><a href="#安装网络插件（weave）" class="headerlink" title="安装网络插件（weave）"></a>安装网络插件（weave）</h5><p><a href="https://kubernetes.io/zh-cn/docs/tasks/administer-cluster/network-policy-provider/weave-network-policy/">kubernetes文档</a></p><p><a href="https://www.weave.works/docs/net/latest/kubernetes/kube-addon/">weave官网安装</a></p><p><a href="https://docs.daocloud.io/community/mirror/">公开镜像加速站</a></p><p>去官网下载weave的yaml文件，查看yaml文件中用到的镜像，由于是通过国外的仓库下载镜像总是因为网络出现下载失败的问题，这里通过用公开的国内镜像加速源来下载，再通过tag修改为国外镜像源下载的名称。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://github.com/weaveworks/weave/releases/download/v2.8.1/weave-daemonset-k8s.yaml</span><br><span class="line"> </span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker pull docker.m.daocloud.io/weaveworks/weave-kube</span><br><span class="line">docker pull docker.m.daocloud.io/weaveworks/weave-npc</span><br><span class="line">docker tag docker.m.daocloud.io/weaveworks/weave-kube weaveworks/weave-kube</span><br><span class="line">docker tag docker.m.daocloud.io/weaveworks/weave-npc weaveworks/weave-npc</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>镜像下载完成，通过下面命令查看所有的pod，可以看到有两个weave正在初始化，等初始化完成之后之前两个pending中的pod也会创建。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod --all-namespaces -o wide</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>至此，集群就构建完成。</p><h4 id="测试集群（创建nginx服务）"><a href="#测试集群（创建nginx服务）" class="headerlink" title="测试集群（创建nginx服务）"></a>测试集群（创建nginx服务）</h4><p>现在创建nginx服务来测试k8s集群搭建是否成功。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">带 命名空间、Service 的完整版参见：https://jihulab.com/xuxiaowei-cloud/xuxiaowei-cloud/-/blob/main/docs/deployment/nginx-deployment.yaml</span></span><br><span class="line">cat &gt; nginx.yaml &lt;&lt; EOF</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-deployment</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx</span><br><span class="line">spec:</span><br><span class="line">  replicas: 2</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx:1.23.2</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line"></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat nginx.yaml</span><br><span class="line"></span><br><span class="line">kubectl apply -f nginx.yaml</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl edit deployment nginx-deployment</span></span><br></pre></td></tr></table></figure><p>启动成功之后查看是否正常创建pod</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods --all-namespaces -o wide</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/06/25/wckuIPq7Y8pBy6Z.png" alt="image-20230625105531044"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">控制面板：查看pod,svc</span></span><br><span class="line">kubectl get pod,svc -o wide</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/06/25/d7ZPq6V43HUQjtA.png" alt="image-20230625105558811"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">控制面板：设置服务（将多个 nginx-deployment 的 pod 绑定在一起，通过一个 Service 端口统一对外提供）</span></span><br><span class="line">kubectl expose deployment nginx-deployment --type=NodePort --name=nginx-service</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">控制面板：查看pod,svc</span></span><br><span class="line">kubectl get pod,svc -o wide</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/06/25/mu2Ejo6L3MDwiaV.png" alt="image-20230625105728494"></p><p>可以看到节点服务已经启动，下面使用节点ip+端口号就可以访问到服务。</p><p><img src="https://s2.loli.net/2023/06/25/7IkopnUrJc9EQG2.png" alt="image-20230625105944175"></p><h4 id="集群重置"><a href="#集群重置" class="headerlink" title="集群重置"></a>集群重置</h4><p>使用命令将k8s的设置恢复初始化，恢复初始化之后得把<code>$HOME/.kube</code>这个路径删除，不然再次init时会报错。</p><p>因为上面在init之后会执行一段命令初始化<code>$HOME/.kube</code>这个文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kubeadm reset</span><br><span class="line"></span><br><span class="line">sysctl -w net.ipv4.ip_forward=1</span><br><span class="line"></span><br><span class="line">rm -rf $HOME/.kube</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>初始化之后就可以再次用init命令对集群进行初始化，参考上面初始化过程即可。</p><h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><p><a href="https://blog.csdn.net/qq_41860461/article/details/122418639">第一篇</a></p><p><a href="https://www.bilibili.com/video/BV1zY41167aa/?spm_id_from=333.337.search-card.all.click&vd_source=8ff64866475475a356d9c225910f163e">博主的视频</a>和<a href="https://www.yuque.com/xuxiaowei-com-cn/gitlab-k8s/k8s-install">文章</a></p><p><a href="https://blog.csdn.net/woay2008/article/details/93250137">k8s初始化参考</a></p><p><a href="https://blog.csdn.net/energylocked/article/details/127347007">报错参考1</a>，<a href="https://blog.csdn.net/qq_39346534/article/details/107629830">报错参考2</a></p><p><a href="https://docs.daocloud.io/community/mirror/">镜像加速站</a></p><h4 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h4><p>weave的yaml文件（阿里云盘）：<a href="https://www.aliyundrive.com/s/nHH4gT99eze">点击下载</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2023/06/21/9nOytEYu8XBaLd2.jpg&quot; alt=&quot;好年 新年 孔明灯 女孩 4k动漫壁纸_彼岸图网&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;kubernetes安装和调试（1-20-9-docker19-03-0-weave）&quot;&gt;&lt;a href=&quot;#kubernetes安装和调试（1-20-9-docker19-03-0-weave）&quot; class=&quot;headerlink&quot; title=&quot;kubernetes安装和调试（1.20.9+docker19.03.0+weave）&quot;&gt;&lt;/a&gt;kubernetes安装和调试（1.20.9+docker19.03.0+weave）&lt;/h3&gt;&lt;p&gt;学习kubernetes来对项目进行容器化部署。这里使用了VMware创建虚拟机来搭建k8s集群。&lt;/p&gt;
&lt;p&gt;VMware:16.1.2，CentOS7，docker:19.03.0，kubeadm:1.20.9，kubectl:1.20.9，kubelet:1.20.9，weave。&lt;/p&gt;</summary>
    
    
    
    <category term="工程" scheme="https://weienhua.github.io/categories/%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="容器部署" scheme="https://weienhua.github.io/categories/%E5%B7%A5%E7%A8%8B/%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2/"/>
    
    
    <category term="CentOS7" scheme="https://weienhua.github.io/tags/CentOS7/"/>
    
    <category term="docker" scheme="https://weienhua.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>重装系统之后的django项目配置（wsl）</title>
    <link href="https://weienhua.github.io/2023/04/03/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E4%B9%8B%E5%90%8E%E7%9A%84django%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%EF%BC%88wsl%EF%BC%89/"/>
    <id>https://weienhua.github.io/2023/04/03/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E4%B9%8B%E5%90%8E%E7%9A%84django%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%EF%BC%88wsl%EF%BC%89/</id>
    <published>2023-04-03T02:27:05.000Z</published>
    <updated>2023-04-19T06:34:35.042Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2023/04/03/lG7qsZLthxcnbYz.jpg" alt="宇航员"></p><h3 id="重装系统之后的Django项目配置（WSL）"><a href="#重装系统之后的Django项目配置（WSL）" class="headerlink" title="重装系统之后的Django项目配置（WSL）"></a>重装系统之后的<code>Django</code>项目配置（<code>WSL</code>）</h3><p>升级固态硬盘之后，只能重装系统，这样一来就得重新来配置项目的开发环境。</p><h4 id="Linux环境下"><a href="#Linux环境下" class="headerlink" title="Linux环境下"></a><code>Linux</code>环境下</h4><p><code>Django</code>项目需要用到<code>python</code>解释器，在开发过程中，不同的项目可能会用到不同版本的库，为了防止环境下包的版本冲突，选择在<code>windows的linux子环境</code>中来安装多版本的<code>python</code>，通过<code>virtualenv</code>来生成相互隔离的虚拟环境。</p><span id="more"></span><h5 id="开启WSL功能"><a href="#开启WSL功能" class="headerlink" title="开启WSL功能"></a>开启<code>WSL</code>功能</h5><p>在安装之前，由于<code>windows</code>默认是关闭<code>WSL</code>功能的，所以需要先开启该功能。</p><p>这边有两种方法，都可以开启，不过<strong>重点是开启之后需要重启电脑才可以生效</strong></p><ul><li>第一种是直观一点的方法</li></ul><p><a href="https://zhuanlan.zhihu.com/p/384026893">开启WSL功能</a></p><p>打开设置里的应用和功能</p><p><img src="https://s2.loli.net/2023/04/04/64o1wOFURs3c2xI.png" alt="image-20230403112835703"></p><p>点击右侧的相关设置提示的程序和功能</p><p>接着点左侧的启用或关闭<code>windows</code>功能</p><p><img src="https://s2.loli.net/2023/04/04/f7hEmgKFVDda32J.png" alt="image-20230403113044997"></p><p>在列表里找到并勾选适用于<code>Linux</code>的<code>windows</code>子系统选项，确定之后重启电脑。</p><ul><li>第二种是微软官方给出的命令方法</li></ul><p><a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-manual">WSL安装</a></p><p>管理员身份在<code>powershell</code>中运行这条命令即可打开。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</span><br></pre></td></tr></table></figure><h5 id="安装WSL"><a href="#安装WSL" class="headerlink" title="安装WSL"></a>安装<code>WSL</code></h5><p>开启上面功能之后就可以安装子环境了，直接在微软商店里搜索<code>ubuntu</code>就可以看到，这里选择18.05版本进行安装。</p><p><img src="https://s2.loli.net/2023/04/04/85AIJxQuOjMcWpF.png" alt="image-20230404165926953"></p><p>安装成功之后打开<code>ubuntu</code>的窗口，第一次打开需要等待一下，等待响应之后，需要设置<code>Linux</code>子系统的用户名和密码，设置完成之后即可完成安装，安装成功之后可以在桌面打开：按住Shift+单击鼠标右键，可以看到<code>在此处打开Linux shell窗口</code>，点击即可在桌面打开子环境的窗口。</p><p><img src="https://s2.loli.net/2023/04/04/ljTWZOkHMaJA4e1.png" alt="image-20230404170443478"></p><h5 id="安装mysql-server"><a href="#安装mysql-server" class="headerlink" title="安装mysql-server"></a>安装<code>mysql-server</code></h5><p><a href="https://zhuanlan.zhihu.com/p/166444726">安装<code>mysql</code></a></p><p>首先是更新一下软件源：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure><p>通过<code>apt</code>命令安装<code>mysql</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mysql-server mysql-client</span><br></pre></td></tr></table></figure><p>这边安装完之后可能会碰到一个进入数据库的错误（参考<a href="https://blog.csdn.net/a35100535/article/details/113250441">文章</a>）</p><p><img src="https://s2.loli.net/2023/04/04/fTEzulL4seVZ7YK.png" alt="image-20230404171835659"></p><p>博主用下面的命令给<code>mysql</code>加了权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /var/run/mysqld </span><br><span class="line"> </span><br><span class="line">sudo chown mysql /var/run/mysqld/ </span><br><span class="line"> </span><br><span class="line">sudo service mysql restart</span><br></pre></td></tr></table></figure><p>因为不清楚<code>root</code>账户的默认密码，这里找到了<code>mysql</code>生成的默认账号，用以下命令可以查看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cat /etc/mysql/debian.cnf</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/04/04/j5LfrOAS7MswXyi.png" alt="image-20230404172938034"></p><p>这边的<code>mysql_update</code>中的<code>user</code>和<code>password</code>就是生成的默认账号，用该账号进入之后修改<code>root</code>的密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line"> </span><br><span class="line">update mysql.user set authentication_string=password(&#x27;修改成你root账户的密码&#x27;) where user=&#x27;root&#x27; and Host =&#x27;localhost&#x27;;</span><br><span class="line"> </span><br><span class="line">update user set plugin=&quot;mysql_native_password&quot;;</span><br><span class="line"> </span><br><span class="line">flush privileges;</span><br><span class="line"> </span><br><span class="line">quit;</span><br></pre></td></tr></table></figure><p>退出重启之后用<code>root</code>用户登录进入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql restart</span><br><span class="line"> </span><br><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p>可以登陆之后，通过<code>-h + ip</code>来通过子环境去连接<code>windows</code>下的数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -h [x.x.x.x] -p</span><br></pre></td></tr></table></figure><p>如果可以连接成功即已经完成<code>Linux</code>环境下数据库的配置。</p><h5 id="安装virtualenv"><a href="#安装virtualenv" class="headerlink" title="安装virtualenv"></a>安装<code>virtualenv</code></h5><p><a href="https://www.cnblogs.com/freely/p/8022923.html">文章</a></p><p>子环境中默认安装了<code>python2.7和python3.6</code>但是应该是没有安装<code>pip</code>包管理工具，所以需要通过下面的命令来安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python3-pip</span><br></pre></td></tr></table></figure><p>安装完<code>pip</code>之后，通过<code>pip</code>安装<code>virtualenv</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip3 install virtualenv</span><br><span class="line">virtualenv --version</span><br></pre></td></tr></table></figure><p>安装成功后查询可以看到版本号，之后用<code>virtualenv</code>来创建一个虚拟环境</p><p><em>注：如果环境下有多个版本的<code>python</code>这时调用<code>virtualenv</code>就需要在命令前加上一个前缀：<code>python3 -m virtualenv --version</code>（比如3.6版本下装的<code>virtualenv</code>）</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//在当前目录下创建虚拟环境</span><br><span class="line">python3 -m virtualenv [progect_env]</span><br></pre></td></tr></table></figure><p>ps：如果有多个python解释器可以指定虚拟环境中的python版本，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m virtualenv -p [python解释器的路径:/usr/bin/python2.7] [project_env]</span><br></pre></td></tr></table></figure><p><code>source [project_env]/bin/activate</code> 进入虚拟环境</p><p><code>deactivate</code> 退出虚拟环境</p><h5 id="安装项目依赖（以labcoursedisplay为例）"><a href="#安装项目依赖（以labcoursedisplay为例）" class="headerlink" title="安装项目依赖（以labcoursedisplay为例）"></a>安装项目依赖（以<code>labcoursedisplay</code>为例）</h5><p>进入虚拟环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source labcoursedisplay/bin/activate</span><br></pre></td></tr></table></figure><p>进入项目目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /mnt/c/Project/Labcoursedisplay/</span><br></pre></td></tr></table></figure><p>安装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install -r requirements</span><br></pre></td></tr></table></figure><p>在安装<code>mysql-client1.4.0</code>时出现一个<code>OSError: mysql_config not found</code>报错（参考<a href="https://blog.csdn.net/qq_36191272/article/details/122933438">文章</a>）</p><p><img src="https://s2.loli.net/2023/04/04/3FHVGK5EC62TqeI.png" alt="img"></p><p>这里看到是<code>mysql_config</code>的问题，输入之后报错<code>not found</code>也给出了解决办法，输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libmysqlclient-dev</span><br></pre></td></tr></table></figure><p>安装完成之后就可以找到<code>mysql_config</code>了，再去安装<code>mysql-client</code>就可以成功了。</p><p>至此就已经完成了<code>Linux</code>环境下的所有配置。</p><h4 id="windows环境下"><a href="#windows环境下" class="headerlink" title="windows环境下"></a><code>windows</code>环境下</h4><p>项目开发是在<code>windows</code>下的集成开发环境下进行的。<code>Linux</code>环境只是提供<code>python</code>虚拟环境用来跑<code>Django</code>项目。</p><h5 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装<code>node.js</code></h5><p>因为项目是前后端分离的，前端用到了<code>React</code>，这里安装<code>node.js</code>之后就可以通过<code>npm</code>命令来对前端进行开发。</p><h5 id="安装Navicat"><a href="#安装Navicat" class="headerlink" title="安装Navicat"></a>安装<code>Navicat</code></h5><h5 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装<code>mysql</code></h5><p>这里用的版本是5.6版本，因为是用的绿色版，所以直接把压缩包解压之后即可用数据库，在重装系统之前通过<code>Navicat</code>把项目数据库结构和数据都备份了，同时也备份了<code>mysql</code>（这里是数据库中的一个叫<code>mysql</code>的数据库）数据库的表，也就是用户信息，因为默认是关闭远程连接的，需要去修改<code>mysql</code>数据库用户表中的数据才打开远程连接，具体可以参考<a href="https://weienhua.github.io/2022/08/08/mysql%E9%85%8D%E7%BD%AE/#more">这里</a>，而通过备份的<code>sql</code>文件在<code>Navicat</code>中直接运行覆盖导入，既可以省去修改的过程，<strong>不过这里有个重点：</strong>在覆盖导入之后也需要运行刷新权限的语句才可以使得修改生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLUSH PRIVILEGES # 这一条命令是刷新mysql的权限相关表</span><br></pre></td></tr></table></figure><p>之后就可以通过<code>ip</code>进行连接数据库了。</p><h5 id="克隆项目代码"><a href="#克隆项目代码" class="headerlink" title="克隆项目代码"></a>克隆项目代码</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone [仓库地址]</span><br></pre></td></tr></table></figure><h5 id="安装PyCharm"><a href="#安装PyCharm" class="headerlink" title="安装PyCharm"></a>安装<code>PyCharm</code></h5><h5 id="配置PyCharm"><a href="#配置PyCharm" class="headerlink" title="配置PyCharm"></a>配置<code>PyCharm</code></h5><p>安装完<code>PyCharm</code>之后，就可以配置开发环境了，用<code>PyCharm</code>打开项目，点击<code>File-&gt;Settings-&gt;Project:LabCourseDisplay-&gt;Python Interpreter</code>进入解释器配置</p><p><img src="https://s2.loli.net/2023/04/04/c5DCejFySvJianE.png" alt="image-20230404181146651"></p><p>点击<code>Add</code>添加新的解释器，选择<code>WSL</code>，在路径里选到虚拟环境的<code>bin</code>目录下，添加<code>python</code>解释器的版本，点击确定，即可添加成功</p><p><img src="https://s2.loli.net/2023/04/04/XoJDApEZjKRH4cS.png" alt="image-20230404181419528"></p><p>添加完虚拟环境解释器之后，配置项目的解释器，选择<code>Edit Configurations...</code></p><p><img src="https://s2.loli.net/2023/04/04/wTMFzk2mGoY3WpE.png" alt="image-20230404181524433"></p><p>之后在<code>python interpreter</code>处选择刚才配置的<code>WSL</code>虚拟环境的解释器</p><p>打开项目的<code>settings.py</code>文件，由于<code>Django</code>需要配置连接数据库的<code>ip</code>这里的<code>HOST</code>即为<code>Linux</code>虚拟子环境的<code>IP地址</code>，打开<code>Linux shell</code>通过命令即可查看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/04/04/JVFiIWyBnXE4o3s.png" alt="image-20230404181840650"></p><p>至此，项目环境配置完成，通过<code>PyCharm</code>就可以开始进行开发了。</p><h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><ul><li><a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-manual">WSL安装</a></li><li><a href="https://zhuanlan.zhihu.com/p/384026893">开启WSL功能</a></li><li><a href="https://zhuanlan.zhihu.com/p/166444726">安装<code>mysql</code></a></li><li><a href="https://blog.csdn.net/a35100535/article/details/113250441">文章1，数据库问题</a></li><li><a href="https://www.cnblogs.com/freely/p/8022923.html">文章2，<code>virtualenv</code>问题</a></li><li><a href="https://blog.csdn.net/qq_36191272/article/details/122933438">文章3，<code>mysql-client</code>安装问题</a></li><li><a href="https://weienhua.github.io/2022/08/08/mysql%E9%85%8D%E7%BD%AE/#more">这里，<code>mysql</code>远程连接问题</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2023/04/03/lG7qsZLthxcnbYz.jpg&quot; alt=&quot;宇航员&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;重装系统之后的Django项目配置（WSL）&quot;&gt;&lt;a href=&quot;#重装系统之后的Django项目配置（WSL）&quot; class=&quot;headerlink&quot; title=&quot;重装系统之后的Django项目配置（WSL）&quot;&gt;&lt;/a&gt;重装系统之后的&lt;code&gt;Django&lt;/code&gt;项目配置（&lt;code&gt;WSL&lt;/code&gt;）&lt;/h3&gt;&lt;p&gt;升级固态硬盘之后，只能重装系统，这样一来就得重新来配置项目的开发环境。&lt;/p&gt;
&lt;h4 id=&quot;Linux环境下&quot;&gt;&lt;a href=&quot;#Linux环境下&quot; class=&quot;headerlink&quot; title=&quot;Linux环境下&quot;&gt;&lt;/a&gt;&lt;code&gt;Linux&lt;/code&gt;环境下&lt;/h4&gt;&lt;p&gt;&lt;code&gt;Django&lt;/code&gt;项目需要用到&lt;code&gt;python&lt;/code&gt;解释器，在开发过程中，不同的项目可能会用到不同版本的库，为了防止环境下包的版本冲突，选择在&lt;code&gt;windows的linux子环境&lt;/code&gt;中来安装多版本的&lt;code&gt;python&lt;/code&gt;，通过&lt;code&gt;virtualenv&lt;/code&gt;来生成相互隔离的虚拟环境。&lt;/p&gt;</summary>
    
    
    
    <category term="工程" scheme="https://weienhua.github.io/categories/%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="环境配置" scheme="https://weienhua.github.io/categories/%E5%B7%A5%E7%A8%8B/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="python" scheme="https://weienhua.github.io/tags/python/"/>
    
    <category term="Linux" scheme="https://weienhua.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Typora+PicGo-Core+SM.MS搭建图床</title>
    <link href="https://weienhua.github.io/2023/01/08/Typora-PicGo-Core-SM-MS%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/"/>
    <id>https://weienhua.github.io/2023/01/08/Typora-PicGo-Core-SM-MS%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/</id>
    <published>2023-01-08T11:37:03.000Z</published>
    <updated>2023-01-08T15:28:27.075Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2023/01/08/OqFkYJ97LZN4GEy.jpg" alt="龙脊梯田"></p><h3 id="Typora-PicGo-Core-SM-MS搭建图床"><a href="#Typora-PicGo-Core-SM-MS搭建图床" class="headerlink" title="Typora+PicGo-Core+SM.MS搭建图床"></a>Typora+PicGo-Core+SM.MS搭建图床</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">版本信息：</span><br><span class="line">Typora：1.2.3</span><br><span class="line">PicGo-Core：1.5.0</span><br></pre></td></tr></table></figure><span id="more"></span><h4 id="1、PicGo-Core"><a href="#1、PicGo-Core" class="headerlink" title="1、PicGo-Core"></a>1、PicGo-Core</h4><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p><a href="https://picgo.github.io/PicGo-Core-Doc/zh/guide/">PicGo-Core</a> 是一个开源的命令行图片上传工具。虽然可以在 Typora 的设置中一键下载安装 PicGo-Core，但它是从 Typora 自己的 fork 库中安装的，并不是 PicGo-Core 的官方开源库；因此版本通常较为老旧，存在各种没有必要的 bug、也无法使用更新的 feature。</p><p>基于以上理由，强烈建议直接在本地自己安装 PicGo-Core。安装本身也很简单：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">需要 Node.js 版本 &gt;= 8</span></span><br><span class="line">npm install picgo -g</span><br></pre></td></tr></table></figure><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>安装成功后，可以使用交互式命令行方便地进行配置并自动生成配置文件，无需手动生成和复制粘贴。配置好图床后使用 <code>picgo use uploader</code> 选择当前要使用的 <code>Uploader</code> 。</p><p><img src="https://s2.loli.net/2023/01/08/Rn9MTSYjExZyFf6.png" alt="image-20230108225835752"></p><p>这边使用的是SM.MS图床，选择<code>smms</code>选项后要求输入<code>api token</code>。注册登录SM.MS后，可以在个人中心中生成查看<code>token</code>，输入即可完成配置。其他的图床也有对应的交互配置选项。</p><p>如果无法通过上面的方式完成配置，也可以手动生成配置文件。这里以默认的smms图床为例，更多图床的配置方法详见<a href="https://picgo.github.io/PicGo-Core-Doc/zh/guide/config.html#picbed">配置文档</a>。</p><blockquote><p>picgo 的默认配置文件为<code>~/.picgo/config.json</code>。其中<code>~</code>为用户目录。不同系统的用户目录不太一样。</p><p>linux 和 macOS 均为<code>~/.picgo/config.json</code>。</p><p>windows 则为<code>C:\Users\你的用户名\.picgo\config.json</code>。</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;picBed&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;uploader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;smms&quot;</span><span class="punctuation">,</span> <span class="comment">// 代表当前的默认上传图床为 SM.MS,</span></span><br><span class="line">    <span class="attr">&quot;smms&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span> <span class="comment">// 自己的 token</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;picgoPlugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span> <span class="comment">// 为插件预留</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="安装smms-v2-API插件"><a href="#安装smms-v2-API插件" class="headerlink" title="安装smms v2 API插件"></a>安装smms v2 API插件</h5><p>这边有坑，一是SMMS V1 API停用</p><p>正如博主Lzskyline所说这是个大坑，有多大呢。PicGo-Core目前使用的是SMMS v1 API，但是SMMS已经把V1 API给停了，只能使用V2。（PicGo-Core作者已经在Github上表示后面会增加v2 API）经过查询后发现有其他开发者通过第三方插件的方式解决了这个问题,，所以我们需要安装这个v2版本的smms-user插件。</p><p>用命令安装smms-user插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picgo install smms-user</span><br></pre></td></tr></table></figure><p>等待安装完成即可。</p><p>这边同时安装一个另外的命名插件，可以将上传的图片按照时间重新命名。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picgo install super-prefix</span><br></pre></td></tr></table></figure><p>配置信息如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;picBed&quot;: &#123;</span><br><span class="line">    &quot;current&quot;: &quot;smms-user&quot;,</span><br><span class="line">    &quot;uploader&quot;: &quot;smms-user&quot;,</span><br><span class="line">    &quot;smms-user&quot;: &#123;</span><br><span class="line">      &quot;Authorization&quot;: &quot;[token]&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;transformer&quot;: &quot;path&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;picgoPlugins&quot;: &#123;</span><br><span class="line">    &quot;picgo-plugin-smms-user&quot;: true,</span><br><span class="line">    &quot;picgo-plugin-super-prefix&quot;: true</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;picgo-plugin-super-prefix&quot;: &#123;</span><br><span class="line">    &quot;fileFormat&quot;: &quot;YYYYMMDDHHmmss&quot;</span><br><span class="line">  &#125;, //super-prefix插件配置</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><p>完成安装和配置后，就可以通过命令行上传图片到图床了。如果执行命令后返回了图床的URL，则说明配置成功。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">上传具体路径图片</span></span><br><span class="line">picgo upload /xxx/xxx.jpg</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">上传剪贴板里的第一张图片（上传时会将格式转成png）</span></span><br><span class="line">picgo upload</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/01/08/MfZO4qN6nCivIPo.png" alt="image-20230108230616425"></p><h4 id="2、Typora设置"><a href="#2、Typora设置" class="headerlink" title="2、Typora设置"></a>2、Typora设置</h4><p>配置好 PicGo-Core 后，在 Typora 的偏好设置-图像中进行设置。</p><h5 id="上传服务设定"><a href="#上传服务设定" class="headerlink" title="上传服务设定"></a>上传服务设定</h5><p>由于我们自己安装了 PicGo-Core，没有使用它自己集成的，所以上传服务选择 <code>Custom Command</code> （自定义命令），命令使用 <code>picgo u</code> 即可。</p><p><img src="https://s2.loli.net/2023/01/08/aiW5zGvhxVCYPJm.png" alt="image-20230108230807058"></p><p>设置后点击下方的“验证图片上传选项”，他会自动上传两张图片测试图片上传服务。如果出现如下结果，说明配置成功。</p><p><img src="https://s2.loli.net/2023/01/08/XIFE86wmOC1stDR.png" alt="image-20230108231009195"></p><h5 id="插入图片时设置"><a href="#插入图片时设置" class="headerlink" title="插入图片时设置"></a>插入图片时设置</h5><p><img src="https://s2.loli.net/2023/01/08/BhslVAbrFcI8Pit.png" alt="image-20230108231054042"></p><p>如果想在插入图片时直接上传，可以按照如上选项设置。然而这样设置存在一个问题，插入图片后需要等待上传完成返回URL才能在文档中看到图片的预览，感觉不够流畅。并且如果反复多次替换图片，图床中会出现很多冗余图片，造成空间浪费。</p><h5 id="批量上传图片"><a href="#批量上传图片" class="headerlink" title="批量上传图片"></a>批量上传图片</h5><p>由于上述原因，推荐在完成文章后统一批量上传文章中用到的所有本地图片。</p><p>在菜单中选择“格式-图像-上传所有本地图片即可完成批量上传。</p><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><ul><li><p><a href="https://www.cnblogs.com/skuld-yi/p/14533794.html"> Typora + PicGo-Core 自动上传图片到图床 </a></p></li><li><p><a href="https://blog.csdn.net/qq_37284607/article/details/107138217">Typora+PicGo-core+SMMS图床踩坑记</a></p></li><li><p><a href="https://www.lzskyline.com/index.php/archives/87/">Typora + PicGo-Core + SM.MS图床</a></p></li><li><p><a href="https://picgo.github.io/PicGo-Core-Doc/zh/guide/">PicGo-Core 官方文档</a></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2023/01/08/OqFkYJ97LZN4GEy.jpg&quot; alt=&quot;龙脊梯田&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Typora-PicGo-Core-SM-MS搭建图床&quot;&gt;&lt;a href=&quot;#Typora-PicGo-Core-SM-MS搭建图床&quot; class=&quot;headerlink&quot; title=&quot;Typora+PicGo-Core+SM.MS搭建图床&quot;&gt;&lt;/a&gt;Typora+PicGo-Core+SM.MS搭建图床&lt;/h3&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;版本信息：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Typora：1.2.3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PicGo-Core：1.5.0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="工具" scheme="https://weienhua.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="图床" scheme="https://weienhua.github.io/categories/%E5%B7%A5%E5%85%B7/%E5%9B%BE%E5%BA%8A/"/>
    
    
    <category term="图床搭建" scheme="https://weienhua.github.io/tags/%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA/"/>
    
    <category term="PicGo" scheme="https://weienhua.github.io/tags/PicGo/"/>
    
  </entry>
  
  <entry>
    <title>华为云部署Java web项目</title>
    <link href="https://weienhua.github.io/2023/01/01/%E5%8D%8E%E4%B8%BA%E4%BA%91%E9%83%A8%E7%BD%B2Java-web%E9%A1%B9%E7%9B%AE/"/>
    <id>https://weienhua.github.io/2023/01/01/%E5%8D%8E%E4%B8%BA%E4%BA%91%E9%83%A8%E7%BD%B2Java-web%E9%A1%B9%E7%9B%AE/</id>
    <published>2023-01-01T15:48:34.000Z</published>
    <updated>2023-01-01T15:56:32.266Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/08/02/clQoqBDumNjPSCy.png" alt="wallhaven-pkogdp_1920x1080"></p><h3 id="鲲鹏大作业：华为云部署"><a href="#鲲鹏大作业：华为云部署" class="headerlink" title="鲲鹏大作业：华为云部署"></a>鲲鹏大作业：华为云部署</h3><h5 id="租ecs"><a href="#租ecs" class="headerlink" title="租ecs"></a>租<code>ecs</code></h5><p><code>CentOs7.6</code></p><span id="more"></span><h5 id="租RDS"><a href="#租RDS" class="headerlink" title="租RDS"></a>租<code>RDS</code></h5><p>选择按需计费，<code>mysql</code>，版本5.6，性能<code>2vCPUs|4GB</code>，设置密码，其他默认。</p><h5 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装<code>mysql</code></h5><p>1、下载安装包<code>mysql-5.6.34-linux-glibc2.5-x86_64.tar.gz</code>（可前往官网自行下载：<a href="https://downloads.mysql.com/archives/community/%EF%BC%89">https://downloads.mysql.com/archives/community/）</a></p><p>2、卸载系统自带的<code>Mariadb</code></p><ul><li>查询已经安装的<code>mariadb</code></li></ul><p><code>rpm -qa|grep mariadb</code></p><ul><li>卸载<code>mariadb</code>，文件名为上述命令查询出来的文件</li></ul><p><code>rpm -e --nodeps [文件名]</code></p><p>3、删除etc目录下的<code>my.cnf</code></p><p><code>rm /etc/my.cnf</code></p><p>4、创建<code>mysql</code>用户组</p><p><code>groupadd mysql</code></p><p>5、创建一个用户名为<code>mysql</code>的用户并加入<code>mysql</code>用户组</p><p><code>useradd -g mysql mysql</code></p><p>6、将下载的压缩包上传到 <code>/usr/local/</code> 目录下</p><p>7、解压安装包</p><p>进入目录</p><p><code>cd /usr/local/</code></p><p><code>tar -zxvf mysql-5.6.34-linux-glibc2.5-x86_64.tar.gz</code></p><p>8、重命名</p><p><code>mv mysql-5.6.34-linux-glibc2.5-x86_64 mysql</code></p><p>9、在 etc 下新建配置文件<code>my.cnf</code>，并在该文件中添加一下代码：</p><p>进入目录</p><p><code>cd mysql/support-files/</code></p><p>复制一份放到etc中</p><p><code>cp my-default.cnf /etc/my.cnf</code></p><p>配置etc目录下的<code>my.cnf</code>文件</p><p><code>vim /etc/my.cnf</code></p><p>通过vim编辑器编辑<code>my.cnf</code>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[mysql]</span><br><span class="line"># 设置mysql客户端默认字符集</span><br><span class="line">default-character-set=utf8 </span><br><span class="line">socket=/var/lib/mysql/mysql.sock</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">skip-name-resolve</span><br><span class="line">#设置3306端口</span><br><span class="line">port = 3306 </span><br><span class="line">socket=/var/lib/mysql/mysql.sock</span><br><span class="line"># 设置mysql的安装目录</span><br><span class="line">basedir=/usr/local/mysql</span><br><span class="line"># 设置mysql数据库的数据的存放目录</span><br><span class="line">datadir=/usr/local/mysql/data</span><br><span class="line"># 允许最大连接数</span><br><span class="line">max_connections=200</span><br><span class="line"># 服务端使用的字符集默认为8比特编码的latin1字符集</span><br><span class="line">character-set-server=utf8</span><br><span class="line"># 创建新表时将使用的默认存储引擎</span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line">lower_case_table_name=1</span><br><span class="line">max_allowed_packet=16M</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>10、进入安装<code>mysql</code>软件的目录</p><p><code>cd /usr/local/mysql/</code></p><p>修改当前目录拥有者为<code>mysql</code>用户</p><p><code>chown -R mysql:mysql ./</code></p><p>安装数据库</p><p><code>./scripts/mysql_install_db --user=mysql --basedir=/usr/local/mysql/ --datadir=/usr/local/mysql/data/</code></p><p>这边可能会报这个错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FATAL ERROR: please install the following Perl modules before executing </span><br><span class="line">./scripts/mysql_install_db:Data::Dumper</span><br></pre></td></tr></table></figure><p>解决方法：安装<code>autoconf</code>库，这个包安装的同时会安装<code>Data:Dumper</code>模块</p><p><code>yum -y install autoconf</code></p><p>我做的时候还报了另外一个错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Installing MySQL system tables.../usr/local/mysql/bin/mysqld: error while loading shared</span><br></pre></td></tr></table></figure><p>原因是缺少<code>libaio</code>库文件</p><p>解决方法：</p><p><code>yum install libaio* -y</code></p><p>安装完之后再次执行【安装数据库】的命令</p><p>修改当前data目录的拥有者为<code>mysql</code>用户</p><p><code>chown -R mysql:mysql data</code></p><p>到此安装数据库完毕！</p><p>【下面是配置操作】</p><p>1、授予<code>my.cnf</code>最大权限</p><p><code>cd ~</code></p><p><code>chmod 777 /etc/my.cnf</code></p><p>2、设置开机自启动服务控制脚本：</p><ul><li>复制启动脚本到资源目录</li></ul><p><code>cd /usr/local/mysql/</code></p><p><code>cp ./support-files/mysql.server /etc/rc.d/init.d/mysqld</code></p><ul><li>增加<code>mysqld</code>服务控制脚本执行权限</li></ul><p><code>chmod +x /etc/rc.d/init.d/mysqld</code></p><ul><li>将<code>mysqld</code>服务加入到系统服务</li></ul><p><code>chkconfig --add mysqld</code></p><ul><li>检查<code>mysqld</code>服务是否已经生效</li></ul><p><code>chkconfig --list mysqld</code></p><p>正确输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld 0:off 1:off 2:on 3:on 4:on 5:on 6:off</span><br></pre></td></tr></table></figure><p>表明<code>mysqld</code>服务已经生效，在2、3、4、5运行级别随系统启动而自动启动，以后可以使用<code>service</code>命令控制<code>mysql</code>的启动和停止。</p><p>启动服务：<code>service mysqld start</code></p><p>停止服务：<code>service mysqld stop</code></p><ul><li>启动<code>mysqld</code></li></ul><p><code>service mysqld start</code></p><ul><li>将<code>mysql</code>的<code>bin</code>目录加入到<code>PATH</code>环境变量，编辑<code>~/bash_profile</code>文件</li></ul><p><code>vim ~/.bash_profile</code></p><p>在文件结尾添加一行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$PATH:/usr/local/mysql/bin</span><br></pre></td></tr></table></figure><p>执行下面命令使得修改内容立即生效</p><p><code>source ~/.bash_profile</code></p><ul><li>以<code>root</code>账户登录，默认是没有密码的</li></ul><p><code>mysql -u root -p</code></p><ul><li>设置<code>root</code>账户密码为<code>root</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">update user set password=password(&#x27;root&#x27;) where user=&#x27;root&#x27; and host=&#x27;localhost&#x27;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><ul><li><p>安装步骤参考：<code>https://blog.csdn.net/qq_17776287/article/details/53536761</code></p></li><li><p>报错处理<code>https://blog.csdn.net/songmao3145/article/details/77676402</code></p></li><li><p>通过命令行连接数据库<code>https://help.aliyun.com/document_detail/26138.html</code></p></li><li><p><code>mysql -h [ip地址] -P 3306 -u root -p</code>   注意这里的第一个P是大写的</p></li></ul><h5 id="安装jdk8"><a href="#安装jdk8" class="headerlink" title="安装jdk8"></a>安装<code>jdk8</code></h5><p>1、 安装方法</p><p><code>CentOs</code>上使用 <code>yum</code> 直接安装，环境变量自动配置好</p><p>2、查看是否已经安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@ecs ~]# java -version</span><br><span class="line">openjdk version &quot;1.8.0_352&quot;</span><br><span class="line">OpenJDK Runtime Environment (build 1.8.0_352-b08)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 25.352-b08, mixed mode)</span><br></pre></td></tr></table></figure><p>3、卸载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa |grep java</span><br><span class="line">rpm -qa |grep jdk</span><br><span class="line">rpm -qa |grep gcj</span><br></pre></td></tr></table></figure><p>如果有输出信息，批量卸载系统自带</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep java | xargs rpm -e --nodeps</span><br></pre></td></tr></table></figure><p>如果使用 <code>yum</code> 安装的 <code>jdk</code>，请使用下面命令卸载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y remove java-1.8.0-openjdk-headless.x86_64</span><br></pre></td></tr></table></figure><p>4、安装</p><ul><li>检查<code>yum</code>中有没有<code>java1.8</code>的包</li></ul><p><code>yum list java-1.8*</code></p><ul><li>开始安装</li></ul><p><code>yum install java-1.8.0-openjdk* -y</code></p><ul><li>验证是否安装成功</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@ecs ~]# java -version</span><br><span class="line">openjdk version &quot;1.8.0_352&quot;</span><br><span class="line">OpenJDK Runtime Environment (build 1.8.0_352-b08)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 25.352-b08, mixed mode)</span><br></pre></td></tr></table></figure><ul><li>安装参考：<code>https://cloud.tencent.com/developer/article/1965229</code></li></ul><h5 id="安装tomcat"><a href="#安装tomcat" class="headerlink" title="安装tomcat"></a>安装<code>tomcat</code></h5><ul><li>下载：<code>wget  https://archive.apache.org/dist/tomcat/tomcat-8/v8.5.51/bin/apache-tomcat-8.5.51.tar.gz</code></li><li>解压缩：<code>tar -zxf apache-tomcat-8.5.51.tar.gz</code></li><li>创建目录：<code>mkdir /usr/local/tomcat</code></li><li>移动<code>apache-tomcat-8.5.51</code>下的内容到<code>/usr/local/tomcat</code>：<code>mv apache-tomcat-8.5.51/* /usr/local/tomcat/</code></li></ul><h5 id="上传启动项目"><a href="#上传启动项目" class="headerlink" title="上传启动项目"></a>上传启动项目</h5><ul><li><p>上传<code>war</code>包到<code>/usr/local/tomcat/webapps</code></p></li><li><p>启动<code>tomcat</code>：<code>/usr/local/tomcat/bin/startup.sh</code></p></li><li><p>访问：<code>http://[ip地址]:8080/[项目名]</code></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/08/02/clQoqBDumNjPSCy.png&quot; alt=&quot;wallhaven-pkogdp_1920x1080&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;鲲鹏大作业：华为云部署&quot;&gt;&lt;a href=&quot;#鲲鹏大作业：华为云部署&quot; class=&quot;headerlink&quot; title=&quot;鲲鹏大作业：华为云部署&quot;&gt;&lt;/a&gt;鲲鹏大作业：华为云部署&lt;/h3&gt;&lt;h5 id=&quot;租ecs&quot;&gt;&lt;a href=&quot;#租ecs&quot; class=&quot;headerlink&quot; title=&quot;租ecs&quot;&gt;&lt;/a&gt;租&lt;code&gt;ecs&lt;/code&gt;&lt;/h5&gt;&lt;p&gt;&lt;code&gt;CentOs7.6&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="项目" scheme="https://weienhua.github.io/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="Java web" scheme="https://weienhua.github.io/categories/%E9%A1%B9%E7%9B%AE/Java-web/"/>
    
    
    <category term="Java" scheme="https://weienhua.github.io/tags/Java/"/>
    
    <category term="云部署" scheme="https://weienhua.github.io/tags/%E4%BA%91%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>mysql配置</title>
    <link href="https://weienhua.github.io/2022/08/08/mysql%E9%85%8D%E7%BD%AE/"/>
    <id>https://weienhua.github.io/2022/08/08/mysql%E9%85%8D%E7%BD%AE/</id>
    <published>2022-08-08T05:58:08.000Z</published>
    <updated>2023-04-03T03:10:00.135Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2023/01/08/VS9gPsX14uIf6xM.jpg" alt="铁路 火车轨道 你的名字动漫图片_彼岸图网"></p><h3 id="mysql配置"><a href="#mysql配置" class="headerlink" title="mysql配置"></a>mysql配置</h3><p>安装WSL中的Linux环境后，配置python的开发环境，虚拟环境和python版本都已经配置完成后，在项目运行调试的时候发现数据库未配置，下面是配置WSL ubuntu18.04时遇到的一下问题和解决方法。</p><span id="more"></span><h4 id="mysql问题"><a href="#mysql问题" class="headerlink" title="mysql问题"></a>mysql问题</h4><p>我电脑上的mysql是安装在windows上的，所以从WSL中连接访问的话属于远程连接，当时不太明白，跟老师也调试了好长时间，最后还是没有连接上，剩下的解决方案就是在WSL中安装mysql这样就可以省去配置mysql的远程连接，想着之前的一下其他东西都是用的windows下的mysql所以还是想直接用这个的，一些数据可以保留下来。</p><p>因为mysql默认是禁止远程连接访问的，所以需要打开这个开关，这也是前面一直连接失败的问题所在。下面是解决方法：</p><p>在Windows环境下进去mysql的cmd窗口输入下列代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">update user set host = &#x27;%&#x27; where user = &#x27;root&#x27;;</span><br><span class="line">FLUSH PRIVILEGES # 这一条命令是刷新mysql的权限相关表，所以必须执行，不然还是会出错</span><br></pre></td></tr></table></figure><p>执行完上面的代码后再回到WSL环境下就可以直接通过命令进入数据库了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h [ip地址] -u root -p</span><br></pre></td></tr></table></figure><h4 id="migrate问题"><a href="#migrate问题" class="headerlink" title="migrate问题"></a>migrate问题</h4><p>在配置完mysql的东西后运行python项目命令，直接在数据库中生成相关的表，但是在运行migrate命令时出现报错，依然说连接数据库出错，第一时间以为是mysql配置没配好，然后发现是django项目中的settings文件中配置的数据库连接中的host地址问题，在WSL中通过命令<code>cat /etc/resolv.conf</code>可以查看到ip地址，通过该地址即可连接到windows下的mysql，配置进pycharm后再用migrate就可以生成表了，可是每次电脑重启后这个ip地址都会随机改变，那么在pycharm的host又是写死的，这就引出了下一个问题。</p><h4 id="固定WSL的ip地址"><a href="#固定WSL的ip地址" class="headerlink" title="固定WSL的ip地址"></a>固定WSL的ip地址</h4><h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><ul><li><a href="https://www.cnblogs.com/zaynq/p/15620799.html">mysql远程连接1</a></li><li><a href="https://blog.csdn.net/bingjianit/article/details/54384299">mysql远程连接2</a></li><li><a href="https://zhuanlan.zhihu.com/p/357050093">WSL固定ip地址</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2023/01/08/VS9gPsX14uIf6xM.jpg&quot; alt=&quot;铁路 火车轨道 你的名字动漫图片_彼岸图网&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;mysql配置&quot;&gt;&lt;a href=&quot;#mysql配置&quot; class=&quot;headerlink&quot; title=&quot;mysql配置&quot;&gt;&lt;/a&gt;mysql配置&lt;/h3&gt;&lt;p&gt;安装WSL中的Linux环境后，配置python的开发环境，虚拟环境和python版本都已经配置完成后，在项目运行调试的时候发现数据库未配置，下面是配置WSL ubuntu18.04时遇到的一下问题和解决方法。&lt;/p&gt;</summary>
    
    
    
    <category term="工程" scheme="https://weienhua.github.io/categories/%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="环境配置" scheme="https://weienhua.github.io/categories/%E5%B7%A5%E7%A8%8B/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="linux" scheme="https://weienhua.github.io/tags/linux/"/>
    
    <category term="mysql" scheme="https://weienhua.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>WSL安装配置</title>
    <link href="https://weienhua.github.io/2022/08/02/WSL%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <id>https://weienhua.github.io/2022/08/02/WSL%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</id>
    <published>2022-08-02T02:47:20.000Z</published>
    <updated>2023-04-03T03:09:45.956Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/08/02/clQoqBDumNjPSCy.png" alt="wallhaven-pkogdp_1920x1080"></p><h1 id="WSL安装和配置"><a href="#WSL安装和配置" class="headerlink" title="WSL安装和配置"></a>WSL安装和配置</h1><p>在python开发中python版本和各种库的版本不同导致无法把不同版本的库装在全局配置中，所以得用到virtualenv虚拟环境管理，这里在windows系统下安装linux的子系统，可以方便的在linux中进行一些安装和环境配置。</p><span id="more"></span><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h4 id="启用WSL"><a href="#启用WSL" class="headerlink" title="启用WSL"></a>启用WSL</h4><p>windows系统默认是关闭WSL的选项的，所以在安装之前要先把WSL的功能打开。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</span><br></pre></td></tr></table></figure><p>管理员身份在powershell中运行这条命令即可打开。</p><h4 id="启用虚拟机功能"><a href="#启用虚拟机功能" class="headerlink" title="启用虚拟机功能"></a>启用虚拟机功能</h4><p>安装WSL 2之前，必须启用虚拟机平台可选功能，即启用虚拟化功能。</p><p>以管理员身份在powershell中运行下面命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure><p>启用上面两个功能之后重启电脑让系统完成设置</p><h4 id="下载Linux内核更新包"><a href="#下载Linux内核更新包" class="headerlink" title="下载Linux内核更新包"></a>下载Linux内核更新包</h4><p>这里是把WSL1更新为WSL的</p><ul><li><a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi">适用于x64的WSL2 Linux内核更新包</a></li><li>运行上一步中的更新包，此时需要权限，点击是即可。</li></ul><p>安装完成之后继续执行下面，将WSL2设置为默认版本。</p><h4 id="将WSL2设置为默认版本"><a href="#将WSL2设置为默认版本" class="headerlink" title="将WSL2设置为默认版本"></a>将WSL2设置为默认版本</h4><p>以管理员身份在powershell中运行下面的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --set-default-version 2</span><br></pre></td></tr></table></figure><h4 id="去Microsoft-Store中安装Linux"><a href="#去Microsoft-Store中安装Linux" class="headerlink" title="去Microsoft Store中安装Linux"></a>去Microsoft Store中安装Linux</h4><p>打开商店，搜索Ubuntu，这里 安装版本为18.04.5</p><p><img src="https://s2.loli.net/2022/08/02/2zHBtXAYfegQscw.png" alt="2"></p><p>下载安装完成之后点击打开即可，也可以在左面按住shift键点击右键，选择运行linuxshell，第一次运行需要配置解压文件，需要等待，之后配置用户名和密码即可。</p><h4 id="关于python"><a href="#关于python" class="headerlink" title="关于python"></a>关于python</h4><p>系统自带的python版本为3.6.9，如果需要安装其他版本直接通过Linux系统的方法安装即可。</p><h4 id="关于密码"><a href="#关于密码" class="headerlink" title="关于密码"></a>关于密码</h4><p>关于用户名和密码可以参看下图。</p><p><img src="https://s2.loli.net/2022/08/02/yCZ1Mq8WF4D2Vdi.png" alt="1"></p><h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><ul><li><a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-manual">WSL安装</a></li><li><a href="https://zhuanlan.zhihu.com/p/384026893">开启WSL功能</a></li><li><a href="https://docs.microsoft.com/zh-cn/windows/wsl/setup/environment#set-up-your-linux-username-and-password">用户名和密码</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/08/02/clQoqBDumNjPSCy.png&quot; alt=&quot;wallhaven-pkogdp_1920x1080&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;WSL安装和配置&quot;&gt;&lt;a href=&quot;#WSL安装和配置&quot; class=&quot;headerlink&quot; title=&quot;WSL安装和配置&quot;&gt;&lt;/a&gt;WSL安装和配置&lt;/h1&gt;&lt;p&gt;在python开发中python版本和各种库的版本不同导致无法把不同版本的库装在全局配置中，所以得用到virtualenv虚拟环境管理，这里在windows系统下安装linux的子系统，可以方便的在linux中进行一些安装和环境配置。&lt;/p&gt;</summary>
    
    
    
    <category term="工程" scheme="https://weienhua.github.io/categories/%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="环境配置" scheme="https://weienhua.github.io/categories/%E5%B7%A5%E7%A8%8B/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="python" scheme="https://weienhua.github.io/tags/python/"/>
    
    <category term="Linux" scheme="https://weienhua.github.io/tags/Linux/"/>
    
  </entry>
  
</feed>
